
LTNBTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007974  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd4  08007bd4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08007bd4  08007bd4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bd4  08007bd4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd4  08007bd4  00017bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bd8  08007bd8  00017bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08007bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001234  20000068  08007c44  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000129c  08007c44  0002129c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018c43  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039b4  00000000  00000000  00038d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  0003c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001134  00000000  00000000  0003dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aac7  00000000  00000000  0003ee04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a542  00000000  00000000  000598cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009aa28  00000000  00000000  00073e0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006194  00000000  00000000  0010e838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001149cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a6c 	.word	0x08007a6c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08007a6c 	.word	0x08007a6c

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	; 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_f2uiz>:
 800036c:	0042      	lsls	r2, r0, #1
 800036e:	d20e      	bcs.n	800038e <__aeabi_f2uiz+0x22>
 8000370:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000374:	d30b      	bcc.n	800038e <__aeabi_f2uiz+0x22>
 8000376:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800037a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800037e:	d409      	bmi.n	8000394 <__aeabi_f2uiz+0x28>
 8000380:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000388:	fa23 f002 	lsr.w	r0, r3, r2
 800038c:	4770      	bx	lr
 800038e:	f04f 0000 	mov.w	r0, #0
 8000392:	4770      	bx	lr
 8000394:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000398:	d101      	bne.n	800039e <__aeabi_f2uiz+0x32>
 800039a:	0242      	lsls	r2, r0, #9
 800039c:	d102      	bne.n	80003a4 <__aeabi_f2uiz+0x38>
 800039e:	f04f 30ff 	mov.w	r0, #4294967295
 80003a2:	4770      	bx	lr
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop

080003ac <DWT_Delay_Init>:
uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80003b0:	4b14      	ldr	r3, [pc, #80]	; (8000404 <DWT_Delay_Init+0x58>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	4a13      	ldr	r2, [pc, #76]	; (8000404 <DWT_Delay_Init+0x58>)
 80003b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80003ba:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <DWT_Delay_Init+0x58>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	4a10      	ldr	r2, [pc, #64]	; (8000404 <DWT_Delay_Init+0x58>)
 80003c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003c6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80003c8:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003ce:	f023 0301 	bic.w	r3, r3, #1
 80003d2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80003e0:	4b09      	ldr	r3, [pc, #36]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80003e6:	bf00      	nop
     __ASM volatile ("NOP");
 80003e8:	bf00      	nop
  __ASM volatile ("NOP");
 80003ea:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <DWT_Delay_Init+0x5c>)
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80003f4:	2300      	movs	r3, #0
 80003f6:	e000      	b.n	80003fa <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80003f8:	2301      	movs	r3, #1
  }
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bc80      	pop	{r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000edf0 	.word	0xe000edf0
 8000408:	e0001000 	.word	0xe0001000

0800040c <delay>:

__STATIC_INLINE void delay(volatile uint32_t microseconds)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000414:	4b0d      	ldr	r3, [pc, #52]	; (800044c <delay+0x40>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800041a:	f003 f8d7 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 800041e:	4603      	mov	r3, r0
 8000420:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <delay+0x44>)
 8000422:	fba2 2303 	umull	r2, r3, r2, r3
 8000426:	0c9b      	lsrs	r3, r3, #18
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	fb02 f303 	mul.w	r3, r2, r3
 800042e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000430:	bf00      	nop
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <delay+0x40>)
 8000434:	685a      	ldr	r2, [r3, #4]
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	1ad2      	subs	r2, r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	429a      	cmp	r2, r3
 800043e:	d3f8      	bcc.n	8000432 <delay+0x26>
}
 8000440:	bf00      	nop
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	e0001000 	.word	0xe0001000
 8000450:	431bde83 	.word	0x431bde83

08000454 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	460b      	mov	r3, r1
 800045e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0308 	add.w	r3, r7, #8
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800046e:	887b      	ldrh	r3, [r7, #2]
 8000470:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000472:	2301      	movs	r3, #1
 8000474:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2302      	movs	r3, #2
 8000478:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4619      	mov	r1, r3
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f001 fe7b 	bl	800217c <HAL_GPIO_Init>
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800048e:	b580      	push	{r7, lr}
 8000490:	b086      	sub	sp, #24
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 0308 	add.w	r3, r7, #8
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80004a8:	887b      	ldrh	r3, [r7, #2]
 80004aa:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b0:	2301      	movs	r3, #1
 80004b2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80004b4:	f107 0308 	add.w	r3, r7, #8
 80004b8:	4619      	mov	r1, r3
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f001 fe5e 	bl	800217c <HAL_GPIO_Init>
}
 80004c0:	bf00      	nop
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <DHT_Start>:


void DHT_Start (void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80004cc:	f7ff ff6e 	bl	80003ac <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 80004d0:	2102      	movs	r1, #2
 80004d2:	480d      	ldr	r0, [pc, #52]	; (8000508 <DHT_Start+0x40>)
 80004d4:	f7ff ffbe 	bl	8000454 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 0);   // pull the pin low
 80004d8:	2200      	movs	r2, #0
 80004da:	2102      	movs	r1, #2
 80004dc:	480a      	ldr	r0, [pc, #40]	; (8000508 <DHT_Start+0x40>)
 80004de:	f001 ffe8 	bl	80024b2 <HAL_GPIO_WritePin>


	delay (18000);   // wait for 18ms
 80004e2:	f244 6050 	movw	r0, #18000	; 0x4650
 80004e6:	f7ff ff91 	bl	800040c <delay>




    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, 1);   // pull the pin high
 80004ea:	2201      	movs	r2, #1
 80004ec:	2102      	movs	r1, #2
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <DHT_Start+0x40>)
 80004f0:	f001 ffdf 	bl	80024b2 <HAL_GPIO_WritePin>
    delay (20);   // wait for 20us
 80004f4:	2014      	movs	r0, #20
 80004f6:	f7ff ff89 	bl	800040c <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 80004fa:	2102      	movs	r1, #2
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <DHT_Start+0x40>)
 80004fe:	f7ff ffc6 	bl	800048e <Set_Pin_Input>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010800 	.word	0x40010800

0800050c <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	71fb      	strb	r3, [r7, #7]
	delay (40);
 8000516:	2028      	movs	r0, #40	; 0x28
 8000518:	f7ff ff78 	bl	800040c <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 800051c:	2102      	movs	r1, #2
 800051e:	4811      	ldr	r0, [pc, #68]	; (8000564 <DHT_Check_Response+0x58>)
 8000520:	f001 ffb0 	bl	8002484 <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d10e      	bne.n	8000548 <DHT_Check_Response+0x3c>
	{
		delay (80);
 800052a:	2050      	movs	r0, #80	; 0x50
 800052c:	f7ff ff6e 	bl	800040c <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) Response = 1;
 8000530:	2102      	movs	r1, #2
 8000532:	480c      	ldr	r0, [pc, #48]	; (8000564 <DHT_Check_Response+0x58>)
 8000534:	f001 ffa6 	bl	8002484 <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d002      	beq.n	8000544 <DHT_Check_Response+0x38>
 800053e:	2301      	movs	r3, #1
 8000540:	71fb      	strb	r3, [r7, #7]
 8000542:	e001      	b.n	8000548 <DHT_Check_Response+0x3c>
		else Response = -1;
 8000544:	23ff      	movs	r3, #255	; 0xff
 8000546:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000548:	bf00      	nop
 800054a:	2102      	movs	r1, #2
 800054c:	4805      	ldr	r0, [pc, #20]	; (8000564 <DHT_Check_Response+0x58>)
 800054e:	f001 ff99 	bl	8002484 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1f8      	bne.n	800054a <DHT_Check_Response+0x3e>

	return Response;
 8000558:	79fb      	ldrb	r3, [r7, #7]
}
 800055a:	4618      	mov	r0, r3
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40010800 	.word	0x40010800

08000568 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800056e:	2300      	movs	r3, #0
 8000570:	71bb      	strb	r3, [r7, #6]
 8000572:	e037      	b.n	80005e4 <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000574:	bf00      	nop
 8000576:	2102      	movs	r1, #2
 8000578:	481e      	ldr	r0, [pc, #120]	; (80005f4 <DHT_Read+0x8c>)
 800057a:	f001 ff83 	bl	8002484 <HAL_GPIO_ReadPin>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0f8      	beq.n	8000576 <DHT_Read+0xe>
		delay (40);   // wait for 40 us
 8000584:	2028      	movs	r0, #40	; 0x28
 8000586:	f7ff ff41 	bl	800040c <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 800058a:	2102      	movs	r1, #2
 800058c:	4819      	ldr	r0, [pc, #100]	; (80005f4 <DHT_Read+0x8c>)
 800058e:	f001 ff79 	bl	8002484 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d10e      	bne.n	80005b6 <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000598:	79bb      	ldrb	r3, [r7, #6]
 800059a:	f1c3 0307 	rsb	r3, r3, #7
 800059e:	2201      	movs	r2, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	43db      	mvns	r3, r3
 80005a8:	b25a      	sxtb	r2, r3
 80005aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ae:	4013      	ands	r3, r2
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	e00b      	b.n	80005ce <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 80005b6:	79bb      	ldrb	r3, [r7, #6]
 80005b8:	f1c3 0307 	rsb	r3, r3, #7
 80005bc:	2201      	movs	r2, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	b25a      	sxtb	r2, r3
 80005c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	b25b      	sxtb	r3, r3
 80005cc:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 80005ce:	bf00      	nop
 80005d0:	2102      	movs	r1, #2
 80005d2:	4808      	ldr	r0, [pc, #32]	; (80005f4 <DHT_Read+0x8c>)
 80005d4:	f001 ff56 	bl	8002484 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1f8      	bne.n	80005d0 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	3301      	adds	r3, #1
 80005e2:	71bb      	strb	r3, [r7, #6]
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	2b07      	cmp	r3, #7
 80005e8:	d9c4      	bls.n	8000574 <DHT_Read+0xc>
	}
	return i;
 80005ea:	79fb      	ldrb	r3, [r7, #7]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40010800 	.word	0x40010800

080005f8 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000600:	f7ff ff62 	bl	80004c8 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000604:	f7ff ff82 	bl	800050c <DHT_Check_Response>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <DHT_GetData+0xa0>)
 800060e:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000610:	f7ff ffaa 	bl	8000568 <DHT_Read>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <DHT_GetData+0xa4>)
 800061a:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 800061c:	f7ff ffa4 	bl	8000568 <DHT_Read>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <DHT_GetData+0xa8>)
 8000626:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000628:	f7ff ff9e 	bl	8000568 <DHT_Read>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <DHT_GetData+0xac>)
 8000632:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000634:	f7ff ff98 	bl	8000568 <DHT_Read>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <DHT_GetData+0xb0>)
 800063e:	701a      	strb	r2, [r3, #0]
	SUM = DHT_Read();
 8000640:	f7ff ff92 	bl	8000568 <DHT_Read>
 8000644:	4603      	mov	r3, r0
 8000646:	b29a      	uxth	r2, r3
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <DHT_GetData+0xb4>)
 800064a:	801a      	strh	r2, [r3, #0]

	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <DHT_GetData+0xb4>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <DHT_GetData+0xa4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <DHT_GetData+0xa8>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	4413      	add	r3, r2
 800065e:	4a11      	ldr	r2, [pc, #68]	; (80006a4 <DHT_GetData+0xac>)
 8000660:	7812      	ldrb	r2, [r2, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <DHT_GetData+0xb0>)
 8000666:	7812      	ldrb	r2, [r2, #0]
 8000668:	4413      	add	r3, r2
 800066a:	4299      	cmp	r1, r3
 800066c:	d10f      	bne.n	800068e <DHT_GetData+0x96>
	{

			DHT_Data->Temperature = Temp_byte1;
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <DHT_GetData+0xac>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f7ff fe22 	bl	80002bc <__aeabi_ui2f>
 8000678:	4602      	mov	r2, r0
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <DHT_GetData+0xa4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fe1a 	bl	80002bc <__aeabi_ui2f>
 8000688:	4602      	mov	r2, r0
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	605a      	str	r2, [r3, #4]


	}
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000008a 	.word	0x2000008a
 800069c:	20000084 	.word	0x20000084
 80006a0:	20000085 	.word	0x20000085
 80006a4:	20000086 	.word	0x20000086
 80006a8:	20000087 	.word	0x20000087
 80006ac:	20000088 	.word	0x20000088

080006b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <vApplicationGetIdleTaskMemory+0x28>)
 80006c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	4a05      	ldr	r2, [pc, #20]	; (80006dc <vApplicationGetIdleTaskMemory+0x2c>)
 80006c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2240      	movs	r2, #64	; 0x40
 80006cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	2000012c 	.word	0x2000012c

080006e0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f023 030f 	bic.w	r3, r3, #15
 80006f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	f043 030c 	orr.w	r3, r3, #12
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	f043 0308 	orr.w	r3, r3, #8
 8000708:	b2db      	uxtb	r3, r3
 800070a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	f043 030c 	orr.w	r3, r3, #12
 8000712:	b2db      	uxtb	r3, r3
 8000714:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f043 0308 	orr.w	r3, r3, #8
 800071c:	b2db      	uxtb	r3, r3
 800071e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000720:	f107 0208 	add.w	r2, r7, #8
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2304      	movs	r3, #4
 800072a:	214e      	movs	r1, #78	; 0x4e
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <lcd_send_cmd+0x5c>)
 800072e:	f002 f835 	bl	800279c <HAL_I2C_Master_Transmit>
}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000025c 	.word	0x2000025c

08000740 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af02      	add	r7, sp, #8
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	f023 030f 	bic.w	r3, r3, #15
 8000750:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	011b      	lsls	r3, r3, #4
 8000756:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	f043 030d 	orr.w	r3, r3, #13
 800075e:	b2db      	uxtb	r3, r3
 8000760:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000762:	7bfb      	ldrb	r3, [r7, #15]
 8000764:	f043 0309 	orr.w	r3, r3, #9
 8000768:	b2db      	uxtb	r3, r3
 800076a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800076c:	7bbb      	ldrb	r3, [r7, #14]
 800076e:	f043 030d 	orr.w	r3, r3, #13
 8000772:	b2db      	uxtb	r3, r3
 8000774:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000776:	7bbb      	ldrb	r3, [r7, #14]
 8000778:	f043 0309 	orr.w	r3, r3, #9
 800077c:	b2db      	uxtb	r3, r3
 800077e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000780:	f107 0208 	add.w	r2, r7, #8
 8000784:	2364      	movs	r3, #100	; 0x64
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2304      	movs	r3, #4
 800078a:	214e      	movs	r1, #78	; 0x4e
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <lcd_send_data+0x5c>)
 800078e:	f002 f805 	bl	800279c <HAL_I2C_Master_Transmit>
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000025c 	.word	0x2000025c

080007a0 <lcd_init>:

void lcd_init (void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 80007a4:	2033      	movs	r0, #51	; 0x33
 80007a6:	f7ff ff9b 	bl	80006e0 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80007aa:	2032      	movs	r0, #50	; 0x32
 80007ac:	f7ff ff98 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(50);
 80007b0:	2032      	movs	r0, #50	; 0x32
 80007b2:	f000 ff87 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80007b6:	2028      	movs	r0, #40	; 0x28
 80007b8:	f7ff ff92 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(50);
 80007bc:	2032      	movs	r0, #50	; 0x32
 80007be:	f000 ff81 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80007c2:	2001      	movs	r0, #1
 80007c4:	f7ff ff8c 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(50);
 80007c8:	2032      	movs	r0, #50	; 0x32
 80007ca:	f000 ff7b 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80007ce:	2006      	movs	r0, #6
 80007d0:	f7ff ff86 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(50);
 80007d4:	2032      	movs	r0, #50	; 0x32
 80007d6:	f000 ff75 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 80007da:	200c      	movs	r0, #12
 80007dc:	f7ff ff80 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(50);
 80007e0:	2032      	movs	r0, #50	; 0x32
 80007e2:	f000 ff6f 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80007e6:	2002      	movs	r0, #2
 80007e8:	f7ff ff7a 	bl	80006e0 <lcd_send_cmd>
	HAL_Delay(50);
 80007ec:	2032      	movs	r0, #50	; 0x32
 80007ee:	f000 ff69 	bl	80016c4 <HAL_Delay>
	lcd_send_cmd (0x80);
 80007f2:	2080      	movs	r0, #128	; 0x80
 80007f4:	f7ff ff74 	bl	80006e0 <lcd_send_cmd>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <lcd_send_string>:

void lcd_send_string (char *str)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000804:	e006      	b.n	8000814 <lcd_send_string+0x18>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff96 	bl	8000740 <lcd_send_data>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1f4      	bne.n	8000806 <lcd_send_string+0xa>
}
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b084      	sub	sp, #16
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d108      	bne.n	8000848 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	b2da      	uxtb	r2, r3
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4413      	add	r3, r2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	337f      	adds	r3, #127	; 0x7f
 8000844:	73fb      	strb	r3, [r7, #15]
 8000846:	e008      	b.n	800085a <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	3340      	adds	r3, #64	; 0x40
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b25b      	sxtb	r3, r3
 8000852:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000856:	b25b      	sxtb	r3, r3
 8000858:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff3f 	bl	80006e0 <lcd_send_cmd>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800086c:	b5b0      	push	{r4, r5, r7, lr}
 800086e:	b0ac      	sub	sp, #176	; 0xb0
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f000 fef5 	bl	8001660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000876:	f000 f8b7 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087a:	f000 fa43 	bl	8000d04 <MX_GPIO_Init>
  MX_I2C1_Init();
 800087e:	f000 f949 	bl	8000b14 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000882:	f000 f909 	bl	8000a98 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000886:	f000 f973 	bl	8000b70 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800088a:	f000 f9e7 	bl	8000c5c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800088e:	f000 fa0f 	bl	8000cb0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000892:	2108      	movs	r1, #8
 8000894:	4845      	ldr	r0, [pc, #276]	; (80009ac <main+0x140>)
 8000896:	f003 f97f 	bl	8003b98 <HAL_TIM_PWM_Start>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of queue_temperature */
  osMessageQDef(queue_temperature, 10, uint32_t);
 800089a:	4b45      	ldr	r3, [pc, #276]	; (80009b0 <main+0x144>)
 800089c:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80008a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queue_temperatureHandle = osMessageCreate(osMessageQ(queue_temperature), NULL);
 80008a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 fa3e 	bl	8004d2e <osMessageCreate>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a3f      	ldr	r2, [pc, #252]	; (80009b4 <main+0x148>)
 80008b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of queue_humidity */
  osMessageQDef(queue_humidity, 10, uint32_t);
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <main+0x144>)
 80008ba:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80008be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queue_humidityHandle = osMessageCreate(osMessageQ(queue_humidity), NULL);
 80008c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f004 fa2f 	bl	8004d2e <osMessageCreate>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a39      	ldr	r2, [pc, #228]	; (80009b8 <main+0x14c>)
 80008d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of queue_sound */
  osMessageQDef(queue_sound, 1, uint32_t);
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <main+0x150>)
 80008d8:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80008dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queue_soundHandle = osMessageCreate(osMessageQ(queue_sound), NULL);
 80008e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f004 fa20 	bl	8004d2e <osMessageCreate>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a33      	ldr	r2, [pc, #204]	; (80009c0 <main+0x154>)
 80008f2:	6013      	str	r3, [r2, #0]

  /* definition and creation of queue_servo */
  osMessageQDef(queue_servo, 10, uint32_t);
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <main+0x144>)
 80008f6:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80008fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  queue_servoHandle = osMessageCreate(osMessageQ(queue_servo), NULL);
 8000900:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f004 fa11 	bl	8004d2e <osMessageCreate>
 800090c:	4603      	mov	r3, r0
 800090e:	4a2d      	ldr	r2, [pc, #180]	; (80009c4 <main+0x158>)
 8000910:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LCD */
  osThreadDef(LCD, LCD_Task, osPriorityBelowNormal, 0, 128);
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <main+0x15c>)
 8000914:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000918:	461d      	mov	r5, r3
 800091a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800091c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCDHandle = osThreadCreate(osThread(LCD), NULL);
 8000926:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f004 f99e 	bl	8004c6e <osThreadCreate>
 8000932:	4603      	mov	r3, r0
 8000934:	4a25      	ldr	r2, [pc, #148]	; (80009cc <main+0x160>)
 8000936:	6013      	str	r3, [r2, #0]

  /* definition and creation of DHT */
  osThreadDef(DHT, DHT_Task, osPriorityNormal, 0, 128);
 8000938:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <main+0x164>)
 800093a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800093e:	461d      	mov	r5, r3
 8000940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000948:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DHTHandle = osThreadCreate(osThread(DHT), NULL);
 800094c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f004 f98b 	bl	8004c6e <osThreadCreate>
 8000958:	4603      	mov	r3, r0
 800095a:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <main+0x168>)
 800095c:	6013      	str	r3, [r2, #0]

  /* definition and creation of ServoMP3 */
  osThreadDef(ServoMP3, ServoMP3_Task, osPriorityBelowNormal, 0, 64);
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <main+0x16c>)
 8000960:	f107 041c 	add.w	r4, r7, #28
 8000964:	461d      	mov	r5, r3
 8000966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800096e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ServoMP3Handle = osThreadCreate(osThread(ServoMP3), NULL);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f004 f978 	bl	8004c6e <osThreadCreate>
 800097e:	4603      	mov	r3, r0
 8000980:	4a16      	ldr	r2, [pc, #88]	; (80009dc <main+0x170>)
 8000982:	6013      	str	r3, [r2, #0]

  /* definition and creation of Sound */
  osThreadDef(Sound, Sound_Task, osPriorityNormal, 0, 64);
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <main+0x174>)
 8000986:	463c      	mov	r4, r7
 8000988:	461d      	mov	r5, r3
 800098a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800098c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800098e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000992:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SoundHandle = osThreadCreate(osThread(Sound), NULL);
 8000996:	463b      	mov	r3, r7
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f004 f967 	bl	8004c6e <osThreadCreate>
 80009a0:	4603      	mov	r3, r0
 80009a2:	4a10      	ldr	r2, [pc, #64]	; (80009e4 <main+0x178>)
 80009a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009a6:	f004 f95b 	bl	8004c60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <main+0x13e>
 80009ac:	200002b0 	.word	0x200002b0
 80009b0:	08007a84 	.word	0x08007a84
 80009b4:	20000398 	.word	0x20000398
 80009b8:	2000039c 	.word	0x2000039c
 80009bc:	08007a94 	.word	0x08007a94
 80009c0:	200003a0 	.word	0x200003a0
 80009c4:	200003a4 	.word	0x200003a4
 80009c8:	08007aa8 	.word	0x08007aa8
 80009cc:	20000388 	.word	0x20000388
 80009d0:	08007ac8 	.word	0x08007ac8
 80009d4:	2000038c 	.word	0x2000038c
 80009d8:	08007af0 	.word	0x08007af0
 80009dc:	20000390 	.word	0x20000390
 80009e0:	08007b14 	.word	0x08007b14
 80009e4:	20000394 	.word	0x20000394

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b094      	sub	sp, #80	; 0x50
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f2:	2228      	movs	r2, #40	; 0x28
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f006 fb50 	bl	800709c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2310      	movs	r3, #16
 8000a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	2302      	movs	r3, #2
 8000a26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a2c:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000a30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 fa08 	bl	8002e4c <HAL_RCC_OscConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000a42:	f000 fb8d 	bl	8001160 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a46:	230f      	movs	r3, #15
 8000a48:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a56:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2101      	movs	r1, #1
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 fc74 	bl	8003350 <HAL_RCC_ClockConfig>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a6e:	f000 fb77 	bl	8001160 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a72:	2302      	movs	r3, #2
 8000a74:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000a76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a7a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f002 fe24 	bl	80036cc <HAL_RCCEx_PeriphCLKConfig>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a8a:	f000 fb69 	bl	8001160 <Error_Handler>
  }
}
 8000a8e:	bf00      	nop
 8000a90:	3750      	adds	r7, #80	; 0x50
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <MX_ADC1_Init+0x74>)
 8000aaa:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <MX_ADC1_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aae:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_ADC1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <MX_ADC1_Init+0x74>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_ADC1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_ADC1_Init+0x74>)
 8000ac2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ac6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac8:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_ADC1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_ADC1_Init+0x74>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ad4:	480d      	ldr	r0, [pc, #52]	; (8000b0c <MX_ADC1_Init+0x74>)
 8000ad6:	f000 fe19 	bl	800170c <HAL_ADC_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ae0:	f000 fb3e 	bl	8001160 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_ADC1_Init+0x74>)
 8000af6:	f001 f8cd 	bl	8001c94 <HAL_ADC_ConfigChannel>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b00:	f000 fb2e 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	2000022c 	.word	0x2000022c
 8000b10:	40012400 	.word	0x40012400

08000b14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b1a:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <MX_I2C1_Init+0x54>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b20:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <MX_I2C1_Init+0x58>)
 8000b22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_I2C1_Init+0x50>)
 8000b52:	f001 fcdf 	bl	8002514 <HAL_I2C_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b5c:	f000 fb00 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000025c 	.word	0x2000025c
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	000186a0 	.word	0x000186a0

08000b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08e      	sub	sp, #56	; 0x38
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8e:	1d3b      	adds	r3, r7, #4
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
 8000b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000ba2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 959;
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000baa:	f240 32bf 	movw	r2, #959	; 0x3bf
 8000bae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bca:	4823      	ldr	r0, [pc, #140]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bcc:	f002 feea 	bl	80039a4 <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bd6:	f000 fac3 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be4:	4619      	mov	r1, r3
 8000be6:	481c      	ldr	r0, [pc, #112]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000be8:	f003 fa42 	bl	8004070 <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000bf2:	f000 fab5 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bf6:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000bf8:	f002 ff76 	bl	8003ae8 <HAL_TIM_PWM_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c02:	f000 faad 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c0e:	f107 0320 	add.w	r3, r7, #32
 8000c12:	4619      	mov	r1, r3
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000c16:	f003 fdbb 	bl	8004790 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c20:	f000 fa9e 	bl	8001160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c24:	2360      	movs	r3, #96	; 0x60
 8000c26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2208      	movs	r2, #8
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000c3c:	f003 f956 	bl	8003eec <HAL_TIM_PWM_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c46:	f000 fa8b 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c4a:	4803      	ldr	r0, [pc, #12]	; (8000c58 <MX_TIM2_Init+0xe8>)
 8000c4c:	f000 fb5c 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000c50:	bf00      	nop
 8000c52:	3738      	adds	r7, #56	; 0x38
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200002b0 	.word	0x200002b0

08000c5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_USART1_UART_Init+0x4c>)
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <MX_USART1_UART_Init+0x50>)
 8000c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c66:	4b10      	ldr	r3, [pc, #64]	; (8000ca8 <MX_USART1_UART_Init+0x4c>)
 8000c68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_USART1_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_USART1_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <MX_USART1_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c80:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_USART1_UART_Init+0x4c>)
 8000c82:	220c      	movs	r2, #12
 8000c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c86:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <MX_USART1_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_USART1_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <MX_USART1_UART_Init+0x4c>)
 8000c94:	f003 fdec 	bl	8004870 <HAL_UART_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c9e:	f000 fa5f 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200002f8 	.word	0x200002f8
 8000cac:	40013800 	.word	0x40013800

08000cb0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <MX_USART3_UART_Init+0x50>)
 8000cb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cd6:	220c      	movs	r2, #12
 8000cd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ce6:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_USART3_UART_Init+0x4c>)
 8000ce8:	f003 fdc2 	bl	8004870 <HAL_UART_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cf2:	f000 fa35 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000340 	.word	0x20000340
 8000d00:	40004800 	.word	0x40004800

08000d04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	4b2d      	ldr	r3, [pc, #180]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a2c      	ldr	r2, [pc, #176]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b2a      	ldr	r3, [pc, #168]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0310 	and.w	r3, r3, #16
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d30:	4b27      	ldr	r3, [pc, #156]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d36:	f043 0320 	orr.w	r3, r3, #32
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b24      	ldr	r3, [pc, #144]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0320 	and.w	r3, r3, #32
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a20      	ldr	r2, [pc, #128]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d62:	699b      	ldr	r3, [r3, #24]
 8000d64:	4a1a      	ldr	r2, [pc, #104]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_GPIO_Init+0xcc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f003 0308 	and.w	r3, r3, #8
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7e:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000d80:	f001 fb97 	bl	80024b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DHT11_Pin|MP3_Pin, GPIO_PIN_SET);
 8000d84:	2201      	movs	r2, #1
 8000d86:	210a      	movs	r1, #10
 8000d88:	4813      	ldr	r0, [pc, #76]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000d8a:	f001 fb92 	bl	80024b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	4619      	mov	r1, r3
 8000da6:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <MX_GPIO_Init+0xd0>)
 8000da8:	f001 f9e8 	bl	800217c <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_Pin MP3_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|MP3_Pin;
 8000dac:	230a      	movs	r3, #10
 8000dae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2302      	movs	r3, #2
 8000dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_GPIO_Init+0xd4>)
 8000dc4:	f001 f9da 	bl	800217c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc8:	bf00      	nop
 8000dca:	3720      	adds	r7, #32
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40010800 	.word	0x40010800

08000ddc <LCD_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_LCD_Task */
void LCD_Task(void const * argument)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b096      	sub	sp, #88	; 0x58
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6178      	str	r0, [r7, #20]

	osEvent evt;

	uint32_t temperature, humidity,sound;

	lcd_init();
 8000de4:	f7ff fcdc 	bl	80007a0 <lcd_init>
	lcd_send_cmd(0x40);
 8000de8:	2040      	movs	r0, #64	; 0x40
 8000dea:	f7ff fc79 	bl	80006e0 <lcd_send_cmd>
	for (int i=0;i<8;i++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
 8000df2:	e009      	b.n	8000e08 <LCD_Task+0x2c>
	{
		lcd_send_data(cc1[i]);
 8000df4:	4a57      	ldr	r2, [pc, #348]	; (8000f54 <LCD_Task+0x178>)
 8000df6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000df8:	4413      	add	r3, r2
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fc9f 	bl	8000740 <lcd_send_data>
	for (int i=0;i<8;i++)
 8000e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e04:	3301      	adds	r3, #1
 8000e06:	657b      	str	r3, [r7, #84]	; 0x54
 8000e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	ddf2      	ble.n	8000df4 <LCD_Task+0x18>
	}

	lcd_goto_XY(1,0);
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2001      	movs	r0, #1
 8000e12:	f7ff fd08 	bl	8000826 <lcd_goto_XY>
	lcd_send_string("DA:  %RH");
 8000e16:	4850      	ldr	r0, [pc, #320]	; (8000f58 <LCD_Task+0x17c>)
 8000e18:	f7ff fcf0 	bl	80007fc <lcd_send_string>

	lcd_goto_XY(2,0);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f7ff fd01 	bl	8000826 <lcd_goto_XY>
	lcd_send_string("T:    C");
 8000e24:	484d      	ldr	r0, [pc, #308]	; (8000f5c <LCD_Task+0x180>)
 8000e26:	f7ff fce9 	bl	80007fc <lcd_send_string>

	lcd_goto_XY(2,5);
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	2002      	movs	r0, #2
 8000e2e:	f7ff fcfa 	bl	8000826 <lcd_goto_XY>
	lcd_send_data(0);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff fc84 	bl	8000740 <lcd_send_data>

	lcd_goto_XY(1,9);
 8000e38:	2109      	movs	r1, #9
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff fcf3 	bl	8000826 <lcd_goto_XY>
	lcd_send_string("AT:");
 8000e40:	4847      	ldr	r0, [pc, #284]	; (8000f60 <LCD_Task+0x184>)
 8000e42:	f7ff fcdb 	bl	80007fc <lcd_send_string>

	osDelay(10);
 8000e46:	200a      	movs	r0, #10
 8000e48:	f003 ff5d 	bl	8004d06 <osDelay>
  /* Infinite loop */
  for(;;)
  {
	  	  evt = osMessageGet(queue_temperatureHandle, 100);
 8000e4c:	4b45      	ldr	r3, [pc, #276]	; (8000f64 <LCD_Task+0x188>)
 8000e4e:	6819      	ldr	r1, [r3, #0]
 8000e50:	f107 0318 	add.w	r3, r7, #24
 8000e54:	2264      	movs	r2, #100	; 0x64
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 ffd2 	bl	8004e00 <osMessageGet>

		  if(evt.status == osEventMessage)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	2b10      	cmp	r3, #16
 8000e60:	d108      	bne.n	8000e74 <LCD_Task+0x98>
		  {
			  temperature = evt.value.v;
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	653b      	str	r3, [r7, #80]	; 0x50
			  sprintf(tempVal, "%ld", temperature);
 8000e66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000e6c:	493e      	ldr	r1, [pc, #248]	; (8000f68 <LCD_Task+0x18c>)
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f006 f8f4 	bl	800705c <siprintf>
			  //HAL_UART_Transmit(&huart3, (uint8_t *)tempVal, sizeof(tempVal), 1000);
		  }
		  evt = osMessageGet(queue_humidityHandle, 100);
 8000e74:	4b3d      	ldr	r3, [pc, #244]	; (8000f6c <LCD_Task+0x190>)
 8000e76:	6819      	ldr	r1, [r3, #0]
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2264      	movs	r2, #100	; 0x64
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f003 ffbf 	bl	8004e00 <osMessageGet>
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	463a      	mov	r2, r7
 8000e88:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  if(evt.status == osEventMessage)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2b10      	cmp	r3, #16
 8000e92:	d108      	bne.n	8000ea6 <LCD_Task+0xca>
		  {
			  humidity = evt.value.v;
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	64fb      	str	r3, [r7, #76]	; 0x4c
			  sprintf(humiVal, "%ld", humidity);
 8000e98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e9e:	4932      	ldr	r1, [pc, #200]	; (8000f68 <LCD_Task+0x18c>)
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 f8db 	bl	800705c <siprintf>
			 // HAL_UART_Transmit(&huart3, (uint8_t *)humiVal, sizeof(tempVal), 1000);
		  }
		  evt = osMessageGet(queue_soundHandle, 100);
 8000ea6:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <LCD_Task+0x194>)
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2264      	movs	r2, #100	; 0x64
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f003 ffa6 	bl	8004e00 <osMessageGet>
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	463a      	mov	r2, r7
 8000eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ebc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  if(evt.status == osEventMessage)
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b10      	cmp	r3, #16
 8000ec4:	d108      	bne.n	8000ed8 <LCD_Task+0xfc>
		  {
			  sound = evt.value.v;
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	64bb      	str	r3, [r7, #72]	; 0x48
			  sprintf(souVal, "%ld", sound);
 8000eca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ece:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ed0:	4925      	ldr	r1, [pc, #148]	; (8000f68 <LCD_Task+0x18c>)
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f006 f8c2 	bl	800705c <siprintf>

		  }



		  esp[0] = tempVal[0];
 8000ed8:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <LCD_Task+0x198>)
 8000ede:	701a      	strb	r2, [r3, #0]
		  esp[1] = tempVal[1];
 8000ee0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <LCD_Task+0x198>)
 8000ee6:	705a      	strb	r2, [r3, #1]
		  esp[2] = ',';
 8000ee8:	4b22      	ldr	r3, [pc, #136]	; (8000f74 <LCD_Task+0x198>)
 8000eea:	222c      	movs	r2, #44	; 0x2c
 8000eec:	709a      	strb	r2, [r3, #2]
		  esp[3] = humiVal[0];
 8000eee:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <LCD_Task+0x198>)
 8000ef4:	70da      	strb	r2, [r3, #3]
		  esp[4] = humiVal[1];
 8000ef6:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <LCD_Task+0x198>)
 8000efc:	711a      	strb	r2, [r3, #4]
		  esp[5] = '\n';
 8000efe:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <LCD_Task+0x198>)
 8000f00:	220a      	movs	r2, #10
 8000f02:	715a      	strb	r2, [r3, #5]
		  HAL_UART_Transmit(&huart3, esp, sizeof(esp), 1000);
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	2206      	movs	r2, #6
 8000f0a:	491a      	ldr	r1, [pc, #104]	; (8000f74 <LCD_Task+0x198>)
 8000f0c:	481a      	ldr	r0, [pc, #104]	; (8000f78 <LCD_Task+0x19c>)
 8000f0e:	f003 fcff 	bl	8004910 <HAL_UART_Transmit>
		  lcd_goto_XY(2,3);
 8000f12:	2103      	movs	r1, #3
 8000f14:	2002      	movs	r0, #2
 8000f16:	f7ff fc86 	bl	8000826 <lcd_goto_XY>
		  lcd_send_string(tempVal);
 8000f1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fc6c 	bl	80007fc <lcd_send_string>
		  lcd_goto_XY(1,3);
 8000f24:	2103      	movs	r1, #3
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff fc7d 	bl	8000826 <lcd_goto_XY>
		  lcd_send_string(humiVal);
 8000f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fc63 	bl	80007fc <lcd_send_string>
		  lcd_goto_XY(1,12);
 8000f36:	210c      	movs	r1, #12
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff fc74 	bl	8000826 <lcd_goto_XY>
		  lcd_send_string(souVal);
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fc5a 	bl	80007fc <lcd_send_string>



		  osDelay(1000);
 8000f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4c:	f003 fedb 	bl	8004d06 <osDelay>
	  	  evt = osMessageGet(queue_temperatureHandle, 100);
 8000f50:	e77c      	b.n	8000e4c <LCD_Task+0x70>
 8000f52:	bf00      	nop
 8000f54:	20000000 	.word	0x20000000
 8000f58:	08007b30 	.word	0x08007b30
 8000f5c:	08007b3c 	.word	0x08007b3c
 8000f60:	08007b44 	.word	0x08007b44
 8000f64:	20000398 	.word	0x20000398
 8000f68:	08007b48 	.word	0x08007b48
 8000f6c:	2000039c 	.word	0x2000039c
 8000f70:	200003a0 	.word	0x200003a0
 8000f74:	200003b0 	.word	0x200003b0
 8000f78:	20000340 	.word	0x20000340

08000f7c <DHT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DHT_Task */
void DHT_Task(void const * argument)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	uint32_t Temperature;
	uint32_t Humidity;
  /* Infinite loop */
  for(;;)
  {
	  DHT_GetData(&DHT11_Data);
 8000f84:	4811      	ldr	r0, [pc, #68]	; (8000fcc <DHT_Task+0x50>)
 8000f86:	f7ff fb37 	bl	80005f8 <DHT_GetData>
	  Temperature = DHT11_Data.Temperature;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <DHT_Task+0x50>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff f9ec 	bl	800036c <__aeabi_f2uiz>
 8000f94:	4603      	mov	r3, r0
 8000f96:	60fb      	str	r3, [r7, #12]
	  Humidity = DHT11_Data.Humidity;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <DHT_Task+0x50>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f9e5 	bl	800036c <__aeabi_f2uiz>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60bb      	str	r3, [r7, #8]
	  osMessagePut(queue_temperatureHandle, Temperature, 100);
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <DHT_Task+0x54>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2264      	movs	r2, #100	; 0x64
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fee6 	bl	8004d80 <osMessagePut>
	  osMessagePut(queue_humidityHandle, Humidity, 100);
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <DHT_Task+0x58>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2264      	movs	r2, #100	; 0x64
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 fedf 	bl	8004d80 <osMessagePut>




	  osDelay(1000);
 8000fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc6:	f003 fe9e 	bl	8004d06 <osDelay>
	  DHT_GetData(&DHT11_Data);
 8000fca:	e7db      	b.n	8000f84 <DHT_Task+0x8>
 8000fcc:	200003a8 	.word	0x200003a8
 8000fd0:	20000398 	.word	0x20000398
 8000fd4:	2000039c 	.word	0x2000039c

08000fd8 <ServoMP3_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ServoMP3_Task */
void ServoMP3_Task(void const * argument)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ServoMP3_Task */
	uint32_t SoundMP3;
	uint8_t sendBuffer[10] = {0x7E, 0xFF, 0x06, 0x0E, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xEF};
 8000fe0:	4a39      	ldr	r2, [pc, #228]	; (80010c8 <ServoMP3_Task+0xf0>)
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe8:	c303      	stmia	r3!, {r0, r1}
 8000fea:	801a      	strh	r2, [r3, #0]
	osEvent evt;
  /* Infinite loop */
	for(;;)
	{
		  uint16_t checksum = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		  evt = osMessageGet(queue_servoHandle, osWaitForever);
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <ServoMP3_Task+0xf4>)
 8000ff2:	6819      	ldr	r1, [r3, #0]
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f003 feff 	bl	8004e00 <osMessageGet>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001002:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001006:	4832      	ldr	r0, [pc, #200]	; (80010d0 <ServoMP3_Task+0xf8>)
 8001008:	f001 fa6b 	bl	80024e2 <HAL_GPIO_TogglePin>
		  if(evt.status == osEventMessage)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2b10      	cmp	r3, #16
 8001010:	d154      	bne.n	80010bc <ServoMP3_Task+0xe4>
		  {
			  SoundMP3 = evt.value.v;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	623b      	str	r3, [r7, #32]
			  if(SoundMP3 > 300)
 8001016:	6a3b      	ldr	r3, [r7, #32]
 8001018:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800101c:	d94e      	bls.n	80010bc <ServoMP3_Task+0xe4>
			  {
				   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2108      	movs	r1, #8
 8001022:	482c      	ldr	r0, [pc, #176]	; (80010d4 <ServoMP3_Task+0xfc>)
 8001024:	f001 fa45 	bl	80024b2 <HAL_GPIO_WritePin>
				   HAL_Delay(50);
 8001028:	2032      	movs	r0, #50	; 0x32
 800102a:	f000 fb4b 	bl	80016c4 <HAL_Delay>
				   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	2108      	movs	r1, #8
 8001032:	4828      	ldr	r0, [pc, #160]	; (80010d4 <ServoMP3_Task+0xfc>)
 8001034:	f001 fa3d 	bl	80024b2 <HAL_GPIO_WritePin>

				   for(int i = 0;i<8;i++)
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
 800103c:	e012      	b.n	8001064 <ServoMP3_Task+0x8c>
				   {
					   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,120);
 800103e:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <ServoMP3_Task+0x100>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2278      	movs	r2, #120	; 0x78
 8001044:	63da      	str	r2, [r3, #60]	; 0x3c
					   HAL_Delay(1000);
 8001046:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800104a:	f000 fb3b 	bl	80016c4 <HAL_Delay>
					   __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,30);
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <ServoMP3_Task+0x100>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	221e      	movs	r2, #30
 8001054:	63da      	str	r2, [r3, #60]	; 0x3c
					   HAL_Delay(1000);
 8001056:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800105a:	f000 fb33 	bl	80016c4 <HAL_Delay>
				   for(int i = 0;i<8;i++)
 800105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001060:	3301      	adds	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001066:	2b07      	cmp	r3, #7
 8001068:	dde9      	ble.n	800103e <ServoMP3_Task+0x66>
				   }


				   for (int i = 1; i < 7; i++)
 800106a:	2301      	movs	r3, #1
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
 800106e:	e00b      	b.n	8001088 <ServoMP3_Task+0xb0>
				   {
					 checksum += sendBuffer[i];
 8001070:	f107 0214 	add.w	r2, r7, #20
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b29a      	uxth	r2, r3
 800107c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800107e:	4413      	add	r3, r2
 8001080:	85fb      	strh	r3, [r7, #46]	; 0x2e
				   for (int i = 1; i < 7; i++)
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	3301      	adds	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	2b06      	cmp	r3, #6
 800108c:	ddf0      	ble.n	8001070 <ServoMP3_Task+0x98>
				   }
				   checksum = -checksum;
 800108e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001090:	425b      	negs	r3, r3
 8001092:	85fb      	strh	r3, [r7, #46]	; 0x2e

				   // Thêm checksum vào buffer
				   sendBuffer[7] = (uint8_t)(checksum >> 8);
 8001094:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	b29b      	uxth	r3, r3
 800109a:	b2db      	uxtb	r3, r3
 800109c:	76fb      	strb	r3, [r7, #27]
				   sendBuffer[8] = (uint8_t)(checksum & 0xFF);
 800109e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	773b      	strb	r3, [r7, #28]
				   HAL_UART_Transmit(&huart1, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 80010a4:	f107 0114 	add.w	r1, r7, #20
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ac:	220a      	movs	r2, #10
 80010ae:	480b      	ldr	r0, [pc, #44]	; (80010dc <ServoMP3_Task+0x104>)
 80010b0:	f003 fc2e 	bl	8004910 <HAL_UART_Transmit>
				   HAL_Delay(5000);
 80010b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80010b8:	f000 fb04 	bl	80016c4 <HAL_Delay>

		  }



		osDelay(1000);
 80010bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c0:	f003 fe21 	bl	8004d06 <osDelay>
	{
 80010c4:	e792      	b.n	8000fec <ServoMP3_Task+0x14>
 80010c6:	bf00      	nop
 80010c8:	08007b4c 	.word	0x08007b4c
 80010cc:	200003a4 	.word	0x200003a4
 80010d0:	40011000 	.word	0x40011000
 80010d4:	40010800 	.word	0x40010800
 80010d8:	200002b0 	.word	0x200002b0
 80010dc:	200002f8 	.word	0x200002f8

080010e0 <Sound_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sound_Task */
void Sound_Task(void const * argument)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	uint32_t amthanh;

  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 80010e8:	4811      	ldr	r0, [pc, #68]	; (8001130 <Sound_Task+0x50>)
 80010ea:	f000 fbe7 	bl	80018bc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80010ee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010f2:	480f      	ldr	r0, [pc, #60]	; (8001130 <Sound_Task+0x50>)
 80010f4:	f000 fcbc 	bl	8001a70 <HAL_ADC_PollForConversion>
	  amthanh = HAL_ADC_GetValue(&hadc1);
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <Sound_Task+0x50>)
 80010fa:	f000 fdbf 	bl	8001c7c <HAL_ADC_GetValue>
 80010fe:	60f8      	str	r0, [r7, #12]
	  HAL_ADC_Stop(&hadc1);
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <Sound_Task+0x50>)
 8001102:	f000 fc89 	bl	8001a18 <HAL_ADC_Stop>

//

	  osMessagePut(queue_servoHandle, amthanh, osWaitForever);
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <Sound_Task+0x54>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f04f 32ff 	mov.w	r2, #4294967295
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	4618      	mov	r0, r3
 8001112:	f003 fe35 	bl	8004d80 <osMessagePut>


	  osMessagePut(queue_soundHandle, amthanh, 100);
 8001116:	4b08      	ldr	r3, [pc, #32]	; (8001138 <Sound_Task+0x58>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2264      	movs	r2, #100	; 0x64
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fe2e 	bl	8004d80 <osMessagePut>
      osDelay(1000);
 8001124:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001128:	f003 fded 	bl	8004d06 <osDelay>
	  HAL_ADC_Start(&hadc1);
 800112c:	e7dc      	b.n	80010e8 <Sound_Task+0x8>
 800112e:	bf00      	nop
 8001130:	2000022c 	.word	0x2000022c
 8001134:	200003a4 	.word	0x200003a4
 8001138:	200003a0 	.word	0x200003a0

0800113c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800114e:	f000 fa9d 	bl	800168c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40012c00 	.word	0x40012c00

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
}
 8001166:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001168:	e7fe      	b.n	8001168 <Error_Handler+0x8>
	...

0800116c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_MspInit+0x68>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_MspInit+0x68>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6193      	str	r3, [r2, #24]
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_MspInit+0x68>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60bb      	str	r3, [r7, #8]
 8001188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_MspInit+0x68>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <HAL_MspInit+0x68>)
 8001190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_MspInit+0x68>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	210f      	movs	r1, #15
 80011a6:	f06f 0001 	mvn.w	r0, #1
 80011aa:	f000 ffbc 	bl	8002126 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_MspInit+0x6c>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_MspInit+0x6c>)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000

080011dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0310 	add.w	r3, r7, #16
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a14      	ldr	r2, [pc, #80]	; (8001248 <HAL_ADC_MspInit+0x6c>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d121      	bne.n	8001240 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_ADC_MspInit+0x70>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a12      	ldr	r2, [pc, #72]	; (800124c <HAL_ADC_MspInit+0x70>)
 8001202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <HAL_ADC_MspInit+0x70>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <HAL_ADC_MspInit+0x70>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a0c      	ldr	r2, [pc, #48]	; (800124c <HAL_ADC_MspInit+0x70>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_ADC_MspInit+0x70>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = SOUND_Pin;
 800122c:	2301      	movs	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001230:	2303      	movs	r3, #3
 8001232:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SOUND_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4619      	mov	r1, r3
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_ADC_MspInit+0x74>)
 800123c:	f000 ff9e 	bl	800217c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001240:	bf00      	nop
 8001242:	3720      	adds	r7, #32
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40012400 	.word	0x40012400
 800124c:	40021000 	.word	0x40021000
 8001250:	40010800 	.word	0x40010800

08001254 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a15      	ldr	r2, [pc, #84]	; (80012c4 <HAL_I2C_MspInit+0x70>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d123      	bne.n	80012bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_I2C_MspInit+0x74>)
 8001276:	699b      	ldr	r3, [r3, #24]
 8001278:	4a13      	ldr	r2, [pc, #76]	; (80012c8 <HAL_I2C_MspInit+0x74>)
 800127a:	f043 0308 	orr.w	r3, r3, #8
 800127e:	6193      	str	r3, [r2, #24]
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <HAL_I2C_MspInit+0x74>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	f003 0308 	and.w	r3, r3, #8
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128c:	23c0      	movs	r3, #192	; 0xc0
 800128e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001290:	2312      	movs	r3, #18
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	4619      	mov	r1, r3
 800129e:	480b      	ldr	r0, [pc, #44]	; (80012cc <HAL_I2C_MspInit+0x78>)
 80012a0:	f000 ff6c 	bl	800217c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a4:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <HAL_I2C_MspInit+0x74>)
 80012a6:	69db      	ldr	r3, [r3, #28]
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <HAL_I2C_MspInit+0x74>)
 80012aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012ae:	61d3      	str	r3, [r2, #28]
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_I2C_MspInit+0x74>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	3720      	adds	r7, #32
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40005400 	.word	0x40005400
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40010c00 	.word	0x40010c00

080012d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e0:	d10b      	bne.n	80012fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_TIM_Base_MspInit+0x34>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_TIM_Base_MspInit+0x34>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	61d3      	str	r3, [r2, #28]
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <HAL_TIM_Base_MspInit+0x34>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012fa:	bf00      	nop
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	40021000 	.word	0x40021000

08001308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001326:	d117      	bne.n	8001358 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_TIM_MspPostInit+0x58>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_TIM_MspPostInit+0x58>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_TIM_MspPostInit+0x58>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0304 	and.w	r3, r3, #4
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001340:	2304      	movs	r3, #4
 8001342:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2302      	movs	r3, #2
 800134a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	4619      	mov	r1, r3
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <HAL_TIM_MspPostInit+0x5c>)
 8001354:	f000 ff12 	bl	800217c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3720      	adds	r7, #32
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40021000 	.word	0x40021000
 8001364:	40010800 	.word	0x40010800

08001368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08a      	sub	sp, #40	; 0x28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	f107 0318 	add.w	r3, r7, #24
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a38      	ldr	r2, [pc, #224]	; (8001464 <HAL_UART_MspInit+0xfc>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d132      	bne.n	80013ee <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001388:	4b37      	ldr	r3, [pc, #220]	; (8001468 <HAL_UART_MspInit+0x100>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	4a36      	ldr	r2, [pc, #216]	; (8001468 <HAL_UART_MspInit+0x100>)
 800138e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001392:	6193      	str	r3, [r2, #24]
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <HAL_UART_MspInit+0x100>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a0:	4b31      	ldr	r3, [pc, #196]	; (8001468 <HAL_UART_MspInit+0x100>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	4a30      	ldr	r2, [pc, #192]	; (8001468 <HAL_UART_MspInit+0x100>)
 80013a6:	f043 0304 	orr.w	r3, r3, #4
 80013aa:	6193      	str	r3, [r2, #24]
 80013ac:	4b2e      	ldr	r3, [pc, #184]	; (8001468 <HAL_UART_MspInit+0x100>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	4619      	mov	r1, r3
 80013cc:	4827      	ldr	r0, [pc, #156]	; (800146c <HAL_UART_MspInit+0x104>)
 80013ce:	f000 fed5 	bl	800217c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0318 	add.w	r3, r7, #24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4821      	ldr	r0, [pc, #132]	; (800146c <HAL_UART_MspInit+0x104>)
 80013e8:	f000 fec8 	bl	800217c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ec:	e036      	b.n	800145c <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <HAL_UART_MspInit+0x108>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d131      	bne.n	800145c <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_UART_MspInit+0x100>)
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <HAL_UART_MspInit+0x100>)
 80013fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001402:	61d3      	str	r3, [r2, #28]
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_UART_MspInit+0x100>)
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_UART_MspInit+0x100>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <HAL_UART_MspInit+0x100>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_UART_MspInit+0x100>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001428:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001436:	f107 0318 	add.w	r3, r7, #24
 800143a:	4619      	mov	r1, r3
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <HAL_UART_MspInit+0x10c>)
 800143e:	f000 fe9d 	bl	800217c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001442:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4619      	mov	r1, r3
 8001456:	4807      	ldr	r0, [pc, #28]	; (8001474 <HAL_UART_MspInit+0x10c>)
 8001458:	f000 fe90 	bl	800217c <HAL_GPIO_Init>
}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40013800 	.word	0x40013800
 8001468:	40021000 	.word	0x40021000
 800146c:	40010800 	.word	0x40010800
 8001470:	40004800 	.word	0x40004800
 8001474:	40010c00 	.word	0x40010c00

08001478 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800148e:	4b2e      	ldr	r3, [pc, #184]	; (8001548 <HAL_InitTick+0xd0>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	4a2d      	ldr	r2, [pc, #180]	; (8001548 <HAL_InitTick+0xd0>)
 8001494:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001498:	6193      	str	r3, [r2, #24]
 800149a:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HAL_InitTick+0xd0>)
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014a6:	f107 020c 	add.w	r2, r7, #12
 80014aa:	f107 0310 	add.w	r3, r7, #16
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 f8bd 	bl	8003630 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80014b6:	f002 f8a7 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 80014ba:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014be:	4a23      	ldr	r2, [pc, #140]	; (800154c <HAL_InitTick+0xd4>)
 80014c0:	fba2 2303 	umull	r2, r3, r2, r3
 80014c4:	0c9b      	lsrs	r3, r3, #18
 80014c6:	3b01      	subs	r3, #1
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <HAL_InitTick+0xd8>)
 80014cc:	4a21      	ldr	r2, [pc, #132]	; (8001554 <HAL_InitTick+0xdc>)
 80014ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <HAL_InitTick+0xd8>)
 80014d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014d6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <HAL_InitTick+0xd8>)
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_InitTick+0xd8>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <HAL_InitTick+0xd8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_InitTick+0xd8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80014f0:	4817      	ldr	r0, [pc, #92]	; (8001550 <HAL_InitTick+0xd8>)
 80014f2:	f002 fa57 	bl	80039a4 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80014fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001500:	2b00      	cmp	r3, #0
 8001502:	d11b      	bne.n	800153c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001504:	4812      	ldr	r0, [pc, #72]	; (8001550 <HAL_InitTick+0xd8>)
 8001506:	f002 fa9d 	bl	8003a44 <HAL_TIM_Base_Start_IT>
 800150a:	4603      	mov	r3, r0
 800150c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001510:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001514:	2b00      	cmp	r3, #0
 8001516:	d111      	bne.n	800153c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001518:	2019      	movs	r0, #25
 800151a:	f000 fe20 	bl	800215e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d808      	bhi.n	8001536 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	2019      	movs	r0, #25
 800152a:	f000 fdfc 	bl	8002126 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_InitTick+0xe0>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	e002      	b.n	800153c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800153c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001540:	4618      	mov	r0, r3
 8001542:	3730      	adds	r7, #48	; 0x30
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	431bde83 	.word	0x431bde83
 8001550:	200003b8 	.word	0x200003b8
 8001554:	40012c00 	.word	0x40012c00
 8001558:	2000000c 	.word	0x2000000c

0800155c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001560:	e7fe      	b.n	8001560 <NMI_Handler+0x4>

08001562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001562:	b480      	push	{r7}
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <HardFault_Handler+0x4>

08001568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800156c:	e7fe      	b.n	800156c <MemManage_Handler+0x4>

0800156e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001572:	e7fe      	b.n	8001572 <BusFault_Handler+0x4>

08001574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <UsageFault_Handler+0x4>

0800157a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
	...

08001588 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <TIM1_UP_IRQHandler+0x10>)
 800158e:	f002 fba5 	bl	8003cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200003b8 	.word	0x200003b8

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f005 fdc4 	bl	8007158 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20005000 	.word	0x20005000
 80015fc:	00000400 	.word	0x00000400
 8001600:	20000400 	.word	0x20000400
 8001604:	200012a0 	.word	0x200012a0

08001608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001614:	f7ff fff8 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480b      	ldr	r0, [pc, #44]	; (8001648 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800161a:	490c      	ldr	r1, [pc, #48]	; (800164c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800161c:	4a0c      	ldr	r2, [pc, #48]	; (8001650 <LoopFillZerobss+0x16>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001630:	4c09      	ldr	r4, [pc, #36]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163e:	f005 fd91 	bl	8007164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001642:	f7ff f913 	bl	800086c <main>
  bx lr
 8001646:	4770      	bx	lr
  ldr r0, =_sdata
 8001648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800164c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001650:	08007bdc 	.word	0x08007bdc
  ldr r2, =_sbss
 8001654:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001658:	2000129c 	.word	0x2000129c

0800165c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_2_IRQHandler>
	...

08001660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_Init+0x28>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_Init+0x28>)
 800166a:	f043 0310 	orr.w	r3, r3, #16
 800166e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f000 fd4d 	bl	8002110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001676:	200f      	movs	r0, #15
 8001678:	f7ff fefe 	bl	8001478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800167c:	f7ff fd76 	bl	800116c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40022000 	.word	0x40022000

0800168c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <HAL_IncTick+0x1c>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <HAL_IncTick+0x20>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	4a03      	ldr	r2, [pc, #12]	; (80016ac <HAL_IncTick+0x20>)
 800169e:	6013      	str	r3, [r2, #0]
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	20000010 	.word	0x20000010
 80016ac:	20000404 	.word	0x20000404

080016b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b02      	ldr	r3, [pc, #8]	; (80016c0 <HAL_GetTick+0x10>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr
 80016c0:	20000404 	.word	0x20000404

080016c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016cc:	f7ff fff0 	bl	80016b0 <HAL_GetTick>
 80016d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016dc:	d005      	beq.n	80016ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016de:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <HAL_Delay+0x44>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ea:	bf00      	nop
 80016ec:	f7ff ffe0 	bl	80016b0 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d8f7      	bhi.n	80016ec <HAL_Delay+0x28>
  {
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000010 	.word	0x20000010

0800170c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e0be      	b.n	80018ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	2b00      	cmp	r3, #0
 800173a:	d109      	bne.n	8001750 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fd46 	bl	80011dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fbf1 	bl	8001f38 <ADC_ConversionStop_Disable>
 8001756:	4603      	mov	r3, r0
 8001758:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175e:	f003 0310 	and.w	r3, r3, #16
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 8099 	bne.w	800189a <HAL_ADC_Init+0x18e>
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f040 8095 	bne.w	800189a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001778:	f023 0302 	bic.w	r3, r3, #2
 800177c:	f043 0202 	orr.w	r2, r3, #2
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800178c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7b1b      	ldrb	r3, [r3, #12]
 8001792:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001794:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	4313      	orrs	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a4:	d003      	beq.n	80017ae <HAL_ADC_Init+0xa2>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d102      	bne.n	80017b4 <HAL_ADC_Init+0xa8>
 80017ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b2:	e000      	b.n	80017b6 <HAL_ADC_Init+0xaa>
 80017b4:	2300      	movs	r3, #0
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7d1b      	ldrb	r3, [r3, #20]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d119      	bne.n	80017f8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7b1b      	ldrb	r3, [r3, #12]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	035a      	lsls	r2, r3, #13
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	e00b      	b.n	80017f8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	f043 0220 	orr.w	r2, r3, #32
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	430a      	orrs	r2, r1
 800180a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	689a      	ldr	r2, [r3, #8]
 8001812:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <HAL_ADC_Init+0x1a8>)
 8001814:	4013      	ands	r3, r2
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	68b9      	ldr	r1, [r7, #8]
 800181c:	430b      	orrs	r3, r1
 800181e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001828:	d003      	beq.n	8001832 <HAL_ADC_Init+0x126>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d104      	bne.n	800183c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	3b01      	subs	r3, #1
 8001838:	051b      	lsls	r3, r3, #20
 800183a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	430a      	orrs	r2, r1
 800184e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689a      	ldr	r2, [r3, #8]
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_ADC_Init+0x1ac>)
 8001858:	4013      	ands	r3, r2
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	429a      	cmp	r2, r3
 800185e:	d10b      	bne.n	8001878 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	f023 0303 	bic.w	r3, r3, #3
 800186e:	f043 0201 	orr.w	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001876:	e018      	b.n	80018aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187c:	f023 0312 	bic.w	r3, r3, #18
 8001880:	f043 0210 	orr.w	r2, r3, #16
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001898:	e007      	b.n	80018aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	f043 0210 	orr.w	r2, r3, #16
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	ffe1f7fd 	.word	0xffe1f7fd
 80018b8:	ff1f0efe 	.word	0xff1f0efe

080018bc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_Start+0x1a>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e098      	b.n	8001a08 <HAL_ADC_Start+0x14c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fad0 	bl	8001e84 <ADC_Enable>
 80018e4:	4603      	mov	r3, r0
 80018e6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 8087 	bne.w	80019fe <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018f8:	f023 0301 	bic.w	r3, r3, #1
 80018fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a41      	ldr	r2, [pc, #260]	; (8001a10 <HAL_ADC_Start+0x154>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d105      	bne.n	800191a <HAL_ADC_Start+0x5e>
 800190e:	4b41      	ldr	r3, [pc, #260]	; (8001a14 <HAL_ADC_Start+0x158>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d115      	bne.n	8001946 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d026      	beq.n	8001982 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001938:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800193c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001944:	e01d      	b.n	8001982 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <HAL_ADC_Start+0x158>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d004      	beq.n	8001966 <HAL_ADC_Start+0xaa>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a2b      	ldr	r2, [pc, #172]	; (8001a10 <HAL_ADC_Start+0x154>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d10d      	bne.n	8001982 <HAL_ADC_Start+0xc6>
 8001966:	4b2b      	ldr	r3, [pc, #172]	; (8001a14 <HAL_ADC_Start+0x158>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800197a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	f023 0206 	bic.w	r2, r3, #6
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	62da      	str	r2, [r3, #44]	; 0x2c
 800199a:	e002      	b.n	80019a2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f06f 0202 	mvn.w	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019be:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019c2:	d113      	bne.n	80019ec <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <HAL_ADC_Start+0x154>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d105      	bne.n	80019da <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <HAL_ADC_Start+0x158>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d108      	bne.n	80019ec <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	e00c      	b.n	8001a06 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	e003      	b.n	8001a06 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40012800 	.word	0x40012800
 8001a14:	40012400 	.word	0x40012400

08001a18 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_ADC_Stop+0x1a>
 8001a2e:	2302      	movs	r3, #2
 8001a30:	e01a      	b.n	8001a68 <HAL_ADC_Stop+0x50>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fa7c 	bl	8001f38 <ADC_ConversionStop_Disable>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	f043 0201 	orr.w	r2, r3, #1
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a86:	f7ff fe13 	bl	80016b0 <HAL_GetTick>
 8001a8a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00b      	beq.n	8001ab2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	f043 0220 	orr.w	r2, r3, #32
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0d3      	b.n	8001c5a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d131      	bne.n	8001b24 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d12a      	bne.n	8001b24 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ace:	e021      	b.n	8001b14 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad6:	d01d      	beq.n	8001b14 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d007      	beq.n	8001aee <HAL_ADC_PollForConversion+0x7e>
 8001ade:	f7ff fde7 	bl	80016b0 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d212      	bcs.n	8001b14 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d10b      	bne.n	8001b14 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	f043 0204 	orr.w	r2, r3, #4
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0a2      	b.n	8001c5a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0d6      	beq.n	8001ad0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b22:	e070      	b.n	8001c06 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001b24:	4b4f      	ldr	r3, [pc, #316]	; (8001c64 <HAL_ADC_PollForConversion+0x1f4>)
 8001b26:	681c      	ldr	r4, [r3, #0]
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f001 fe85 	bl	8003838 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6919      	ldr	r1, [r3, #16]
 8001b3a:	4b4b      	ldr	r3, [pc, #300]	; (8001c68 <HAL_ADC_PollForConversion+0x1f8>)
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d118      	bne.n	8001b74 <HAL_ADC_PollForConversion+0x104>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	68d9      	ldr	r1, [r3, #12]
 8001b48:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <HAL_ADC_PollForConversion+0x1fc>)
 8001b4a:	400b      	ands	r3, r1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d111      	bne.n	8001b74 <HAL_ADC_PollForConversion+0x104>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6919      	ldr	r1, [r3, #16]
 8001b56:	4b46      	ldr	r3, [pc, #280]	; (8001c70 <HAL_ADC_PollForConversion+0x200>)
 8001b58:	400b      	ands	r3, r1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d108      	bne.n	8001b70 <HAL_ADC_PollForConversion+0x100>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68d9      	ldr	r1, [r3, #12]
 8001b64:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_ADC_PollForConversion+0x204>)
 8001b66:	400b      	ands	r3, r1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_ADC_PollForConversion+0x100>
 8001b6c:	2314      	movs	r3, #20
 8001b6e:	e020      	b.n	8001bb2 <HAL_ADC_PollForConversion+0x142>
 8001b70:	2329      	movs	r3, #41	; 0x29
 8001b72:	e01e      	b.n	8001bb2 <HAL_ADC_PollForConversion+0x142>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6919      	ldr	r1, [r3, #16]
 8001b7a:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <HAL_ADC_PollForConversion+0x200>)
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <HAL_ADC_PollForConversion+0x120>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68d9      	ldr	r1, [r3, #12]
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_ADC_PollForConversion+0x204>)
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00d      	beq.n	8001bac <HAL_ADC_PollForConversion+0x13c>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6919      	ldr	r1, [r3, #16]
 8001b96:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <HAL_ADC_PollForConversion+0x208>)
 8001b98:	400b      	ands	r3, r1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d108      	bne.n	8001bb0 <HAL_ADC_PollForConversion+0x140>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68d9      	ldr	r1, [r3, #12]
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <HAL_ADC_PollForConversion+0x208>)
 8001ba6:	400b      	ands	r3, r1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_PollForConversion+0x140>
 8001bac:	2354      	movs	r3, #84	; 0x54
 8001bae:	e000      	b.n	8001bb2 <HAL_ADC_PollForConversion+0x142>
 8001bb0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bb8:	e021      	b.n	8001bfe <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc0:	d01a      	beq.n	8001bf8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d007      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0x168>
 8001bc8:	f7ff fd72 	bl	80016b0 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d20f      	bcs.n	8001bf8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d90b      	bls.n	8001bf8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be4:	f043 0204 	orr.w	r2, r3, #4
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e030      	b.n	8001c5a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d8d9      	bhi.n	8001bba <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f06f 0212 	mvn.w	r2, #18
 8001c0e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001c26:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001c2a:	d115      	bne.n	8001c58 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d111      	bne.n	8001c58 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d105      	bne.n	8001c58 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c50:	f043 0201 	orr.w	r2, r3, #1
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008
 8001c68:	24924924 	.word	0x24924924
 8001c6c:	00924924 	.word	0x00924924
 8001c70:	12492492 	.word	0x12492492
 8001c74:	00492492 	.word	0x00492492
 8001c78:	00249249 	.word	0x00249249

08001c7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c94:	b480      	push	{r7}
 8001c96:	b085      	sub	sp, #20
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x20>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e0dc      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x1da>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b06      	cmp	r3, #6
 8001cc2:	d81c      	bhi.n	8001cfe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3b05      	subs	r3, #5
 8001cd6:	221f      	movs	r2, #31
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	4019      	ands	r1, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	6818      	ldr	r0, [r3, #0]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	3b05      	subs	r3, #5
 8001cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	635a      	str	r2, [r3, #52]	; 0x34
 8001cfc:	e03c      	b.n	8001d78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b0c      	cmp	r3, #12
 8001d04:	d81c      	bhi.n	8001d40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	4413      	add	r3, r2
 8001d16:	3b23      	subs	r3, #35	; 0x23
 8001d18:	221f      	movs	r2, #31
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	4019      	ands	r1, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b23      	subs	r3, #35	; 0x23
 8001d32:	fa00 f203 	lsl.w	r2, r0, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3e:	e01b      	b.n	8001d78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	3b41      	subs	r3, #65	; 0x41
 8001d52:	221f      	movs	r2, #31
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4019      	ands	r1, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	6818      	ldr	r0, [r3, #0]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	3b41      	subs	r3, #65	; 0x41
 8001d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b09      	cmp	r3, #9
 8001d7e:	d91c      	bls.n	8001dba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68d9      	ldr	r1, [r3, #12]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b1e      	subs	r3, #30
 8001d92:	2207      	movs	r2, #7
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	4019      	ands	r1, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6898      	ldr	r0, [r3, #8]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	3b1e      	subs	r3, #30
 8001dac:	fa00 f203 	lsl.w	r2, r0, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	e019      	b.n	8001dee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6919      	ldr	r1, [r3, #16]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	2207      	movs	r2, #7
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	4019      	ands	r1, r3
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	6898      	ldr	r0, [r3, #8]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	fa00 f203 	lsl.w	r2, r0, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b10      	cmp	r3, #16
 8001df4:	d003      	beq.n	8001dfe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dfa:	2b11      	cmp	r3, #17
 8001dfc:	d132      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1d      	ldr	r2, [pc, #116]	; (8001e78 <HAL_ADC_ConfigChannel+0x1e4>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d125      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d126      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d11a      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_ADC_ConfigChannel+0x1e8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <HAL_ADC_ConfigChannel+0x1ec>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	0c9a      	lsrs	r2, r3, #18
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e44:	e002      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f9      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x1b2>
 8001e52:	e007      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40012400 	.word	0x40012400
 8001e7c:	20000008 	.word	0x20000008
 8001e80:	431bde83 	.word	0x431bde83

08001e84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d040      	beq.n	8001f24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0201 	orr.w	r2, r2, #1
 8001eb0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <ADC_Enable+0xac>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1f      	ldr	r2, [pc, #124]	; (8001f34 <ADC_Enable+0xb0>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	0c9b      	lsrs	r3, r3, #18
 8001ebe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ec0:	e002      	b.n	8001ec8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f9      	bne.n	8001ec2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ece:	f7ff fbef 	bl	80016b0 <HAL_GetTick>
 8001ed2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ed4:	e01f      	b.n	8001f16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ed6:	f7ff fbeb 	bl	80016b0 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d918      	bls.n	8001f16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d011      	beq.n	8001f16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	f043 0210 	orr.w	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	f043 0201 	orr.w	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e007      	b.n	8001f26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d1d8      	bne.n	8001ed6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000008 	.word	0x20000008
 8001f34:	431bde83 	.word	0x431bde83

08001f38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d12e      	bne.n	8001fb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0201 	bic.w	r2, r2, #1
 8001f60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f62:	f7ff fba5 	bl	80016b0 <HAL_GetTick>
 8001f66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f68:	e01b      	b.n	8001fa2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f6a:	f7ff fba1 	bl	80016b0 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d914      	bls.n	8001fa2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d10d      	bne.n	8001fa2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	f043 0210 	orr.w	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	f043 0201 	orr.w	r2, r3, #1
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e007      	b.n	8001fb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d0dc      	beq.n	8001f6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	60d3      	str	r3, [r2, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <__NVIC_GetPriorityGrouping+0x18>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0307 	and.w	r3, r3, #7
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	2b00      	cmp	r3, #0
 8002030:	db0b      	blt.n	800204a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4906      	ldr	r1, [pc, #24]	; (8002054 <__NVIC_EnableIRQ+0x34>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2001      	movs	r0, #1
 8002042:	fa00 f202 	lsl.w	r2, r0, r2
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100

08002058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	6039      	str	r1, [r7, #0]
 8002062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002068:	2b00      	cmp	r3, #0
 800206a:	db0a      	blt.n	8002082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	b2da      	uxtb	r2, r3
 8002070:	490c      	ldr	r1, [pc, #48]	; (80020a4 <__NVIC_SetPriority+0x4c>)
 8002072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002076:	0112      	lsls	r2, r2, #4
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	440b      	add	r3, r1
 800207c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002080:	e00a      	b.n	8002098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4908      	ldr	r1, [pc, #32]	; (80020a8 <__NVIC_SetPriority+0x50>)
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	3b04      	subs	r3, #4
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	b2d2      	uxtb	r2, r2
 8002094:	440b      	add	r3, r1
 8002096:	761a      	strb	r2, [r3, #24]
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f1c3 0307 	rsb	r3, r3, #7
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	bf28      	it	cs
 80020ca:	2304      	movcs	r3, #4
 80020cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	3304      	adds	r3, #4
 80020d2:	2b06      	cmp	r3, #6
 80020d4:	d902      	bls.n	80020dc <NVIC_EncodePriority+0x30>
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	3b03      	subs	r3, #3
 80020da:	e000      	b.n	80020de <NVIC_EncodePriority+0x32>
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	f04f 32ff 	mov.w	r2, #4294967295
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43da      	mvns	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	401a      	ands	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa01 f303 	lsl.w	r3, r1, r3
 80020fe:	43d9      	mvns	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	4313      	orrs	r3, r2
         );
}
 8002106:	4618      	mov	r0, r3
 8002108:	3724      	adds	r7, #36	; 0x24
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff4f 	bl	8001fbc <__NVIC_SetPriorityGrouping>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002138:	f7ff ff64 	bl	8002004 <__NVIC_GetPriorityGrouping>
 800213c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	6978      	ldr	r0, [r7, #20]
 8002144:	f7ff ffb2 	bl	80020ac <NVIC_EncodePriority>
 8002148:	4602      	mov	r2, r0
 800214a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff81 	bl	8002058 <__NVIC_SetPriority>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff57 	bl	8002020 <__NVIC_EnableIRQ>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800217c:	b480      	push	{r7}
 800217e:	b08b      	sub	sp, #44	; 0x2c
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002186:	2300      	movs	r3, #0
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800218e:	e169      	b.n	8002464 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002190:	2201      	movs	r2, #1
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	f040 8158 	bne.w	800245e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4a9a      	ldr	r2, [pc, #616]	; (800241c <HAL_GPIO_Init+0x2a0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d05e      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021b8:	4a98      	ldr	r2, [pc, #608]	; (800241c <HAL_GPIO_Init+0x2a0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d875      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021be:	4a98      	ldr	r2, [pc, #608]	; (8002420 <HAL_GPIO_Init+0x2a4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d058      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021c4:	4a96      	ldr	r2, [pc, #600]	; (8002420 <HAL_GPIO_Init+0x2a4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d86f      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021ca:	4a96      	ldr	r2, [pc, #600]	; (8002424 <HAL_GPIO_Init+0x2a8>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d052      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021d0:	4a94      	ldr	r2, [pc, #592]	; (8002424 <HAL_GPIO_Init+0x2a8>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d869      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021d6:	4a94      	ldr	r2, [pc, #592]	; (8002428 <HAL_GPIO_Init+0x2ac>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d04c      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021dc:	4a92      	ldr	r2, [pc, #584]	; (8002428 <HAL_GPIO_Init+0x2ac>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d863      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021e2:	4a92      	ldr	r2, [pc, #584]	; (800242c <HAL_GPIO_Init+0x2b0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d046      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
 80021e8:	4a90      	ldr	r2, [pc, #576]	; (800242c <HAL_GPIO_Init+0x2b0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d85d      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021ee:	2b12      	cmp	r3, #18
 80021f0:	d82a      	bhi.n	8002248 <HAL_GPIO_Init+0xcc>
 80021f2:	2b12      	cmp	r3, #18
 80021f4:	d859      	bhi.n	80022aa <HAL_GPIO_Init+0x12e>
 80021f6:	a201      	add	r2, pc, #4	; (adr r2, 80021fc <HAL_GPIO_Init+0x80>)
 80021f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fc:	08002277 	.word	0x08002277
 8002200:	08002251 	.word	0x08002251
 8002204:	08002263 	.word	0x08002263
 8002208:	080022a5 	.word	0x080022a5
 800220c:	080022ab 	.word	0x080022ab
 8002210:	080022ab 	.word	0x080022ab
 8002214:	080022ab 	.word	0x080022ab
 8002218:	080022ab 	.word	0x080022ab
 800221c:	080022ab 	.word	0x080022ab
 8002220:	080022ab 	.word	0x080022ab
 8002224:	080022ab 	.word	0x080022ab
 8002228:	080022ab 	.word	0x080022ab
 800222c:	080022ab 	.word	0x080022ab
 8002230:	080022ab 	.word	0x080022ab
 8002234:	080022ab 	.word	0x080022ab
 8002238:	080022ab 	.word	0x080022ab
 800223c:	080022ab 	.word	0x080022ab
 8002240:	08002259 	.word	0x08002259
 8002244:	0800226d 	.word	0x0800226d
 8002248:	4a79      	ldr	r2, [pc, #484]	; (8002430 <HAL_GPIO_Init+0x2b4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800224e:	e02c      	b.n	80022aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	623b      	str	r3, [r7, #32]
          break;
 8002256:	e029      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	3304      	adds	r3, #4
 800225e:	623b      	str	r3, [r7, #32]
          break;
 8002260:	e024      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	3308      	adds	r3, #8
 8002268:	623b      	str	r3, [r7, #32]
          break;
 800226a:	e01f      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	330c      	adds	r3, #12
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e01a      	b.n	80022ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d102      	bne.n	8002284 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800227e:	2304      	movs	r3, #4
 8002280:	623b      	str	r3, [r7, #32]
          break;
 8002282:	e013      	b.n	80022ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800228c:	2308      	movs	r3, #8
 800228e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	611a      	str	r2, [r3, #16]
          break;
 8002296:	e009      	b.n	80022ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002298:	2308      	movs	r3, #8
 800229a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69fa      	ldr	r2, [r7, #28]
 80022a0:	615a      	str	r2, [r3, #20]
          break;
 80022a2:	e003      	b.n	80022ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022a4:	2300      	movs	r3, #0
 80022a6:	623b      	str	r3, [r7, #32]
          break;
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x130>
          break;
 80022aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d801      	bhi.n	80022b6 <HAL_GPIO_Init+0x13a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	e001      	b.n	80022ba <HAL_GPIO_Init+0x13e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3304      	adds	r3, #4
 80022ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2bff      	cmp	r3, #255	; 0xff
 80022c0:	d802      	bhi.n	80022c8 <HAL_GPIO_Init+0x14c>
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	e002      	b.n	80022ce <HAL_GPIO_Init+0x152>
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	3b08      	subs	r3, #8
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	210f      	movs	r1, #15
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	401a      	ands	r2, r3
 80022e0:	6a39      	ldr	r1, [r7, #32]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	431a      	orrs	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80b1 	beq.w	800245e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022fc:	4b4d      	ldr	r3, [pc, #308]	; (8002434 <HAL_GPIO_Init+0x2b8>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	4a4c      	ldr	r2, [pc, #304]	; (8002434 <HAL_GPIO_Init+0x2b8>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6193      	str	r3, [r2, #24]
 8002308:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_GPIO_Init+0x2b8>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002314:	4a48      	ldr	r2, [pc, #288]	; (8002438 <HAL_GPIO_Init+0x2bc>)
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	089b      	lsrs	r3, r3, #2
 800231a:	3302      	adds	r3, #2
 800231c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002320:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	220f      	movs	r2, #15
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a40      	ldr	r2, [pc, #256]	; (800243c <HAL_GPIO_Init+0x2c0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_GPIO_Init+0x1ec>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a3f      	ldr	r2, [pc, #252]	; (8002440 <HAL_GPIO_Init+0x2c4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_GPIO_Init+0x1e8>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a3e      	ldr	r2, [pc, #248]	; (8002444 <HAL_GPIO_Init+0x2c8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <HAL_GPIO_Init+0x1e4>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a3d      	ldr	r2, [pc, #244]	; (8002448 <HAL_GPIO_Init+0x2cc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_GPIO_Init+0x1e0>
 8002358:	2303      	movs	r3, #3
 800235a:	e006      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 800235c:	2304      	movs	r3, #4
 800235e:	e004      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 8002360:	2302      	movs	r3, #2
 8002362:	e002      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_GPIO_Init+0x1ee>
 8002368:	2300      	movs	r3, #0
 800236a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236c:	f002 0203 	and.w	r2, r2, #3
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	4093      	lsls	r3, r2
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800237a:	492f      	ldr	r1, [pc, #188]	; (8002438 <HAL_GPIO_Init+0x2bc>)
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_GPIO_Init+0x2d0>)
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	492c      	ldr	r1, [pc, #176]	; (800244c <HAL_GPIO_Init+0x2d0>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023a2:	4b2a      	ldr	r3, [pc, #168]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4928      	ldr	r1, [pc, #160]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023bc:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	4922      	ldr	r1, [pc, #136]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60cb      	str	r3, [r1, #12]
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	491e      	ldr	r1, [pc, #120]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4918      	ldr	r1, [pc, #96]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023f2:	4b16      	ldr	r3, [pc, #88]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4914      	ldr	r1, [pc, #80]	; (800244c <HAL_GPIO_Init+0x2d0>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d021      	beq.n	8002450 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_GPIO_Init+0x2d0>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	490e      	ldr	r1, [pc, #56]	; (800244c <HAL_GPIO_Init+0x2d0>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
 8002418:	e021      	b.n	800245e <HAL_GPIO_Init+0x2e2>
 800241a:	bf00      	nop
 800241c:	10320000 	.word	0x10320000
 8002420:	10310000 	.word	0x10310000
 8002424:	10220000 	.word	0x10220000
 8002428:	10210000 	.word	0x10210000
 800242c:	10120000 	.word	0x10120000
 8002430:	10110000 	.word	0x10110000
 8002434:	40021000 	.word	0x40021000
 8002438:	40010000 	.word	0x40010000
 800243c:	40010800 	.word	0x40010800
 8002440:	40010c00 	.word	0x40010c00
 8002444:	40011000 	.word	0x40011000
 8002448:	40011400 	.word	0x40011400
 800244c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_GPIO_Init+0x304>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	43db      	mvns	r3, r3
 8002458:	4909      	ldr	r1, [pc, #36]	; (8002480 <HAL_GPIO_Init+0x304>)
 800245a:	4013      	ands	r3, r2
 800245c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	3301      	adds	r3, #1
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	fa22 f303 	lsr.w	r3, r2, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	f47f ae8e 	bne.w	8002190 <HAL_GPIO_Init+0x14>
  }
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	372c      	adds	r7, #44	; 0x2c
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	40010400 	.word	0x40010400

08002484 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	887b      	ldrh	r3, [r7, #2]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800249c:	2301      	movs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	e001      	b.n	80024a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024a2:	2300      	movs	r3, #0
 80024a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr

080024b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	460b      	mov	r3, r1
 80024bc:	807b      	strh	r3, [r7, #2]
 80024be:	4613      	mov	r3, r2
 80024c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c2:	787b      	ldrb	r3, [r7, #1]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c8:	887a      	ldrh	r2, [r7, #2]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024ce:	e003      	b.n	80024d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d0:	887b      	ldrh	r3, [r7, #2]
 80024d2:	041a      	lsls	r2, r3, #16
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	611a      	str	r2, [r3, #16]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b085      	sub	sp, #20
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024f4:	887a      	ldrh	r2, [r7, #2]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4013      	ands	r3, r2
 80024fa:	041a      	lsls	r2, r3, #16
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43d9      	mvns	r1, r3
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	400b      	ands	r3, r1
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	611a      	str	r2, [r3, #16]
}
 800250a:	bf00      	nop
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e12b      	b.n	800277e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fe fe8a 	bl	8001254 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002578:	f001 f832 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 800257c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4a81      	ldr	r2, [pc, #516]	; (8002788 <HAL_I2C_Init+0x274>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d807      	bhi.n	8002598 <HAL_I2C_Init+0x84>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a80      	ldr	r2, [pc, #512]	; (800278c <HAL_I2C_Init+0x278>)
 800258c:	4293      	cmp	r3, r2
 800258e:	bf94      	ite	ls
 8002590:	2301      	movls	r3, #1
 8002592:	2300      	movhi	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e006      	b.n	80025a6 <HAL_I2C_Init+0x92>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a7d      	ldr	r2, [pc, #500]	; (8002790 <HAL_I2C_Init+0x27c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	bf94      	ite	ls
 80025a0:	2301      	movls	r3, #1
 80025a2:	2300      	movhi	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0e7      	b.n	800277e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a78      	ldr	r2, [pc, #480]	; (8002794 <HAL_I2C_Init+0x280>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0c9b      	lsrs	r3, r3, #18
 80025b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a6a      	ldr	r2, [pc, #424]	; (8002788 <HAL_I2C_Init+0x274>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d802      	bhi.n	80025e8 <HAL_I2C_Init+0xd4>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	3301      	adds	r3, #1
 80025e6:	e009      	b.n	80025fc <HAL_I2C_Init+0xe8>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	4a69      	ldr	r2, [pc, #420]	; (8002798 <HAL_I2C_Init+0x284>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	3301      	adds	r3, #1
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	430b      	orrs	r3, r1
 8002602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800260e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	495c      	ldr	r1, [pc, #368]	; (8002788 <HAL_I2C_Init+0x274>)
 8002618:	428b      	cmp	r3, r1
 800261a:	d819      	bhi.n	8002650 <HAL_I2C_Init+0x13c>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e59      	subs	r1, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fbb1 f3f3 	udiv	r3, r1, r3
 800262a:	1c59      	adds	r1, r3, #1
 800262c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002630:	400b      	ands	r3, r1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_I2C_Init+0x138>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1e59      	subs	r1, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fbb1 f3f3 	udiv	r3, r1, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264a:	e051      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 800264c:	2304      	movs	r3, #4
 800264e:	e04f      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <HAL_I2C_Init+0x168>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1e58      	subs	r0, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	440b      	add	r3, r1
 8002666:	fbb0 f3f3 	udiv	r3, r0, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e012      	b.n	80026a2 <HAL_I2C_Init+0x18e>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e58      	subs	r0, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	0099      	lsls	r1, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Init+0x196>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e022      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10e      	bne.n	80026d0 <HAL_I2C_Init+0x1bc>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1e58      	subs	r0, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	440b      	add	r3, r1
 80026c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ce:	e00f      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e58      	subs	r0, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	0099      	lsls	r1, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	6809      	ldr	r1, [r1, #0]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800271e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6911      	ldr	r1, [r2, #16]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68d2      	ldr	r2, [r2, #12]
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	430b      	orrs	r3, r1
 8002732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	000186a0 	.word	0x000186a0
 800278c:	001e847f 	.word	0x001e847f
 8002790:	003d08ff 	.word	0x003d08ff
 8002794:	431bde83 	.word	0x431bde83
 8002798:	10624dd3 	.word	0x10624dd3

0800279c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	461a      	mov	r2, r3
 80027a8:	460b      	mov	r3, r1
 80027aa:	817b      	strh	r3, [r7, #10]
 80027ac:	4613      	mov	r3, r2
 80027ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b0:	f7fe ff7e 	bl	80016b0 <HAL_GetTick>
 80027b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b20      	cmp	r3, #32
 80027c0:	f040 80e0 	bne.w	8002984 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	2319      	movs	r3, #25
 80027ca:	2201      	movs	r2, #1
 80027cc:	4970      	ldr	r1, [pc, #448]	; (8002990 <HAL_I2C_Master_Transmit+0x1f4>)
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f964 	bl	8002a9c <I2C_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027da:	2302      	movs	r3, #2
 80027dc:	e0d3      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d101      	bne.n	80027ec <HAL_I2C_Master_Transmit+0x50>
 80027e8:	2302      	movs	r3, #2
 80027ea:	e0cc      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d007      	beq.n	8002812 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002820:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2221      	movs	r2, #33	; 0x21
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2210      	movs	r2, #16
 800282e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	893a      	ldrh	r2, [r7, #8]
 8002842:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a50      	ldr	r2, [pc, #320]	; (8002994 <HAL_I2C_Master_Transmit+0x1f8>)
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002854:	8979      	ldrh	r1, [r7, #10]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	6a3a      	ldr	r2, [r7, #32]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f89c 	bl	8002998 <I2C_MasterRequestWrite>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e08d      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002880:	e066      	b.n	8002950 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	6a39      	ldr	r1, [r7, #32]
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 fa22 	bl	8002cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	2b04      	cmp	r3, #4
 8002898:	d107      	bne.n	80028aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06b      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d11b      	bne.n	8002924 <HAL_I2C_Master_Transmit+0x188>
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d017      	beq.n	8002924 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290e:	b29b      	uxth	r3, r3
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	6a39      	ldr	r1, [r7, #32]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fa19 	bl	8002d60 <I2C_WaitOnBTFFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	2b04      	cmp	r3, #4
 800293a:	d107      	bne.n	800294c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e01a      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d194      	bne.n	8002882 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	e000      	b.n	8002986 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002984:	2302      	movs	r3, #2
  }
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	00100002 	.word	0x00100002
 8002994:	ffff0000 	.word	0xffff0000

08002998 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	460b      	mov	r3, r1
 80029a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d006      	beq.n	80029c2 <I2C_MasterRequestWrite+0x2a>
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d003      	beq.n	80029c2 <I2C_MasterRequestWrite+0x2a>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029c0:	d108      	bne.n	80029d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e00b      	b.n	80029ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	2b12      	cmp	r3, #18
 80029da:	d107      	bne.n	80029ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f000 f84f 	bl	8002a9c <I2C_WaitOnFlagUntilTimeout>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00d      	beq.n	8002a20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a12:	d103      	bne.n	8002a1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e035      	b.n	8002a8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a28:	d108      	bne.n	8002a3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a2a:	897b      	ldrh	r3, [r7, #10]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a38:	611a      	str	r2, [r3, #16]
 8002a3a:	e01b      	b.n	8002a74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a3c:	897b      	ldrh	r3, [r7, #10]
 8002a3e:	11db      	asrs	r3, r3, #7
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	f003 0306 	and.w	r3, r3, #6
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f063 030f 	orn	r3, r3, #15
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	490e      	ldr	r1, [pc, #56]	; (8002a94 <I2C_MasterRequestWrite+0xfc>)
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f898 	bl	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e010      	b.n	8002a8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a6a:	897b      	ldrh	r3, [r7, #10]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4907      	ldr	r1, [pc, #28]	; (8002a98 <I2C_MasterRequestWrite+0x100>)
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f888 	bl	8002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	00010008 	.word	0x00010008
 8002a98:	00010002 	.word	0x00010002

08002a9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	603b      	str	r3, [r7, #0]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002aac:	e048      	b.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d044      	beq.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab6:	f7fe fdfb 	bl	80016b0 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d139      	bne.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	0c1b      	lsrs	r3, r3, #16
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d10d      	bne.n	8002af2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	43da      	mvns	r2, r3
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	e00c      	b.n	8002b0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	43da      	mvns	r2, r3
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	4013      	ands	r3, r2
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d116      	bne.n	8002b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	f043 0220 	orr.w	r2, r3, #32
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e023      	b.n	8002b88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	0c1b      	lsrs	r3, r3, #16
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10d      	bne.n	8002b66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	43da      	mvns	r2, r3
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4013      	ands	r3, r2
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	e00c      	b.n	8002b80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4013      	ands	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf0c      	ite	eq
 8002b78:	2301      	moveq	r3, #1
 8002b7a:	2300      	movne	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	461a      	mov	r2, r3
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d093      	beq.n	8002aae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b9e:	e071      	b.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d123      	bne.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e067      	b.n	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfe:	d041      	beq.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c00:	f7fe fd56 	bl	80016b0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d302      	bcc.n	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d136      	bne.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d10c      	bne.n	8002c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	43da      	mvns	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf14      	ite	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	2300      	moveq	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	e00b      	b.n	8002c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	43da      	mvns	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	4013      	ands	r3, r2
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	bf14      	ite	ne
 8002c4c:	2301      	movne	r3, #1
 8002c4e:	2300      	moveq	r3, #0
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d016      	beq.n	8002c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e021      	b.n	8002cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	0c1b      	lsrs	r3, r3, #16
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d10c      	bne.n	8002ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	43da      	mvns	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e00b      	b.n	8002cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f47f af6d 	bne.w	8002ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cdc:	e034      	b.n	8002d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f886 	bl	8002df0 <I2C_IsAcknowledgeFailed>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e034      	b.n	8002d58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf4:	d028      	beq.n	8002d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf6:	f7fe fcdb 	bl	80016b0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d302      	bcc.n	8002d0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11d      	bne.n	8002d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d16:	2b80      	cmp	r3, #128	; 0x80
 8002d18:	d016      	beq.n	8002d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f043 0220 	orr.w	r2, r3, #32
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e007      	b.n	8002d58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d52:	2b80      	cmp	r3, #128	; 0x80
 8002d54:	d1c3      	bne.n	8002cde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d6c:	e034      	b.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f83e 	bl	8002df0 <I2C_IsAcknowledgeFailed>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e034      	b.n	8002de8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d028      	beq.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d86:	f7fe fc93 	bl	80016b0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d302      	bcc.n	8002d9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d11d      	bne.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d016      	beq.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e007      	b.n	8002de8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d1c3      	bne.n	8002d6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	d11b      	bne.n	8002e40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f043 0204 	orr.w	r2, r3, #4
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e272      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f000 8087 	beq.w	8002f7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e6c:	4b92      	ldr	r3, [pc, #584]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 030c 	and.w	r3, r3, #12
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d00c      	beq.n	8002e92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e78:	4b8f      	ldr	r3, [pc, #572]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f003 030c 	and.w	r3, r3, #12
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	d112      	bne.n	8002eaa <HAL_RCC_OscConfig+0x5e>
 8002e84:	4b8c      	ldr	r3, [pc, #560]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e90:	d10b      	bne.n	8002eaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e92:	4b89      	ldr	r3, [pc, #548]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d06c      	beq.n	8002f78 <HAL_RCC_OscConfig+0x12c>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d168      	bne.n	8002f78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e24c      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb2:	d106      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x76>
 8002eb4:	4b80      	ldr	r3, [pc, #512]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a7f      	ldr	r2, [pc, #508]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	e02e      	b.n	8002f20 <HAL_RCC_OscConfig+0xd4>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x98>
 8002eca:	4b7b      	ldr	r3, [pc, #492]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a7a      	ldr	r2, [pc, #488]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed4:	6013      	str	r3, [r2, #0]
 8002ed6:	4b78      	ldr	r3, [pc, #480]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a77      	ldr	r2, [pc, #476]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e01d      	b.n	8002f20 <HAL_RCC_OscConfig+0xd4>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0xbc>
 8002eee:	4b72      	ldr	r3, [pc, #456]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a71      	ldr	r2, [pc, #452]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b6f      	ldr	r3, [pc, #444]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6e      	ldr	r2, [pc, #440]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e00b      	b.n	8002f20 <HAL_RCC_OscConfig+0xd4>
 8002f08:	4b6b      	ldr	r3, [pc, #428]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a6a      	ldr	r2, [pc, #424]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b68      	ldr	r3, [pc, #416]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a67      	ldr	r2, [pc, #412]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d013      	beq.n	8002f50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fe fbc2 	bl	80016b0 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe fbbe 	bl	80016b0 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b64      	cmp	r3, #100	; 0x64
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e200      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f42:	4b5d      	ldr	r3, [pc, #372]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0f0      	beq.n	8002f30 <HAL_RCC_OscConfig+0xe4>
 8002f4e:	e014      	b.n	8002f7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f50:	f7fe fbae 	bl	80016b0 <HAL_GetTick>
 8002f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f58:	f7fe fbaa 	bl	80016b0 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e1ec      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f6a:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1f0      	bne.n	8002f58 <HAL_RCC_OscConfig+0x10c>
 8002f76:	e000      	b.n	8002f7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0302 	and.w	r3, r3, #2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d063      	beq.n	800304e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f86:	4b4c      	ldr	r3, [pc, #304]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00b      	beq.n	8002faa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f92:	4b49      	ldr	r3, [pc, #292]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d11c      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x18c>
 8002f9e:	4b46      	ldr	r3, [pc, #280]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d116      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002faa:	4b43      	ldr	r3, [pc, #268]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x176>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e1c0      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4939      	ldr	r1, [pc, #228]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	e03a      	b.n	800304e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d020      	beq.n	8003022 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <HAL_RCC_OscConfig+0x270>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fb63 	bl	80016b0 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fee:	f7fe fb5f 	bl	80016b0 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e1a1      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300c:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	00db      	lsls	r3, r3, #3
 800301a:	4927      	ldr	r1, [pc, #156]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]
 8003020:	e015      	b.n	800304e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003022:	4b26      	ldr	r3, [pc, #152]	; (80030bc <HAL_RCC_OscConfig+0x270>)
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003028:	f7fe fb42 	bl	80016b0 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7fe fb3e 	bl	80016b0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e180      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f0      	bne.n	8003030 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d03a      	beq.n	80030d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d019      	beq.n	8003096 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003062:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <HAL_RCC_OscConfig+0x274>)
 8003064:	2201      	movs	r2, #1
 8003066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003068:	f7fe fb22 	bl	80016b0 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003070:	f7fe fb1e 	bl	80016b0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e160      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_RCC_OscConfig+0x26c>)
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800308e:	2001      	movs	r0, #1
 8003090:	f000 fafe 	bl	8003690 <RCC_Delay>
 8003094:	e01c      	b.n	80030d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003096:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <HAL_RCC_OscConfig+0x274>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800309c:	f7fe fb08 	bl	80016b0 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a2:	e00f      	b.n	80030c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030a4:	f7fe fb04 	bl	80016b0 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d908      	bls.n	80030c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e146      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
 80030b6:	bf00      	nop
 80030b8:	40021000 	.word	0x40021000
 80030bc:	42420000 	.word	0x42420000
 80030c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c4:	4b92      	ldr	r3, [pc, #584]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e9      	bne.n	80030a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a6 	beq.w	800322a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030de:	2300      	movs	r3, #0
 80030e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e2:	4b8b      	ldr	r3, [pc, #556]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10d      	bne.n	800310a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4a87      	ldr	r2, [pc, #540]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	61d3      	str	r3, [r2, #28]
 80030fa:	4b85      	ldr	r3, [pc, #532]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	60bb      	str	r3, [r7, #8]
 8003104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003106:	2301      	movs	r3, #1
 8003108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310a:	4b82      	ldr	r3, [pc, #520]	; (8003314 <HAL_RCC_OscConfig+0x4c8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d118      	bne.n	8003148 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003116:	4b7f      	ldr	r3, [pc, #508]	; (8003314 <HAL_RCC_OscConfig+0x4c8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a7e      	ldr	r2, [pc, #504]	; (8003314 <HAL_RCC_OscConfig+0x4c8>)
 800311c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003122:	f7fe fac5 	bl	80016b0 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800312a:	f7fe fac1 	bl	80016b0 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b64      	cmp	r3, #100	; 0x64
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e103      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800313c:	4b75      	ldr	r3, [pc, #468]	; (8003314 <HAL_RCC_OscConfig+0x4c8>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0f0      	beq.n	800312a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d106      	bne.n	800315e <HAL_RCC_OscConfig+0x312>
 8003150:	4b6f      	ldr	r3, [pc, #444]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	4a6e      	ldr	r2, [pc, #440]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	6213      	str	r3, [r2, #32]
 800315c:	e02d      	b.n	80031ba <HAL_RCC_OscConfig+0x36e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10c      	bne.n	8003180 <HAL_RCC_OscConfig+0x334>
 8003166:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800316c:	f023 0301 	bic.w	r3, r3, #1
 8003170:	6213      	str	r3, [r2, #32]
 8003172:	4b67      	ldr	r3, [pc, #412]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4a66      	ldr	r2, [pc, #408]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	f023 0304 	bic.w	r3, r3, #4
 800317c:	6213      	str	r3, [r2, #32]
 800317e:	e01c      	b.n	80031ba <HAL_RCC_OscConfig+0x36e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b05      	cmp	r3, #5
 8003186:	d10c      	bne.n	80031a2 <HAL_RCC_OscConfig+0x356>
 8003188:	4b61      	ldr	r3, [pc, #388]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	4a60      	ldr	r2, [pc, #384]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800318e:	f043 0304 	orr.w	r3, r3, #4
 8003192:	6213      	str	r3, [r2, #32]
 8003194:	4b5e      	ldr	r3, [pc, #376]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	4a5d      	ldr	r2, [pc, #372]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6213      	str	r3, [r2, #32]
 80031a0:	e00b      	b.n	80031ba <HAL_RCC_OscConfig+0x36e>
 80031a2:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4a5a      	ldr	r2, [pc, #360]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	6213      	str	r3, [r2, #32]
 80031ae:	4b58      	ldr	r3, [pc, #352]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	4a57      	ldr	r2, [pc, #348]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80031b4:	f023 0304 	bic.w	r3, r3, #4
 80031b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d015      	beq.n	80031ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031c2:	f7fe fa75 	bl	80016b0 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c8:	e00a      	b.n	80031e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ca:	f7fe fa71 	bl	80016b0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d8:	4293      	cmp	r3, r2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e0b1      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e0:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ee      	beq.n	80031ca <HAL_RCC_OscConfig+0x37e>
 80031ec:	e014      	b.n	8003218 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fe fa5f 	bl	80016b0 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe fa5b 	bl	80016b0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e09b      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320c:	4b40      	ldr	r3, [pc, #256]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1ee      	bne.n	80031f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003218:	7dfb      	ldrb	r3, [r7, #23]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d105      	bne.n	800322a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321e:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4a3b      	ldr	r2, [pc, #236]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003228:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8087 	beq.w	8003342 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003234:	4b36      	ldr	r3, [pc, #216]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f003 030c 	and.w	r3, r3, #12
 800323c:	2b08      	cmp	r3, #8
 800323e:	d061      	beq.n	8003304 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d146      	bne.n	80032d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003248:	4b33      	ldr	r3, [pc, #204]	; (8003318 <HAL_RCC_OscConfig+0x4cc>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324e:	f7fe fa2f 	bl	80016b0 <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003254:	e008      	b.n	8003268 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7fe fa2b 	bl	80016b0 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d901      	bls.n	8003268 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e06d      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003268:	4b29      	ldr	r3, [pc, #164]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f0      	bne.n	8003256 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d108      	bne.n	8003290 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	4921      	ldr	r1, [pc, #132]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	4313      	orrs	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003290:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a19      	ldr	r1, [r3, #32]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	430b      	orrs	r3, r1
 80032a2:	491b      	ldr	r1, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a8:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <HAL_RCC_OscConfig+0x4cc>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7fe f9ff 	bl	80016b0 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b6:	f7fe f9fb 	bl	80016b0 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e03d      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032c8:	4b11      	ldr	r3, [pc, #68]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x46a>
 80032d4:	e035      	b.n	8003342 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_RCC_OscConfig+0x4cc>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fe f9e8 	bl	80016b0 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fe f9e4 	bl	80016b0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e026      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f6:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x498>
 8003302:	e01e      	b.n	8003342 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d107      	bne.n	800331c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e019      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
 8003318:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_OscConfig+0x500>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	429a      	cmp	r2, r3
 800332e:	d106      	bne.n	800333e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	429a      	cmp	r2, r3
 800333c:	d001      	beq.n	8003342 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	40021000 	.word	0x40021000

08003350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e0d0      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	429a      	cmp	r2, r3
 8003370:	d910      	bls.n	8003394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003372:	4b67      	ldr	r3, [pc, #412]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 0207 	bic.w	r2, r3, #7
 800337a:	4965      	ldr	r1, [pc, #404]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	4313      	orrs	r3, r2
 8003380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b63      	ldr	r3, [pc, #396]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0b8      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d020      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033ac:	4b59      	ldr	r3, [pc, #356]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a58      	ldr	r2, [pc, #352]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033c4:	4b53      	ldr	r3, [pc, #332]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4a52      	ldr	r2, [pc, #328]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d0:	4b50      	ldr	r3, [pc, #320]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	494d      	ldr	r1, [pc, #308]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d040      	beq.n	8003470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d107      	bne.n	8003406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f6:	4b47      	ldr	r3, [pc, #284]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d115      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e07f      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d107      	bne.n	800341e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b41      	ldr	r3, [pc, #260]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e073      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341e:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e06b      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342e:	4b39      	ldr	r3, [pc, #228]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f023 0203 	bic.w	r2, r3, #3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4936      	ldr	r1, [pc, #216]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003440:	f7fe f936 	bl	80016b0 <HAL_GetTick>
 8003444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003446:	e00a      	b.n	800345e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003448:	f7fe f932 	bl	80016b0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e053      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345e:	4b2d      	ldr	r3, [pc, #180]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 020c 	and.w	r2, r3, #12
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	429a      	cmp	r2, r3
 800346e:	d1eb      	bne.n	8003448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003470:	4b27      	ldr	r3, [pc, #156]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d210      	bcs.n	80034a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347e:	4b24      	ldr	r3, [pc, #144]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f023 0207 	bic.w	r2, r3, #7
 8003486:	4922      	ldr	r1, [pc, #136]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	4313      	orrs	r3, r2
 800348c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b20      	ldr	r3, [pc, #128]	; (8003510 <HAL_RCC_ClockConfig+0x1c0>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d001      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e032      	b.n	8003506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034ac:	4b19      	ldr	r3, [pc, #100]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4916      	ldr	r1, [pc, #88]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	490e      	ldr	r1, [pc, #56]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034de:	f000 f821 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 80034e2:	4602      	mov	r2, r0
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	091b      	lsrs	r3, r3, #4
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	490a      	ldr	r1, [pc, #40]	; (8003518 <HAL_RCC_ClockConfig+0x1c8>)
 80034f0:	5ccb      	ldrb	r3, [r1, r3]
 80034f2:	fa22 f303 	lsr.w	r3, r2, r3
 80034f6:	4a09      	ldr	r2, [pc, #36]	; (800351c <HAL_RCC_ClockConfig+0x1cc>)
 80034f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034fa:	4b09      	ldr	r3, [pc, #36]	; (8003520 <HAL_RCC_ClockConfig+0x1d0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fd ffba 	bl	8001478 <HAL_InitTick>

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40022000 	.word	0x40022000
 8003514:	40021000 	.word	0x40021000
 8003518:	08007b60 	.word	0x08007b60
 800351c:	20000008 	.word	0x20000008
 8003520:	2000000c 	.word	0x2000000c

08003524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	2300      	movs	r3, #0
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	2300      	movs	r3, #0
 8003538:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800353e:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	2b04      	cmp	r3, #4
 800354c:	d002      	beq.n	8003554 <HAL_RCC_GetSysClockFreq+0x30>
 800354e:	2b08      	cmp	r3, #8
 8003550:	d003      	beq.n	800355a <HAL_RCC_GetSysClockFreq+0x36>
 8003552:	e027      	b.n	80035a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003554:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003556:	613b      	str	r3, [r7, #16]
      break;
 8003558:	e027      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	0c9b      	lsrs	r3, r3, #18
 800355e:	f003 030f 	and.w	r3, r3, #15
 8003562:	4a17      	ldr	r2, [pc, #92]	; (80035c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003564:	5cd3      	ldrb	r3, [r2, r3]
 8003566:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d010      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003572:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	0c5b      	lsrs	r3, r3, #17
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	4a11      	ldr	r2, [pc, #68]	; (80035c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800357e:	5cd3      	ldrb	r3, [r2, r3]
 8003580:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <HAL_RCC_GetSysClockFreq+0x98>)
 8003586:	fb03 f202 	mul.w	r2, r3, r2
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	e004      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a0c      	ldr	r2, [pc, #48]	; (80035c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003598:	fb02 f303 	mul.w	r3, r2, r3
 800359c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	613b      	str	r3, [r7, #16]
      break;
 80035a2:	e002      	b.n	80035aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_RCC_GetSysClockFreq+0x98>)
 80035a6:	613b      	str	r3, [r7, #16]
      break;
 80035a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035aa:	693b      	ldr	r3, [r7, #16]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000
 80035bc:	007a1200 	.word	0x007a1200
 80035c0:	08007b78 	.word	0x08007b78
 80035c4:	08007b88 	.word	0x08007b88
 80035c8:	003d0900 	.word	0x003d0900

080035cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d0:	4b02      	ldr	r3, [pc, #8]	; (80035dc <HAL_RCC_GetHCLKFreq+0x10>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	20000008 	.word	0x20000008

080035e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e4:	f7ff fff2 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	4903      	ldr	r1, [pc, #12]	; (8003604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f6:	5ccb      	ldrb	r3, [r1, r3]
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	40021000 	.word	0x40021000
 8003604:	08007b70 	.word	0x08007b70

08003608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800360c:	f7ff ffde 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 8003610:	4602      	mov	r2, r0
 8003612:	4b05      	ldr	r3, [pc, #20]	; (8003628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	0adb      	lsrs	r3, r3, #11
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	4903      	ldr	r1, [pc, #12]	; (800362c <HAL_RCC_GetPCLK2Freq+0x24>)
 800361e:	5ccb      	ldrb	r3, [r1, r3]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	08007b70 	.word	0x08007b70

08003630 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	220f      	movs	r2, #15
 800363e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_RCC_GetClockConfig+0x58>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0203 	and.w	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800364c:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <HAL_RCC_GetClockConfig+0x58>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCC_GetClockConfig+0x58>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_RCC_GetClockConfig+0x58>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	08db      	lsrs	r3, r3, #3
 800366a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003672:	4b06      	ldr	r3, [pc, #24]	; (800368c <HAL_RCC_GetClockConfig+0x5c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0207 	and.w	r2, r3, #7
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	40021000 	.word	0x40021000
 800368c:	40022000 	.word	0x40022000

08003690 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <RCC_Delay+0x34>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <RCC_Delay+0x38>)
 800369e:	fba2 2303 	umull	r2, r3, r2, r3
 80036a2:	0a5b      	lsrs	r3, r3, #9
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	fb02 f303 	mul.w	r3, r2, r3
 80036aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036ac:	bf00      	nop
  }
  while (Delay --);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	1e5a      	subs	r2, r3, #1
 80036b2:	60fa      	str	r2, [r7, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f9      	bne.n	80036ac <RCC_Delay+0x1c>
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	20000008 	.word	0x20000008
 80036c8:	10624dd3 	.word	0x10624dd3

080036cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d07d      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036e8:	2300      	movs	r3, #0
 80036ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ec:	4b4f      	ldr	r3, [pc, #316]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10d      	bne.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f8:	4b4c      	ldr	r3, [pc, #304]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	4a4b      	ldr	r2, [pc, #300]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003702:	61d3      	str	r3, [r2, #28]
 8003704:	4b49      	ldr	r3, [pc, #292]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003710:	2301      	movs	r3, #1
 8003712:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d118      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003720:	4b43      	ldr	r3, [pc, #268]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a42      	ldr	r2, [pc, #264]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800372a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372c:	f7fd ffc0 	bl	80016b0 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003732:	e008      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003734:	f7fd ffbc 	bl	80016b0 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e06d      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003746:	4b3a      	ldr	r3, [pc, #232]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003752:	4b36      	ldr	r3, [pc, #216]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d02e      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	429a      	cmp	r2, r3
 800376e:	d027      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003770:	4b2e      	ldr	r3, [pc, #184]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003778:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800377a:	4b2e      	ldr	r3, [pc, #184]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800377c:	2201      	movs	r2, #1
 800377e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003780:	4b2c      	ldr	r3, [pc, #176]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003782:	2200      	movs	r2, #0
 8003784:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003786:	4a29      	ldr	r2, [pc, #164]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d014      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003796:	f7fd ff8b 	bl	80016b0 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379c:	e00a      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379e:	f7fd ff87 	bl	80016b0 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e036      	b.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b4:	4b1d      	ldr	r3, [pc, #116]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0ee      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037c0:	4b1a      	ldr	r3, [pc, #104]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4917      	ldr	r1, [pc, #92]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	490b      	ldr	r1, [pc, #44]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800380e:	4b07      	ldr	r3, [pc, #28]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	4904      	ldr	r1, [pc, #16]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800381c:	4313      	orrs	r3, r2
 800381e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	40007000 	.word	0x40007000
 8003834:	42420440 	.word	0x42420440

08003838 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b088      	sub	sp, #32
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	2300      	movs	r3, #0
 800384a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	2300      	movs	r3, #0
 8003852:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b10      	cmp	r3, #16
 8003858:	d00a      	beq.n	8003870 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b10      	cmp	r3, #16
 800385e:	f200 808a 	bhi.w	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d045      	beq.n	80038f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d075      	beq.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800386e:	e082      	b.n	8003976 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003870:	4b46      	ldr	r3, [pc, #280]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003876:	4b45      	ldr	r3, [pc, #276]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d07b      	beq.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	0c9b      	lsrs	r3, r3, #18
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	4a41      	ldr	r2, [pc, #260]	; (8003990 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800388c:	5cd3      	ldrb	r3, [r2, r3]
 800388e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d015      	beq.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800389a:	4b3c      	ldr	r3, [pc, #240]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	0c5b      	lsrs	r3, r3, #17
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00d      	beq.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80038b4:	4a38      	ldr	r2, [pc, #224]	; (8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	e004      	b.n	80038d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	4a34      	ldr	r2, [pc, #208]	; (800399c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038d0:	4b2e      	ldr	r3, [pc, #184]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038dc:	d102      	bne.n	80038e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	61bb      	str	r3, [r7, #24]
      break;
 80038e2:	e04a      	b.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4a2d      	ldr	r2, [pc, #180]	; (80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	085b      	lsrs	r3, r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
      break;
 80038f2:	e042      	b.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80038f4:	4b25      	ldr	r3, [pc, #148]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003904:	d108      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	e01f      	b.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003922:	d109      	bne.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003924:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003930:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003934:	61bb      	str	r3, [r7, #24]
 8003936:	e00f      	b.n	8003958 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003942:	d11c      	bne.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d016      	beq.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003950:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003954:	61bb      	str	r3, [r7, #24]
      break;
 8003956:	e012      	b.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003958:	e011      	b.n	800397e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800395a:	f7ff fe55 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 800395e:	4602      	mov	r2, r0
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	0b9b      	lsrs	r3, r3, #14
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	3301      	adds	r3, #1
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	61bb      	str	r3, [r7, #24]
      break;
 8003974:	e004      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003976:	bf00      	nop
 8003978:	e002      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800397e:	bf00      	nop
    }
  }
  return (frequency);
 8003980:	69bb      	ldr	r3, [r7, #24]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	40021000 	.word	0x40021000
 8003990:	08007b8c 	.word	0x08007b8c
 8003994:	08007b9c 	.word	0x08007b9c
 8003998:	007a1200 	.word	0x007a1200
 800399c:	003d0900 	.word	0x003d0900
 80039a0:	aaaaaaab 	.word	0xaaaaaaab

080039a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e041      	b.n	8003a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fc80 	bl	80012d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3304      	adds	r3, #4
 80039e0:	4619      	mov	r1, r3
 80039e2:	4610      	mov	r0, r2
 80039e4:	f000 fc30 	bl	8004248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d001      	beq.n	8003a5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e03a      	b.n	8003ad2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a18      	ldr	r2, [pc, #96]	; (8003adc <HAL_TIM_Base_Start_IT+0x98>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x58>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d009      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x58>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x58>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a13      	ldr	r2, [pc, #76]	; (8003ae4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d010      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	e007      	b.n	8003ad0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40000400 	.word	0x40000400
 8003ae4:	40000800 	.word	0x40000800

08003ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e041      	b.n	8003b7e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f839 	bl	8003b86 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f000 fb8e 	bl	8004248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003b8e:	bf00      	nop
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bc80      	pop	{r7}
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_TIM_PWM_Start+0x24>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	bf14      	ite	ne
 8003bb4:	2301      	movne	r3, #1
 8003bb6:	2300      	moveq	r3, #0
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	e022      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d109      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0x3e>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e015      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d109      	bne.n	8003bf0 <HAL_TIM_PWM_Start+0x58>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e008      	b.n	8003c02 <HAL_TIM_PWM_Start+0x6a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e05e      	b.n	8003cc8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start+0x82>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c18:	e013      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d104      	bne.n	8003c2a <HAL_TIM_PWM_Start+0x92>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c28:	e00b      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d104      	bne.n	8003c3a <HAL_TIM_PWM_Start+0xa2>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c38:	e003      	b.n	8003c42 <HAL_TIM_PWM_Start+0xaa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2201      	movs	r2, #1
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f000 fd7c 	bl	8004748 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <HAL_TIM_PWM_Start+0x138>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d107      	bne.n	8003c6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <HAL_TIM_PWM_Start+0x138>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00e      	beq.n	8003c92 <HAL_TIM_PWM_Start+0xfa>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c7c:	d009      	beq.n	8003c92 <HAL_TIM_PWM_Start+0xfa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <HAL_TIM_PWM_Start+0x13c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_TIM_PWM_Start+0xfa>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_TIM_PWM_Start+0x140>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d111      	bne.n	8003cb6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b06      	cmp	r3, #6
 8003ca2:	d010      	beq.n	8003cc6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb4:	e007      	b.n	8003cc6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f042 0201 	orr.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40000800 	.word	0x40000800

08003cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d122      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d11b      	bne.n	8003d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0202 	mvn.w	r2, #2
 8003d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f003 0303 	and.w	r3, r3, #3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa76 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003d24:	e005      	b.n	8003d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa69 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fa78 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d122      	bne.n	8003d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d11b      	bne.n	8003d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0204 	mvn.w	r2, #4
 8003d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2202      	movs	r2, #2
 8003d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fa4c 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 fa3f 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fa4e 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d122      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d11b      	bne.n	8003de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f06f 0208 	mvn.w	r2, #8
 8003db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2204      	movs	r2, #4
 8003db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 fa22 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003dcc:	e005      	b.n	8003dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa15 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fa24 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d122      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b10      	cmp	r3, #16
 8003dfa:	d11b      	bne.n	8003e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f06f 0210 	mvn.w	r2, #16
 8003e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2208      	movs	r2, #8
 8003e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 f9f8 	bl	8004210 <HAL_TIM_IC_CaptureCallback>
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f9eb 	bl	80041fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 f9fa 	bl	8004222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d10e      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f06f 0201 	mvn.w	r2, #1
 8003e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fd f96e 	bl	800113c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6a:	2b80      	cmp	r3, #128	; 0x80
 8003e6c:	d10e      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b80      	cmp	r3, #128	; 0x80
 8003e7a:	d107      	bne.n	8003e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fce9 	bl	800485e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e96:	2b40      	cmp	r3, #64	; 0x40
 8003e98:	d10e      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d107      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f9be 	bl	8004234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d107      	bne.n	8003ee4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0220 	mvn.w	r2, #32
 8003edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fcb4 	bl	800484c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e0ae      	b.n	8004068 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b0c      	cmp	r3, #12
 8003f16:	f200 809f 	bhi.w	8004058 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f1a:	a201      	add	r2, pc, #4	; (adr r2, 8003f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f20:	08003f55 	.word	0x08003f55
 8003f24:	08004059 	.word	0x08004059
 8003f28:	08004059 	.word	0x08004059
 8003f2c:	08004059 	.word	0x08004059
 8003f30:	08003f95 	.word	0x08003f95
 8003f34:	08004059 	.word	0x08004059
 8003f38:	08004059 	.word	0x08004059
 8003f3c:	08004059 	.word	0x08004059
 8003f40:	08003fd7 	.word	0x08003fd7
 8003f44:	08004059 	.word	0x08004059
 8003f48:	08004059 	.word	0x08004059
 8003f4c:	08004059 	.word	0x08004059
 8003f50:	08004017 	.word	0x08004017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f9d6 	bl	800430c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0208 	orr.w	r2, r2, #8
 8003f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0204 	bic.w	r2, r2, #4
 8003f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6999      	ldr	r1, [r3, #24]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	619a      	str	r2, [r3, #24]
      break;
 8003f92:	e064      	b.n	800405e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fa1c 	bl	80043d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6999      	ldr	r1, [r3, #24]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	619a      	str	r2, [r3, #24]
      break;
 8003fd4:	e043      	b.n	800405e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fa65 	bl	80044ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0208 	orr.w	r2, r2, #8
 8003ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0204 	bic.w	r2, r2, #4
 8004000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69d9      	ldr	r1, [r3, #28]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	61da      	str	r2, [r3, #28]
      break;
 8004014:	e023      	b.n	800405e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 faaf 	bl	8004580 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69d9      	ldr	r1, [r3, #28]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	021a      	lsls	r2, r3, #8
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	61da      	str	r2, [r3, #28]
      break;
 8004056:	e002      	b.n	800405e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_TIM_ConfigClockSource+0x1c>
 8004088:	2302      	movs	r3, #2
 800408a:	e0b4      	b.n	80041f6 <HAL_TIM_ConfigClockSource+0x186>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c4:	d03e      	beq.n	8004144 <HAL_TIM_ConfigClockSource+0xd4>
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ca:	f200 8087 	bhi.w	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d2:	f000 8086 	beq.w	80041e2 <HAL_TIM_ConfigClockSource+0x172>
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040da:	d87f      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b70      	cmp	r3, #112	; 0x70
 80040de:	d01a      	beq.n	8004116 <HAL_TIM_ConfigClockSource+0xa6>
 80040e0:	2b70      	cmp	r3, #112	; 0x70
 80040e2:	d87b      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b60      	cmp	r3, #96	; 0x60
 80040e6:	d050      	beq.n	800418a <HAL_TIM_ConfigClockSource+0x11a>
 80040e8:	2b60      	cmp	r3, #96	; 0x60
 80040ea:	d877      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b50      	cmp	r3, #80	; 0x50
 80040ee:	d03c      	beq.n	800416a <HAL_TIM_ConfigClockSource+0xfa>
 80040f0:	2b50      	cmp	r3, #80	; 0x50
 80040f2:	d873      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d058      	beq.n	80041aa <HAL_TIM_ConfigClockSource+0x13a>
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d86f      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b30      	cmp	r3, #48	; 0x30
 80040fe:	d064      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004100:	2b30      	cmp	r3, #48	; 0x30
 8004102:	d86b      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b20      	cmp	r3, #32
 8004106:	d060      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d867      	bhi.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d05c      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004110:	2b10      	cmp	r3, #16
 8004112:	d05a      	beq.n	80041ca <HAL_TIM_ConfigClockSource+0x15a>
 8004114:	e062      	b.n	80041dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004126:	f000 faf0 	bl	800470a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	609a      	str	r2, [r3, #8]
      break;
 8004142:	e04f      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004154:	f000 fad9 	bl	800470a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689a      	ldr	r2, [r3, #8]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004166:	609a      	str	r2, [r3, #8]
      break;
 8004168:	e03c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004176:	461a      	mov	r2, r3
 8004178:	f000 fa50 	bl	800461c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2150      	movs	r1, #80	; 0x50
 8004182:	4618      	mov	r0, r3
 8004184:	f000 faa7 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 8004188:	e02c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004196:	461a      	mov	r2, r3
 8004198:	f000 fa6e 	bl	8004678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2160      	movs	r1, #96	; 0x60
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fa97 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 80041a8:	e01c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b6:	461a      	mov	r2, r3
 80041b8:	f000 fa30 	bl	800461c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fa87 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 80041c8:	e00c      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f000 fa7e 	bl	80046d6 <TIM_ITRx_SetConfig>
      break;
 80041da:	e003      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
      break;
 80041e0:	e000      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	bc80      	pop	{r7}
 8004232:	4770      	bx	lr

08004234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	bc80      	pop	{r7}
 8004244:	4770      	bx	lr
	...

08004248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a29      	ldr	r2, [pc, #164]	; (8004300 <TIM_Base_SetConfig+0xb8>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00b      	beq.n	8004278 <TIM_Base_SetConfig+0x30>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004266:	d007      	beq.n	8004278 <TIM_Base_SetConfig+0x30>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a26      	ldr	r2, [pc, #152]	; (8004304 <TIM_Base_SetConfig+0xbc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_Base_SetConfig+0x30>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a25      	ldr	r2, [pc, #148]	; (8004308 <TIM_Base_SetConfig+0xc0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d108      	bne.n	800428a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a1c      	ldr	r2, [pc, #112]	; (8004300 <TIM_Base_SetConfig+0xb8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00b      	beq.n	80042aa <TIM_Base_SetConfig+0x62>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d007      	beq.n	80042aa <TIM_Base_SetConfig+0x62>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a19      	ldr	r2, [pc, #100]	; (8004304 <TIM_Base_SetConfig+0xbc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d003      	beq.n	80042aa <TIM_Base_SetConfig+0x62>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a18      	ldr	r2, [pc, #96]	; (8004308 <TIM_Base_SetConfig+0xc0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d108      	bne.n	80042bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a07      	ldr	r2, [pc, #28]	; (8004300 <TIM_Base_SetConfig+0xb8>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d103      	bne.n	80042f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	615a      	str	r2, [r3, #20]
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr
 8004300:	40012c00 	.word	0x40012c00
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800

0800430c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f023 0201 	bic.w	r2, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f023 0302 	bic.w	r3, r3, #2
 8004354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <TIM_OC1_SetConfig+0xc8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10c      	bne.n	8004382 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0308 	bic.w	r3, r3, #8
 800436e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a13      	ldr	r2, [pc, #76]	; (80043d4 <TIM_OC1_SetConfig+0xc8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d111      	bne.n	80043ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	621a      	str	r2, [r3, #32]
}
 80043c8:	bf00      	nop
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40012c00 	.word	0x40012c00

080043d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f023 0210 	bic.w	r2, r3, #16
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800440e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f023 0320 	bic.w	r3, r3, #32
 8004422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1d      	ldr	r2, [pc, #116]	; (80044a8 <TIM_OC2_SetConfig+0xd0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d10d      	bne.n	8004454 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800443e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004452:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <TIM_OC2_SetConfig+0xd0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d113      	bne.n	8004484 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800446a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	40012c00 	.word	0x40012c00

080044ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0303 	bic.w	r3, r3, #3
 80044e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a1d      	ldr	r2, [pc, #116]	; (800457c <TIM_OC3_SetConfig+0xd0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10d      	bne.n	8004526 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a14      	ldr	r2, [pc, #80]	; (800457c <TIM_OC3_SetConfig+0xd0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d113      	bne.n	8004556 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800453c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	693a      	ldr	r2, [r7, #16]
 8004552:	4313      	orrs	r3, r2
 8004554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	621a      	str	r2, [r3, #32]
}
 8004570:	bf00      	nop
 8004572:	371c      	adds	r7, #28
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	40012c00 	.word	0x40012c00

08004580 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a1b      	ldr	r3, [r3, #32]
 8004594:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	021b      	lsls	r3, r3, #8
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	031b      	lsls	r3, r3, #12
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a0f      	ldr	r2, [pc, #60]	; (8004618 <TIM_OC4_SetConfig+0x98>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d109      	bne.n	80045f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	019b      	lsls	r3, r3, #6
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr
 8004618:	40012c00 	.word	0x40012c00

0800461c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6a1b      	ldr	r3, [r3, #32]
 800462c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a1b      	ldr	r3, [r3, #32]
 8004632:	f023 0201 	bic.w	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	4313      	orrs	r3, r2
 8004650:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f023 030a 	bic.w	r3, r3, #10
 8004658:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0210 	bic.w	r2, r3, #16
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	031b      	lsls	r3, r3, #12
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bc80      	pop	{r7}
 80046d4:	4770      	bx	lr

080046d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
 80046de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f043 0307 	orr.w	r3, r3, #7
 80046f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	609a      	str	r2, [r3, #8]
}
 8004700:	bf00      	nop
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800470a:	b480      	push	{r7}
 800470c:	b087      	sub	sp, #28
 800470e:	af00      	add	r7, sp, #0
 8004710:	60f8      	str	r0, [r7, #12]
 8004712:	60b9      	str	r1, [r7, #8]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004724:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	021a      	lsls	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	431a      	orrs	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	4313      	orrs	r3, r2
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	609a      	str	r2, [r3, #8]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr

08004748 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004748:	b480      	push	{r7}
 800474a:	b087      	sub	sp, #28
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	2201      	movs	r2, #1
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1a      	ldr	r2, [r3, #32]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	43db      	mvns	r3, r3
 800476a:	401a      	ands	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	431a      	orrs	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e046      	b.n	8004836 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a16      	ldr	r2, [pc, #88]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d00e      	beq.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f4:	d009      	beq.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a12      	ldr	r2, [pc, #72]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a10      	ldr	r2, [pc, #64]	; (8004848 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d10c      	bne.n	8004824 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004810:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	4313      	orrs	r3, r2
 800481a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr
 8004840:	40012c00 	.word	0x40012c00
 8004844:	40000400 	.word	0x40000400
 8004848:	40000800 	.word	0x40000800

0800484c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr

0800485e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004866:	bf00      	nop
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	bc80      	pop	{r7}
 800486e:	4770      	bx	lr

08004870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e042      	b.n	8004908 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc fd66 	bl	8001368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2224      	movs	r2, #36	; 0x24
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 f91d 	bl	8004af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af02      	add	r7, sp, #8
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	4613      	mov	r3, r2
 800491e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b20      	cmp	r3, #32
 800492e:	d16d      	bne.n	8004a0c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_UART_Transmit+0x2c>
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e066      	b.n	8004a0e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2221      	movs	r2, #33	; 0x21
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800494e:	f7fc feaf 	bl	80016b0 <HAL_GetTick>
 8004952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004968:	d108      	bne.n	800497c <HAL_UART_Transmit+0x6c>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d104      	bne.n	800497c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	e003      	b.n	8004984 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004984:	e02a      	b.n	80049dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	9300      	str	r3, [sp, #0]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2200      	movs	r2, #0
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f840 	bl	8004a16 <UART_WaitOnFlagUntilTimeout>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e036      	b.n	8004a0e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10b      	bne.n	80049be <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	3302      	adds	r3, #2
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	e007      	b.n	80049ce <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	3301      	adds	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1cf      	bne.n	8004986 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	2200      	movs	r2, #0
 80049ee:	2140      	movs	r1, #64	; 0x40
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 f810 	bl	8004a16 <UART_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e006      	b.n	8004a0e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b090      	sub	sp, #64	; 0x40
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	603b      	str	r3, [r7, #0]
 8004a22:	4613      	mov	r3, r2
 8004a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a26:	e050      	b.n	8004aca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a2e:	d04c      	beq.n	8004aca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a36:	f7fc fe3b 	bl	80016b0 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d241      	bcs.n	8004aca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	330c      	adds	r3, #12
 8004a64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a66:	637a      	str	r2, [r7, #52]	; 0x34
 8004a68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a6e:	e841 2300 	strex	r3, r2, [r1]
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1e5      	bne.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3314      	adds	r3, #20
 8004a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	613b      	str	r3, [r7, #16]
   return(result);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f023 0301 	bic.w	r3, r3, #1
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	3314      	adds	r3, #20
 8004a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a9a:	623a      	str	r2, [r7, #32]
 8004a9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	69f9      	ldr	r1, [r7, #28]
 8004aa0:	6a3a      	ldr	r2, [r7, #32]
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e5      	bne.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e00f      	b.n	8004aea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	bf0c      	ite	eq
 8004ada:	2301      	moveq	r3, #1
 8004adc:	2300      	movne	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d09f      	beq.n	8004a28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3740      	adds	r7, #64	; 0x40
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b2e:	f023 030c 	bic.w	r3, r3, #12
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <UART_SetConfig+0x114>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d103      	bne.n	8004b64 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b5c:	f7fe fd54 	bl	8003608 <HAL_RCC_GetPCLK2Freq>
 8004b60:	60f8      	str	r0, [r7, #12]
 8004b62:	e002      	b.n	8004b6a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b64:	f7fe fd3c 	bl	80035e0 <HAL_RCC_GetPCLK1Freq>
 8004b68:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009a      	lsls	r2, r3, #2
 8004b74:	441a      	add	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b80:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <UART_SetConfig+0x118>)
 8004b82:	fba2 2303 	umull	r2, r3, r2, r3
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	0119      	lsls	r1, r3, #4
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009a      	lsls	r2, r3, #2
 8004b94:	441a      	add	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	; (8004c0c <UART_SetConfig+0x118>)
 8004ba2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ba6:	095b      	lsrs	r3, r3, #5
 8004ba8:	2064      	movs	r0, #100	; 0x64
 8004baa:	fb00 f303 	mul.w	r3, r0, r3
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	3332      	adds	r3, #50	; 0x32
 8004bb4:	4a15      	ldr	r2, [pc, #84]	; (8004c0c <UART_SetConfig+0x118>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	095b      	lsrs	r3, r3, #5
 8004bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bc0:	4419      	add	r1, r3
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009a      	lsls	r2, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd8:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <UART_SetConfig+0x118>)
 8004bda:	fba3 0302 	umull	r0, r3, r3, r2
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	2064      	movs	r0, #100	; 0x64
 8004be2:	fb00 f303 	mul.w	r3, r0, r3
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	3332      	adds	r3, #50	; 0x32
 8004bec:	4a07      	ldr	r2, [pc, #28]	; (8004c0c <UART_SetConfig+0x118>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	095b      	lsrs	r3, r3, #5
 8004bf4:	f003 020f 	and.w	r2, r3, #15
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	440a      	add	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40013800 	.word	0x40013800
 8004c0c:	51eb851f 	.word	0x51eb851f

08004c10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c22:	2b84      	cmp	r3, #132	; 0x84
 8004c24:	d005      	beq.n	8004c32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3303      	adds	r3, #3
 8004c30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c32:	68fb      	ldr	r3, [r7, #12]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bc80      	pop	{r7}
 8004c3c:	4770      	bx	lr

08004c3e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c44:	f3ef 8305 	mrs	r3, IPSR
 8004c48:	607b      	str	r3, [r7, #4]
  return(result);
 8004c4a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf14      	ite	ne
 8004c50:	2301      	movne	r3, #1
 8004c52:	2300      	moveq	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c64:	f001 f908 	bl	8005e78 <vTaskStartScheduler>
  
  return osOK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c70:	b089      	sub	sp, #36	; 0x24
 8004c72:	af04      	add	r7, sp, #16
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d020      	beq.n	8004cc2 <osThreadCreate+0x54>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01c      	beq.n	8004cc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685c      	ldr	r4, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691e      	ldr	r6, [r3, #16]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff ffb8 	bl	8004c10 <makeFreeRtosPriority>
 8004ca0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004caa:	9202      	str	r2, [sp, #8]
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	9100      	str	r1, [sp, #0]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	4632      	mov	r2, r6
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f000 ff08 	bl	8005acc <xTaskCreateStatic>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	e01c      	b.n	8004cfc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685c      	ldr	r4, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff ff9a 	bl	8004c10 <makeFreeRtosPriority>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	f107 030c 	add.w	r3, r7, #12
 8004ce2:	9301      	str	r3, [sp, #4]
 8004ce4:	9200      	str	r2, [sp, #0]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	4632      	mov	r2, r6
 8004cea:	4629      	mov	r1, r5
 8004cec:	4620      	mov	r0, r4
 8004cee:	f000 ff49 	bl	8005b84 <xTaskCreate>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d001      	beq.n	8004cfc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <osDelay+0x16>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	e000      	b.n	8004d1e <osDelay+0x18>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f001 f876 	bl	8005e10 <vTaskDelay>
  
  return osOK;
 8004d24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004d2e:	b590      	push	{r4, r7, lr}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af02      	add	r7, sp, #8
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d011      	beq.n	8004d64 <osMessageCreate+0x36>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00d      	beq.n	8004d64 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6818      	ldr	r0, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6859      	ldr	r1, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	2400      	movs	r4, #0
 8004d5a:	9400      	str	r4, [sp, #0]
 8004d5c:	f000 f9dc 	bl	8005118 <xQueueGenericCreateStatic>
 8004d60:	4603      	mov	r3, r0
 8004d62:	e008      	b.n	8004d76 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4619      	mov	r1, r3
 8004d70:	f000 fa49 	bl	8005206 <xQueueGenericCreate>
 8004d74:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd90      	pop	{r4, r7, pc}
	...

08004d80 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <osMessagePut+0x1e>
    ticks = 1;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004d9e:	f7ff ff4e 	bl	8004c3e <inHandlerMode>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d018      	beq.n	8004dda <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004da8:	f107 0210 	add.w	r2, r7, #16
 8004dac:	f107 0108 	add.w	r1, r7, #8
 8004db0:	2300      	movs	r3, #0
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fb82 	bl	80054bc <xQueueGenericSendFromISR>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d001      	beq.n	8004dc2 <osMessagePut+0x42>
      return osErrorOS;
 8004dbe:	23ff      	movs	r3, #255	; 0xff
 8004dc0:	e018      	b.n	8004df4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d014      	beq.n	8004df2 <osMessagePut+0x72>
 8004dc8:	4b0c      	ldr	r3, [pc, #48]	; (8004dfc <osMessagePut+0x7c>)
 8004dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	e00b      	b.n	8004df2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004dda:	f107 0108 	add.w	r1, r7, #8
 8004dde:	2300      	movs	r3, #0
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fa6c 	bl	80052c0 <xQueueGenericSend>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d001      	beq.n	8004df2 <osMessagePut+0x72>
      return osErrorOS;
 8004dee:	23ff      	movs	r3, #255	; 0xff
 8004df0:	e000      	b.n	8004df4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	e000ed04 	.word	0xe000ed04

08004e00 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b08b      	sub	sp, #44	; 0x2c
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10a      	bne.n	8004e30 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	617b      	str	r3, [r7, #20]
    return event;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	461c      	mov	r4, r3
 8004e22:	f107 0314 	add.w	r3, r7, #20
 8004e26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004e2e:	e054      	b.n	8004eda <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e3e:	d103      	bne.n	8004e48 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	e009      	b.n	8004e5c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d006      	beq.n	8004e5c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <osMessageGet+0x5c>
      ticks = 1;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004e5c:	f7ff feef 	bl	8004c3e <inHandlerMode>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01c      	beq.n	8004ea0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004e66:	f107 0220 	add.w	r2, r7, #32
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4619      	mov	r1, r3
 8004e72:	68b8      	ldr	r0, [r7, #8]
 8004e74:	f000 fc9a 	bl	80057ac <xQueueReceiveFromISR>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d102      	bne.n	8004e84 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004e7e:	2310      	movs	r3, #16
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e001      	b.n	8004e88 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01d      	beq.n	8004eca <osMessageGet+0xca>
 8004e8e:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <osMessageGet+0xe4>)
 8004e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	f3bf 8f4f 	dsb	sy
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	e014      	b.n	8004eca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004ea0:	f107 0314 	add.w	r3, r7, #20
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	68b8      	ldr	r0, [r7, #8]
 8004eac:	f000 fb9e 	bl	80055ec <xQueueReceive>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004eb6:	2310      	movs	r3, #16
 8004eb8:	617b      	str	r3, [r7, #20]
 8004eba:	e006      	b.n	8004eca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <osMessageGet+0xc6>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e000      	b.n	8004ec8 <osMessageGet+0xc8>
 8004ec6:	2340      	movs	r3, #64	; 0x40
 8004ec8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	461c      	mov	r4, r3
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ed6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	372c      	adds	r7, #44	; 0x2c
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd90      	pop	{r4, r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f103 0208 	add.w	r2, r3, #8
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f04f 32ff 	mov.w	r2, #4294967295
 8004f00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f103 0208 	add.w	r2, r3, #8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f103 0208 	add.w	r2, r3, #8
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr

08004f3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	601a      	str	r2, [r3, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr

08004f84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9a:	d103      	bne.n	8004fa4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	e00c      	b.n	8004fbe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3308      	adds	r3, #8
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e002      	b.n	8004fb2 <vListInsert+0x2e>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d2f6      	bcs.n	8004fac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	1c5a      	adds	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]
}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr

08004ff4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6892      	ldr	r2, [r2, #8]
 800500a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6852      	ldr	r2, [r2, #4]
 8005014:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	429a      	cmp	r2, r3
 800501e:	d103      	bne.n	8005028 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	1e5a      	subs	r2, r3, #1
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bc80      	pop	{r7}
 8005044:	4770      	bx	lr
	...

08005048 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005072:	f001 fd1b 	bl	8006aac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005082:	fb01 f303 	mul.w	r3, r1, r3
 8005086:	441a      	add	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a2:	3b01      	subs	r3, #1
 80050a4:	68f9      	ldr	r1, [r7, #12]
 80050a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	441a      	add	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	22ff      	movs	r2, #255	; 0xff
 80050b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	22ff      	movs	r2, #255	; 0xff
 80050be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d114      	bne.n	80050f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01a      	beq.n	8005106 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	3310      	adds	r3, #16
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 f927 	bl	8006328 <xTaskRemoveFromEventList>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d012      	beq.n	8005106 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050e0:	4b0c      	ldr	r3, [pc, #48]	; (8005114 <xQueueGenericReset+0xcc>)
 80050e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	e009      	b.n	8005106 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	3310      	adds	r3, #16
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff fef6 	bl	8004ee8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3324      	adds	r3, #36	; 0x24
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff fef1 	bl	8004ee8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005106:	f001 fd01 	bl	8006b0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800510a:	2301      	movs	r3, #1
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08e      	sub	sp, #56	; 0x38
 800511c:	af02      	add	r7, sp, #8
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10a      	bne.n	8005142 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d10a      	bne.n	800515e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514c:	f383 8811 	msr	BASEPRI, r3
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	f3bf 8f4f 	dsb	sy
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
}
 800515a:	bf00      	nop
 800515c:	e7fe      	b.n	800515c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <xQueueGenericCreateStatic+0x52>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <xQueueGenericCreateStatic+0x56>
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <xQueueGenericCreateStatic+0x58>
 800516e:	2300      	movs	r3, #0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d10a      	bne.n	800518a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	623b      	str	r3, [r7, #32]
}
 8005186:	bf00      	nop
 8005188:	e7fe      	b.n	8005188 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <xQueueGenericCreateStatic+0x7e>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <xQueueGenericCreateStatic+0x82>
 8005196:	2301      	movs	r3, #1
 8005198:	e000      	b.n	800519c <xQueueGenericCreateStatic+0x84>
 800519a:	2300      	movs	r3, #0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10a      	bne.n	80051b6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	61fb      	str	r3, [r7, #28]
}
 80051b2:	bf00      	nop
 80051b4:	e7fe      	b.n	80051b4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80051b6:	2348      	movs	r3, #72	; 0x48
 80051b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b48      	cmp	r3, #72	; 0x48
 80051be:	d00a      	beq.n	80051d6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	61bb      	str	r3, [r7, #24]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00d      	beq.n	80051fc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051e8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 f843 	bl	8005282 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80051fe:	4618      	mov	r0, r3
 8005200:	3730      	adds	r7, #48	; 0x30
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005206:	b580      	push	{r7, lr}
 8005208:	b08a      	sub	sp, #40	; 0x28
 800520a:	af02      	add	r7, sp, #8
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	4613      	mov	r3, r2
 8005212:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10a      	bne.n	8005230 <xQueueGenericCreate+0x2a>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	613b      	str	r3, [r7, #16]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d102      	bne.n	800523c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e004      	b.n	8005246 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	fb02 f303 	mul.w	r3, r2, r3
 8005244:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3348      	adds	r3, #72	; 0x48
 800524a:	4618      	mov	r0, r3
 800524c:	f001 fd2e 	bl	8006cac <pvPortMalloc>
 8005250:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00f      	beq.n	8005278 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	3348      	adds	r3, #72	; 0x48
 800525c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005266:	79fa      	ldrb	r2, [r7, #7]
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	4613      	mov	r3, r2
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f805 	bl	8005282 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005278:	69bb      	ldr	r3, [r7, #24]
	}
 800527a:	4618      	mov	r0, r3
 800527c:	3720      	adds	r7, #32
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	60f8      	str	r0, [r7, #12]
 800528a:	60b9      	str	r1, [r7, #8]
 800528c:	607a      	str	r2, [r7, #4]
 800528e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d103      	bne.n	800529e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e002      	b.n	80052a4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052b0:	2101      	movs	r1, #1
 80052b2:	69b8      	ldr	r0, [r7, #24]
 80052b4:	f7ff fec8 	bl	8005048 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08e      	sub	sp, #56	; 0x38
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80052ce:	2300      	movs	r3, #0
 80052d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xQueueGenericSend+0x32>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d103      	bne.n	8005300 <xQueueGenericSend+0x40>
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <xQueueGenericSend+0x44>
 8005300:	2301      	movs	r3, #1
 8005302:	e000      	b.n	8005306 <xQueueGenericSend+0x46>
 8005304:	2300      	movs	r3, #0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <xQueueGenericSend+0x60>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800531c:	bf00      	nop
 800531e:	e7fe      	b.n	800531e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d103      	bne.n	800532e <xQueueGenericSend+0x6e>
 8005326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <xQueueGenericSend+0x72>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <xQueueGenericSend+0x74>
 8005332:	2300      	movs	r3, #0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <xQueueGenericSend+0x8e>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	623b      	str	r3, [r7, #32]
}
 800534a:	bf00      	nop
 800534c:	e7fe      	b.n	800534c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800534e:	f001 f9af 	bl	80066b0 <xTaskGetSchedulerState>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d102      	bne.n	800535e <xQueueGenericSend+0x9e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d101      	bne.n	8005362 <xQueueGenericSend+0xa2>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <xQueueGenericSend+0xa4>
 8005362:	2300      	movs	r3, #0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <xQueueGenericSend+0xbe>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	61fb      	str	r3, [r7, #28]
}
 800537a:	bf00      	nop
 800537c:	e7fe      	b.n	800537c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800537e:	f001 fb95 	bl	8006aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <xQueueGenericSend+0xd4>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b02      	cmp	r3, #2
 8005392:	d129      	bne.n	80053e8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800539a:	f000 fa87 	bl	80058ac <prvCopyDataToQueue>
 800539e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d010      	beq.n	80053ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053aa:	3324      	adds	r3, #36	; 0x24
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 ffbb 	bl	8006328 <xTaskRemoveFromEventList>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d013      	beq.n	80053e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80053b8:	4b3f      	ldr	r3, [pc, #252]	; (80054b8 <xQueueGenericSend+0x1f8>)
 80053ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	e00a      	b.n	80053e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80053d0:	4b39      	ldr	r3, [pc, #228]	; (80054b8 <xQueueGenericSend+0x1f8>)
 80053d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053e0:	f001 fb94 	bl	8006b0c <vPortExitCritical>
				return pdPASS;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e063      	b.n	80054b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053ee:	f001 fb8d 	bl	8006b0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e05c      	b.n	80054b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053fc:	f107 0314 	add.w	r3, r7, #20
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fff3 	bl	80063ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005406:	2301      	movs	r3, #1
 8005408:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800540a:	f001 fb7f 	bl	8006b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800540e:	f000 fd9d 	bl	8005f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005412:	f001 fb4b 	bl	8006aac <vPortEnterCritical>
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800541c:	b25b      	sxtb	r3, r3
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d103      	bne.n	800542c <xQueueGenericSend+0x16c>
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005432:	b25b      	sxtb	r3, r3
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d103      	bne.n	8005442 <xQueueGenericSend+0x182>
 800543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005442:	f001 fb63 	bl	8006b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005446:	1d3a      	adds	r2, r7, #4
 8005448:	f107 0314 	add.w	r3, r7, #20
 800544c:	4611      	mov	r1, r2
 800544e:	4618      	mov	r0, r3
 8005450:	f000 ffe2 	bl	8006418 <xTaskCheckForTimeOut>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d124      	bne.n	80054a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800545a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800545c:	f000 fb1e 	bl	8005a9c <prvIsQueueFull>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d018      	beq.n	8005498 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	3310      	adds	r3, #16
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f000 ff36 	bl	80062e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005476:	f000 faa9 	bl	80059cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800547a:	f000 fd75 	bl	8005f68 <xTaskResumeAll>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	f47f af7c 	bne.w	800537e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005486:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <xQueueGenericSend+0x1f8>)
 8005488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548c:	601a      	str	r2, [r3, #0]
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	e772      	b.n	800537e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005498:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800549a:	f000 fa97 	bl	80059cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800549e:	f000 fd63 	bl	8005f68 <xTaskResumeAll>
 80054a2:	e76c      	b.n	800537e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80054a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054a6:	f000 fa91 	bl	80059cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054aa:	f000 fd5d 	bl	8005f68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80054ae:	2300      	movs	r3, #0
		}
	}
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3738      	adds	r7, #56	; 0x38
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	e000ed04 	.word	0xe000ed04

080054bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08e      	sub	sp, #56	; 0x38
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
 80054c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80054d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
 80054e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80054e6:	bf00      	nop
 80054e8:	e7fe      	b.n	80054e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d103      	bne.n	80054f8 <xQueueGenericSendFromISR+0x3c>
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <xQueueGenericSendFromISR+0x40>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <xQueueGenericSendFromISR+0x42>
 80054fc:	2300      	movs	r3, #0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10a      	bne.n	8005518 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	623b      	str	r3, [r7, #32]
}
 8005514:	bf00      	nop
 8005516:	e7fe      	b.n	8005516 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	2b02      	cmp	r3, #2
 800551c:	d103      	bne.n	8005526 <xQueueGenericSendFromISR+0x6a>
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <xQueueGenericSendFromISR+0x6e>
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <xQueueGenericSendFromISR+0x70>
 800552a:	2300      	movs	r3, #0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10a      	bne.n	8005546 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	61fb      	str	r3, [r7, #28]
}
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005546:	f001 fb73 	bl	8006c30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800554a:	f3ef 8211 	mrs	r2, BASEPRI
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	61ba      	str	r2, [r7, #24]
 8005560:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005562:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <xQueueGenericSendFromISR+0xbc>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d12c      	bne.n	80055d2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800557e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005588:	f000 f990 	bl	80058ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800558c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005594:	d112      	bne.n	80055bc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559a:	2b00      	cmp	r3, #0
 800559c:	d016      	beq.n	80055cc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	3324      	adds	r3, #36	; 0x24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fec0 	bl	8006328 <xTaskRemoveFromEventList>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00e      	beq.n	80055cc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	e007      	b.n	80055cc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055c0:	3301      	adds	r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	b25a      	sxtb	r2, r3
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055cc:	2301      	movs	r3, #1
 80055ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80055d0:	e001      	b.n	80055d6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80055e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3738      	adds	r7, #56	; 0x38
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08c      	sub	sp, #48	; 0x30
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055f8:	2300      	movs	r3, #0
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10a      	bne.n	800561c <xQueueReceive+0x30>
	__asm volatile
 8005606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	623b      	str	r3, [r7, #32]
}
 8005618:	bf00      	nop
 800561a:	e7fe      	b.n	800561a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d103      	bne.n	800562a <xQueueReceive+0x3e>
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <xQueueReceive+0x42>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <xQueueReceive+0x44>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xQueueReceive+0x5e>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	61fb      	str	r3, [r7, #28]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800564a:	f001 f831 	bl	80066b0 <xTaskGetSchedulerState>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <xQueueReceive+0x6e>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <xQueueReceive+0x72>
 800565a:	2301      	movs	r3, #1
 800565c:	e000      	b.n	8005660 <xQueueReceive+0x74>
 800565e:	2300      	movs	r3, #0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <xQueueReceive+0x8e>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	61bb      	str	r3, [r7, #24]
}
 8005676:	bf00      	nop
 8005678:	e7fe      	b.n	8005678 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800567a:	f001 fa17 	bl	8006aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005682:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d01f      	beq.n	80056ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800568e:	f000 f977 	bl	8005980 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	1e5a      	subs	r2, r3, #1
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800569a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00f      	beq.n	80056c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	3310      	adds	r3, #16
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fe3e 	bl	8006328 <xTaskRemoveFromEventList>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80056b2:	4b3d      	ldr	r3, [pc, #244]	; (80057a8 <xQueueReceive+0x1bc>)
 80056b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056c2:	f001 fa23 	bl	8006b0c <vPortExitCritical>
				return pdPASS;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e069      	b.n	800579e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056d0:	f001 fa1c 	bl	8006b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056d4:	2300      	movs	r3, #0
 80056d6:	e062      	b.n	800579e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056de:	f107 0310 	add.w	r3, r7, #16
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fe82 	bl	80063ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056ec:	f001 fa0e 	bl	8006b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056f0:	f000 fc2c 	bl	8005f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056f4:	f001 f9da 	bl	8006aac <vPortEnterCritical>
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056fe:	b25b      	sxtb	r3, r3
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d103      	bne.n	800570e <xQueueReceive+0x122>
 8005706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005714:	b25b      	sxtb	r3, r3
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d103      	bne.n	8005724 <xQueueReceive+0x138>
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005724:	f001 f9f2 	bl	8006b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005728:	1d3a      	adds	r2, r7, #4
 800572a:	f107 0310 	add.w	r3, r7, #16
 800572e:	4611      	mov	r1, r2
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fe71 	bl	8006418 <xTaskCheckForTimeOut>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d123      	bne.n	8005784 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800573c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800573e:	f000 f997 	bl	8005a70 <prvIsQueueEmpty>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d017      	beq.n	8005778 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	3324      	adds	r3, #36	; 0x24
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4611      	mov	r1, r2
 8005750:	4618      	mov	r0, r3
 8005752:	f000 fdc5 	bl	80062e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005758:	f000 f938 	bl	80059cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800575c:	f000 fc04 	bl	8005f68 <xTaskResumeAll>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d189      	bne.n	800567a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005766:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <xQueueReceive+0x1bc>)
 8005768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	e780      	b.n	800567a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800577a:	f000 f927 	bl	80059cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800577e:	f000 fbf3 	bl	8005f68 <xTaskResumeAll>
 8005782:	e77a      	b.n	800567a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005786:	f000 f921 	bl	80059cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800578a:	f000 fbed 	bl	8005f68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800578e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005790:	f000 f96e 	bl	8005a70 <prvIsQueueEmpty>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	f43f af6f 	beq.w	800567a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800579c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3730      	adds	r7, #48	; 0x30
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08e      	sub	sp, #56	; 0x38
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	623b      	str	r3, [r7, #32]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d103      	bne.n	80057e6 <xQueueReceiveFromISR+0x3a>
 80057de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <xQueueReceiveFromISR+0x3e>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <xQueueReceiveFromISR+0x40>
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	61fb      	str	r3, [r7, #28]
}
 8005802:	bf00      	nop
 8005804:	e7fe      	b.n	8005804 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005806:	f001 fa13 	bl	8006c30 <vPortValidateInterruptPriority>
	__asm volatile
 800580a:	f3ef 8211 	mrs	r2, BASEPRI
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	61ba      	str	r2, [r7, #24]
 8005820:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005822:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	2b00      	cmp	r3, #0
 8005830:	d02f      	beq.n	8005892 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005834:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005840:	f000 f89e 	bl	8005980 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	1e5a      	subs	r2, r3, #1
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800584c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005854:	d112      	bne.n	800587c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d016      	beq.n	800588c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	3310      	adds	r3, #16
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fd60 	bl	8006328 <xTaskRemoveFromEventList>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00e      	beq.n	800588c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	e007      	b.n	800588c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800587c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005880:	3301      	adds	r3, #1
 8005882:	b2db      	uxtb	r3, r3
 8005884:	b25a      	sxtb	r2, r3
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800588c:	2301      	movs	r3, #1
 800588e:	637b      	str	r3, [r7, #52]	; 0x34
 8005890:	e001      	b.n	8005896 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005892:	2300      	movs	r3, #0
 8005894:	637b      	str	r3, [r7, #52]	; 0x34
 8005896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005898:	613b      	str	r3, [r7, #16]
	__asm volatile
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	f383 8811 	msr	BASEPRI, r3
}
 80058a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3738      	adds	r7, #56	; 0x38
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10d      	bne.n	80058e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d14d      	bne.n	800596e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 ff08 	bl	80066ec <xTaskPriorityDisinherit>
 80058dc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	605a      	str	r2, [r3, #4]
 80058e4:	e043      	b.n	800596e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d119      	bne.n	8005920 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6898      	ldr	r0, [r3, #8]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f4:	461a      	mov	r2, r3
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	f001 fc5a 	bl	80071b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689a      	ldr	r2, [r3, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	441a      	add	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	429a      	cmp	r2, r3
 8005914:	d32b      	bcc.n	800596e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	609a      	str	r2, [r3, #8]
 800591e:	e026      	b.n	800596e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68d8      	ldr	r0, [r3, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005928:	461a      	mov	r2, r3
 800592a:	68b9      	ldr	r1, [r7, #8]
 800592c:	f001 fc40 	bl	80071b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005938:	425b      	negs	r3, r3
 800593a:	441a      	add	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d207      	bcs.n	800595c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	685a      	ldr	r2, [r3, #4]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005954:	425b      	negs	r3, r3
 8005956:	441a      	add	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b02      	cmp	r3, #2
 8005960:	d105      	bne.n	800596e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	3b01      	subs	r3, #1
 800596c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005976:	697b      	ldr	r3, [r7, #20]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	2b00      	cmp	r3, #0
 8005990:	d018      	beq.n	80059c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	441a      	add	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d303      	bcc.n	80059b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	68d9      	ldr	r1, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059bc:	461a      	mov	r2, r3
 80059be:	6838      	ldr	r0, [r7, #0]
 80059c0:	f001 fbf6 	bl	80071b0 <memcpy>
	}
}
 80059c4:	bf00      	nop
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059d4:	f001 f86a 	bl	8006aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059e0:	e011      	b.n	8005a06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d012      	beq.n	8005a10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	3324      	adds	r3, #36	; 0x24
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fc9a 	bl	8006328 <xTaskRemoveFromEventList>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059fa:	f000 fd6f 	bl	80064dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059fe:	7bfb      	ldrb	r3, [r7, #15]
 8005a00:	3b01      	subs	r3, #1
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	dce9      	bgt.n	80059e2 <prvUnlockQueue+0x16>
 8005a0e:	e000      	b.n	8005a12 <prvUnlockQueue+0x46>
					break;
 8005a10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	22ff      	movs	r2, #255	; 0xff
 8005a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a1a:	f001 f877 	bl	8006b0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a1e:	f001 f845 	bl	8006aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a2a:	e011      	b.n	8005a50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d012      	beq.n	8005a5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3310      	adds	r3, #16
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 fc75 	bl	8006328 <xTaskRemoveFromEventList>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005a44:	f000 fd4a 	bl	80064dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	dce9      	bgt.n	8005a2c <prvUnlockQueue+0x60>
 8005a58:	e000      	b.n	8005a5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005a5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	22ff      	movs	r2, #255	; 0xff
 8005a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005a64:	f001 f852 	bl	8006b0c <vPortExitCritical>
}
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a78:	f001 f818 	bl	8006aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d102      	bne.n	8005a8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	e001      	b.n	8005a8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a8e:	f001 f83d 	bl	8006b0c <vPortExitCritical>

	return xReturn;
 8005a92:	68fb      	ldr	r3, [r7, #12]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005aa4:	f001 f802 	bl	8006aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d102      	bne.n	8005aba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	e001      	b.n	8005abe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005abe:	f001 f825 	bl	8006b0c <vPortExitCritical>

	return xReturn;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08e      	sub	sp, #56	; 0x38
 8005ad0:	af04      	add	r7, sp, #16
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	623b      	str	r3, [r7, #32]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xTaskCreateStatic+0x46>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	61fb      	str	r3, [r7, #28]
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b12:	23a0      	movs	r3, #160	; 0xa0
 8005b14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2ba0      	cmp	r3, #160	; 0xa0
 8005b1a:	d00a      	beq.n	8005b32 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	61bb      	str	r3, [r7, #24]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01e      	beq.n	8005b76 <xTaskCreateStatic+0xaa>
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d01b      	beq.n	8005b76 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b50:	2300      	movs	r3, #0
 8005b52:	9303      	str	r3, [sp, #12]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	9302      	str	r3, [sp, #8]
 8005b58:	f107 0314 	add.w	r3, r7, #20
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f851 	bl	8005c10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b70:	f000 f8e4 	bl	8005d3c <prvAddNewTaskToReadyList>
 8005b74:	e001      	b.n	8005b7a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b7a:	697b      	ldr	r3, [r7, #20]
	}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3728      	adds	r7, #40	; 0x28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b08c      	sub	sp, #48	; 0x30
 8005b88:	af04      	add	r7, sp, #16
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b94:	88fb      	ldrh	r3, [r7, #6]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 f887 	bl	8006cac <pvPortMalloc>
 8005b9e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00e      	beq.n	8005bc4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005ba6:	20a0      	movs	r0, #160	; 0xa0
 8005ba8:	f001 f880 	bl	8006cac <pvPortMalloc>
 8005bac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
 8005bba:	e005      	b.n	8005bc8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bbc:	6978      	ldr	r0, [r7, #20]
 8005bbe:	f001 f939 	bl	8006e34 <vPortFree>
 8005bc2:	e001      	b.n	8005bc8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d017      	beq.n	8005bfe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bd6:	88fa      	ldrh	r2, [r7, #6]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	9302      	str	r3, [sp, #8]
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be6:	9300      	str	r3, [sp, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 f80f 	bl	8005c10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bf2:	69f8      	ldr	r0, [r7, #28]
 8005bf4:	f000 f8a2 	bl	8005d3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	61bb      	str	r3, [r7, #24]
 8005bfc:	e002      	b.n	8005c04 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8005c02:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c04:	69bb      	ldr	r3, [r7, #24]
	}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
	...

08005c10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f023 0307 	bic.w	r3, r3, #7
 8005c36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00a      	beq.n	8005c58 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	617b      	str	r3, [r7, #20]
}
 8005c54:	bf00      	nop
 8005c56:	e7fe      	b.n	8005c56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]
 8005c5c:	e012      	b.n	8005c84 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c5e:	68ba      	ldr	r2, [r7, #8]
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	4413      	add	r3, r2
 8005c64:	7819      	ldrb	r1, [r3, #0]
 8005c66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	3334      	adds	r3, #52	; 0x34
 8005c6e:	460a      	mov	r2, r1
 8005c70:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d006      	beq.n	8005c8c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3301      	adds	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	2b0f      	cmp	r3, #15
 8005c88:	d9e9      	bls.n	8005c5e <prvInitialiseNewTask+0x4e>
 8005c8a:	e000      	b.n	8005c8e <prvInitialiseNewTask+0x7e>
		{
			break;
 8005c8c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	2b06      	cmp	r3, #6
 8005c9a:	d901      	bls.n	8005ca0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c9c:	2306      	movs	r3, #6
 8005c9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005caa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	2200      	movs	r2, #0
 8005cb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7ff f935 	bl	8004f26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbe:	3318      	adds	r3, #24
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7ff f930 	bl	8004f26 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	f1c3 0207 	rsb	r2, r3, #7
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	334c      	adds	r3, #76	; 0x4c
 8005cf0:	224c      	movs	r2, #76	; 0x4c
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 f9d1 	bl	800709c <memset>
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	4a0c      	ldr	r2, [pc, #48]	; (8005d30 <prvInitialiseNewTask+0x120>)
 8005cfe:	651a      	str	r2, [r3, #80]	; 0x50
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <prvInitialiseNewTask+0x124>)
 8005d04:	655a      	str	r2, [r3, #84]	; 0x54
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	4a0b      	ldr	r2, [pc, #44]	; (8005d38 <prvInitialiseNewTask+0x128>)
 8005d0a:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	69b8      	ldr	r0, [r7, #24]
 8005d12:	f000 fdd7 	bl	80068c4 <pxPortInitialiseStack>
 8005d16:	4602      	mov	r2, r0
 8005d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d28:	bf00      	nop
 8005d2a:	3720      	adds	r7, #32
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20001154 	.word	0x20001154
 8005d34:	200011bc 	.word	0x200011bc
 8005d38:	20001224 	.word	0x20001224

08005d3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d44:	f000 feb2 	bl	8006aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d48:	4b2a      	ldr	r3, [pc, #168]	; (8005df4 <prvAddNewTaskToReadyList+0xb8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	4a29      	ldr	r2, [pc, #164]	; (8005df4 <prvAddNewTaskToReadyList+0xb8>)
 8005d50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d52:	4b29      	ldr	r3, [pc, #164]	; (8005df8 <prvAddNewTaskToReadyList+0xbc>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d5a:	4a27      	ldr	r2, [pc, #156]	; (8005df8 <prvAddNewTaskToReadyList+0xbc>)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d60:	4b24      	ldr	r3, [pc, #144]	; (8005df4 <prvAddNewTaskToReadyList+0xb8>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d110      	bne.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d68:	f000 fbdc 	bl	8006524 <prvInitialiseTaskLists>
 8005d6c:	e00d      	b.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d6e:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <prvAddNewTaskToReadyList+0xc0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d76:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <prvAddNewTaskToReadyList+0xbc>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d802      	bhi.n	8005d8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d84:	4a1c      	ldr	r2, [pc, #112]	; (8005df8 <prvAddNewTaskToReadyList+0xbc>)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d8a:	4b1d      	ldr	r3, [pc, #116]	; (8005e00 <prvAddNewTaskToReadyList+0xc4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <prvAddNewTaskToReadyList+0xc4>)
 8005d92:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	2201      	movs	r2, #1
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	4b19      	ldr	r3, [pc, #100]	; (8005e04 <prvAddNewTaskToReadyList+0xc8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <prvAddNewTaskToReadyList+0xc8>)
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4a15      	ldr	r2, [pc, #84]	; (8005e08 <prvAddNewTaskToReadyList+0xcc>)
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f7ff f8be 	bl	8004f3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005dc2:	f000 fea3 	bl	8006b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <prvAddNewTaskToReadyList+0xc0>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dce:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <prvAddNewTaskToReadyList+0xbc>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d207      	bcs.n	8005dec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <prvAddNewTaskToReadyList+0xd0>)
 8005dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20000508 	.word	0x20000508
 8005df8:	20000408 	.word	0x20000408
 8005dfc:	20000514 	.word	0x20000514
 8005e00:	20000524 	.word	0x20000524
 8005e04:	20000510 	.word	0x20000510
 8005e08:	2000040c 	.word	0x2000040c
 8005e0c:	e000ed04 	.word	0xe000ed04

08005e10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d017      	beq.n	8005e52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <vTaskDelay+0x60>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <vTaskDelay+0x30>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	60bb      	str	r3, [r7, #8]
}
 8005e3c:	bf00      	nop
 8005e3e:	e7fe      	b.n	8005e3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e40:	f000 f884 	bl	8005f4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e44:	2100      	movs	r1, #0
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fcd6 	bl	80067f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e4c:	f000 f88c 	bl	8005f68 <xTaskResumeAll>
 8005e50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d107      	bne.n	8005e68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <vTaskDelay+0x64>)
 8005e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20000530 	.word	0x20000530
 8005e74:	e000ed04 	.word	0xe000ed04

08005e78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08a      	sub	sp, #40	; 0x28
 8005e7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e86:	463a      	mov	r2, r7
 8005e88:	1d39      	adds	r1, r7, #4
 8005e8a:	f107 0308 	add.w	r3, r7, #8
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fa fc0e 	bl	80006b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e94:	6839      	ldr	r1, [r7, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	9202      	str	r2, [sp, #8]
 8005e9c:	9301      	str	r3, [sp, #4]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9300      	str	r3, [sp, #0]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	460a      	mov	r2, r1
 8005ea6:	4921      	ldr	r1, [pc, #132]	; (8005f2c <vTaskStartScheduler+0xb4>)
 8005ea8:	4821      	ldr	r0, [pc, #132]	; (8005f30 <vTaskStartScheduler+0xb8>)
 8005eaa:	f7ff fe0f 	bl	8005acc <xTaskCreateStatic>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4a20      	ldr	r2, [pc, #128]	; (8005f34 <vTaskStartScheduler+0xbc>)
 8005eb2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005eb4:	4b1f      	ldr	r3, [pc, #124]	; (8005f34 <vTaskStartScheduler+0xbc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	e001      	b.n	8005ec6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d11b      	bne.n	8005f04 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	613b      	str	r3, [r7, #16]
}
 8005ede:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ee0:	4b15      	ldr	r3, [pc, #84]	; (8005f38 <vTaskStartScheduler+0xc0>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	334c      	adds	r3, #76	; 0x4c
 8005ee6:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <vTaskStartScheduler+0xc4>)
 8005ee8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005eea:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <vTaskStartScheduler+0xc8>)
 8005eec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ef2:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <vTaskStartScheduler+0xcc>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005ef8:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <vTaskStartScheduler+0xd0>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005efe:	f000 fd63 	bl	80069c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f02:	e00e      	b.n	8005f22 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f0a:	d10a      	bne.n	8005f22 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	60fb      	str	r3, [r7, #12]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <vTaskStartScheduler+0xa8>
}
 8005f22:	bf00      	nop
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	08007b58 	.word	0x08007b58
 8005f30:	080064f5 	.word	0x080064f5
 8005f34:	2000052c 	.word	0x2000052c
 8005f38:	20000408 	.word	0x20000408
 8005f3c:	20000064 	.word	0x20000064
 8005f40:	20000528 	.word	0x20000528
 8005f44:	20000514 	.word	0x20000514
 8005f48:	2000050c 	.word	0x2000050c

08005f4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f50:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <vTaskSuspendAll+0x18>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3301      	adds	r3, #1
 8005f56:	4a03      	ldr	r2, [pc, #12]	; (8005f64 <vTaskSuspendAll+0x18>)
 8005f58:	6013      	str	r3, [r2, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bc80      	pop	{r7}
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20000530 	.word	0x20000530

08005f68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f76:	4b41      	ldr	r3, [pc, #260]	; (800607c <xTaskResumeAll+0x114>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	603b      	str	r3, [r7, #0]
}
 8005f90:	bf00      	nop
 8005f92:	e7fe      	b.n	8005f92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f94:	f000 fd8a 	bl	8006aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f98:	4b38      	ldr	r3, [pc, #224]	; (800607c <xTaskResumeAll+0x114>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	4a37      	ldr	r2, [pc, #220]	; (800607c <xTaskResumeAll+0x114>)
 8005fa0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa2:	4b36      	ldr	r3, [pc, #216]	; (800607c <xTaskResumeAll+0x114>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d161      	bne.n	800606e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005faa:	4b35      	ldr	r3, [pc, #212]	; (8006080 <xTaskResumeAll+0x118>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d05d      	beq.n	800606e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fb2:	e02e      	b.n	8006012 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005fb4:	4b33      	ldr	r3, [pc, #204]	; (8006084 <xTaskResumeAll+0x11c>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3318      	adds	r3, #24
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff f817 	bl	8004ff4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff f812 	bl	8004ff4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	409a      	lsls	r2, r3
 8005fd8:	4b2b      	ldr	r3, [pc, #172]	; (8006088 <xTaskResumeAll+0x120>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	4a2a      	ldr	r2, [pc, #168]	; (8006088 <xTaskResumeAll+0x120>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4a27      	ldr	r2, [pc, #156]	; (800608c <xTaskResumeAll+0x124>)
 8005ff0:	441a      	add	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f7fe ffa0 	bl	8004f3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006002:	4b23      	ldr	r3, [pc, #140]	; (8006090 <xTaskResumeAll+0x128>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	429a      	cmp	r2, r3
 800600a:	d302      	bcc.n	8006012 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800600c:	4b21      	ldr	r3, [pc, #132]	; (8006094 <xTaskResumeAll+0x12c>)
 800600e:	2201      	movs	r2, #1
 8006010:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006012:	4b1c      	ldr	r3, [pc, #112]	; (8006084 <xTaskResumeAll+0x11c>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1cc      	bne.n	8005fb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006020:	f000 fb22 	bl	8006668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006024:	4b1c      	ldr	r3, [pc, #112]	; (8006098 <xTaskResumeAll+0x130>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d010      	beq.n	8006052 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006030:	f000 f836 	bl	80060a0 <xTaskIncrementTick>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800603a:	4b16      	ldr	r3, [pc, #88]	; (8006094 <xTaskResumeAll+0x12c>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3b01      	subs	r3, #1
 8006044:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1f1      	bne.n	8006030 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800604c:	4b12      	ldr	r3, [pc, #72]	; (8006098 <xTaskResumeAll+0x130>)
 800604e:	2200      	movs	r2, #0
 8006050:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006052:	4b10      	ldr	r3, [pc, #64]	; (8006094 <xTaskResumeAll+0x12c>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d009      	beq.n	800606e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800605a:	2301      	movs	r3, #1
 800605c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800605e:	4b0f      	ldr	r3, [pc, #60]	; (800609c <xTaskResumeAll+0x134>)
 8006060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800606e:	f000 fd4d 	bl	8006b0c <vPortExitCritical>

	return xAlreadyYielded;
 8006072:	68bb      	ldr	r3, [r7, #8]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20000530 	.word	0x20000530
 8006080:	20000508 	.word	0x20000508
 8006084:	200004c8 	.word	0x200004c8
 8006088:	20000510 	.word	0x20000510
 800608c:	2000040c 	.word	0x2000040c
 8006090:	20000408 	.word	0x20000408
 8006094:	2000051c 	.word	0x2000051c
 8006098:	20000518 	.word	0x20000518
 800609c:	e000ed04 	.word	0xe000ed04

080060a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060aa:	4b51      	ldr	r3, [pc, #324]	; (80061f0 <xTaskIncrementTick+0x150>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f040 808d 	bne.w	80061ce <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060b4:	4b4f      	ldr	r3, [pc, #316]	; (80061f4 <xTaskIncrementTick+0x154>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3301      	adds	r3, #1
 80060ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060bc:	4a4d      	ldr	r2, [pc, #308]	; (80061f4 <xTaskIncrementTick+0x154>)
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d120      	bne.n	800610a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060c8:	4b4b      	ldr	r3, [pc, #300]	; (80061f8 <xTaskIncrementTick+0x158>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	603b      	str	r3, [r7, #0]
}
 80060e4:	bf00      	nop
 80060e6:	e7fe      	b.n	80060e6 <xTaskIncrementTick+0x46>
 80060e8:	4b43      	ldr	r3, [pc, #268]	; (80061f8 <xTaskIncrementTick+0x158>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	4b43      	ldr	r3, [pc, #268]	; (80061fc <xTaskIncrementTick+0x15c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a41      	ldr	r2, [pc, #260]	; (80061f8 <xTaskIncrementTick+0x158>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	4a41      	ldr	r2, [pc, #260]	; (80061fc <xTaskIncrementTick+0x15c>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	4b40      	ldr	r3, [pc, #256]	; (8006200 <xTaskIncrementTick+0x160>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3301      	adds	r3, #1
 8006102:	4a3f      	ldr	r2, [pc, #252]	; (8006200 <xTaskIncrementTick+0x160>)
 8006104:	6013      	str	r3, [r2, #0]
 8006106:	f000 faaf 	bl	8006668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800610a:	4b3e      	ldr	r3, [pc, #248]	; (8006204 <xTaskIncrementTick+0x164>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	429a      	cmp	r2, r3
 8006112:	d34d      	bcc.n	80061b0 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006114:	4b38      	ldr	r3, [pc, #224]	; (80061f8 <xTaskIncrementTick+0x158>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <xTaskIncrementTick+0x82>
 800611e:	2301      	movs	r3, #1
 8006120:	e000      	b.n	8006124 <xTaskIncrementTick+0x84>
 8006122:	2300      	movs	r3, #0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d004      	beq.n	8006132 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006128:	4b36      	ldr	r3, [pc, #216]	; (8006204 <xTaskIncrementTick+0x164>)
 800612a:	f04f 32ff 	mov.w	r2, #4294967295
 800612e:	601a      	str	r2, [r3, #0]
					break;
 8006130:	e03e      	b.n	80061b0 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006132:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <xTaskIncrementTick+0x158>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	429a      	cmp	r2, r3
 8006148:	d203      	bcs.n	8006152 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800614a:	4a2e      	ldr	r2, [pc, #184]	; (8006204 <xTaskIncrementTick+0x164>)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6013      	str	r3, [r2, #0]
						break;
 8006150:	e02e      	b.n	80061b0 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	3304      	adds	r3, #4
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe ff4c 	bl	8004ff4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	3318      	adds	r3, #24
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe ff43 	bl	8004ff4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006172:	2201      	movs	r2, #1
 8006174:	409a      	lsls	r2, r3
 8006176:	4b24      	ldr	r3, [pc, #144]	; (8006208 <xTaskIncrementTick+0x168>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4313      	orrs	r3, r2
 800617c:	4a22      	ldr	r2, [pc, #136]	; (8006208 <xTaskIncrementTick+0x168>)
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4a1f      	ldr	r2, [pc, #124]	; (800620c <xTaskIncrementTick+0x16c>)
 800618e:	441a      	add	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f7fe fed1 	bl	8004f3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	4b1b      	ldr	r3, [pc, #108]	; (8006210 <xTaskIncrementTick+0x170>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d3b4      	bcc.n	8006114 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061aa:	2301      	movs	r3, #1
 80061ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061ae:	e7b1      	b.n	8006114 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061b0:	4b17      	ldr	r3, [pc, #92]	; (8006210 <xTaskIncrementTick+0x170>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b6:	4915      	ldr	r1, [pc, #84]	; (800620c <xTaskIncrementTick+0x16c>)
 80061b8:	4613      	mov	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4413      	add	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	440b      	add	r3, r1
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d907      	bls.n	80061d8 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80061c8:	2301      	movs	r3, #1
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	e004      	b.n	80061d8 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061ce:	4b11      	ldr	r3, [pc, #68]	; (8006214 <xTaskIncrementTick+0x174>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3301      	adds	r3, #1
 80061d4:	4a0f      	ldr	r2, [pc, #60]	; (8006214 <xTaskIncrementTick+0x174>)
 80061d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80061d8:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <xTaskIncrementTick+0x178>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d001      	beq.n	80061e4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80061e0:	2301      	movs	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061e4:	697b      	ldr	r3, [r7, #20]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000530 	.word	0x20000530
 80061f4:	2000050c 	.word	0x2000050c
 80061f8:	200004c0 	.word	0x200004c0
 80061fc:	200004c4 	.word	0x200004c4
 8006200:	20000520 	.word	0x20000520
 8006204:	20000528 	.word	0x20000528
 8006208:	20000510 	.word	0x20000510
 800620c:	2000040c 	.word	0x2000040c
 8006210:	20000408 	.word	0x20000408
 8006214:	20000518 	.word	0x20000518
 8006218:	2000051c 	.word	0x2000051c

0800621c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006222:	4b29      	ldr	r3, [pc, #164]	; (80062c8 <vTaskSwitchContext+0xac>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800622a:	4b28      	ldr	r3, [pc, #160]	; (80062cc <vTaskSwitchContext+0xb0>)
 800622c:	2201      	movs	r2, #1
 800622e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006230:	e044      	b.n	80062bc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006232:	4b26      	ldr	r3, [pc, #152]	; (80062cc <vTaskSwitchContext+0xb0>)
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006238:	4b25      	ldr	r3, [pc, #148]	; (80062d0 <vTaskSwitchContext+0xb4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	fab3 f383 	clz	r3, r3
 8006244:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006246:	7afb      	ldrb	r3, [r7, #11]
 8006248:	f1c3 031f 	rsb	r3, r3, #31
 800624c:	617b      	str	r3, [r7, #20]
 800624e:	4921      	ldr	r1, [pc, #132]	; (80062d4 <vTaskSwitchContext+0xb8>)
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4613      	mov	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	440b      	add	r3, r1
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <vTaskSwitchContext+0x5c>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	607b      	str	r3, [r7, #4]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <vTaskSwitchContext+0x5a>
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4a14      	ldr	r2, [pc, #80]	; (80062d4 <vTaskSwitchContext+0xb8>)
 8006284:	4413      	add	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	685a      	ldr	r2, [r3, #4]
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	605a      	str	r2, [r3, #4]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	3308      	adds	r3, #8
 800629a:	429a      	cmp	r2, r3
 800629c:	d104      	bne.n	80062a8 <vTaskSwitchContext+0x8c>
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	605a      	str	r2, [r3, #4]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	4a0a      	ldr	r2, [pc, #40]	; (80062d8 <vTaskSwitchContext+0xbc>)
 80062b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062b2:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <vTaskSwitchContext+0xbc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	334c      	adds	r3, #76	; 0x4c
 80062b8:	4a08      	ldr	r2, [pc, #32]	; (80062dc <vTaskSwitchContext+0xc0>)
 80062ba:	6013      	str	r3, [r2, #0]
}
 80062bc:	bf00      	nop
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bc80      	pop	{r7}
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	20000530 	.word	0x20000530
 80062cc:	2000051c 	.word	0x2000051c
 80062d0:	20000510 	.word	0x20000510
 80062d4:	2000040c 	.word	0x2000040c
 80062d8:	20000408 	.word	0x20000408
 80062dc:	20000064 	.word	0x20000064

080062e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	60fb      	str	r3, [r7, #12]
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006306:	4b07      	ldr	r3, [pc, #28]	; (8006324 <vTaskPlaceOnEventList+0x44>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3318      	adds	r3, #24
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fe fe38 	bl	8004f84 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006314:	2101      	movs	r1, #1
 8006316:	6838      	ldr	r0, [r7, #0]
 8006318:	f000 fa6e 	bl	80067f8 <prvAddCurrentTaskToDelayedList>
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20000408 	.word	0x20000408

08006328 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10a      	bne.n	8006354 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	60fb      	str	r3, [r7, #12]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	3318      	adds	r3, #24
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe fe4b 	bl	8004ff4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800635e:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <xTaskRemoveFromEventList+0xac>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d11c      	bne.n	80063a0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	3304      	adds	r3, #4
 800636a:	4618      	mov	r0, r3
 800636c:	f7fe fe42 	bl	8004ff4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006374:	2201      	movs	r2, #1
 8006376:	409a      	lsls	r2, r3
 8006378:	4b17      	ldr	r3, [pc, #92]	; (80063d8 <xTaskRemoveFromEventList+0xb0>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4313      	orrs	r3, r2
 800637e:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <xTaskRemoveFromEventList+0xb0>)
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006386:	4613      	mov	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4a13      	ldr	r2, [pc, #76]	; (80063dc <xTaskRemoveFromEventList+0xb4>)
 8006390:	441a      	add	r2, r3
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	3304      	adds	r3, #4
 8006396:	4619      	mov	r1, r3
 8006398:	4610      	mov	r0, r2
 800639a:	f7fe fdd0 	bl	8004f3e <vListInsertEnd>
 800639e:	e005      	b.n	80063ac <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	3318      	adds	r3, #24
 80063a4:	4619      	mov	r1, r3
 80063a6:	480e      	ldr	r0, [pc, #56]	; (80063e0 <xTaskRemoveFromEventList+0xb8>)
 80063a8:	f7fe fdc9 	bl	8004f3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <xTaskRemoveFromEventList+0xbc>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d905      	bls.n	80063c6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063ba:	2301      	movs	r3, #1
 80063bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063be:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <xTaskRemoveFromEventList+0xc0>)
 80063c0:	2201      	movs	r2, #1
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	e001      	b.n	80063ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80063ca:	697b      	ldr	r3, [r7, #20]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000530 	.word	0x20000530
 80063d8:	20000510 	.word	0x20000510
 80063dc:	2000040c 	.word	0x2000040c
 80063e0:	200004c8 	.word	0x200004c8
 80063e4:	20000408 	.word	0x20000408
 80063e8:	2000051c 	.word	0x2000051c

080063ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <vTaskInternalSetTimeOutState+0x24>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063fc:	4b05      	ldr	r3, [pc, #20]	; (8006414 <vTaskInternalSetTimeOutState+0x28>)
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	605a      	str	r2, [r3, #4]
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	bc80      	pop	{r7}
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	20000520 	.word	0x20000520
 8006414:	2000050c 	.word	0x2000050c

08006418 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	613b      	str	r3, [r7, #16]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d10a      	bne.n	800645a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	60fb      	str	r3, [r7, #12]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800645a:	f000 fb27 	bl	8006aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800645e:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <xTaskCheckForTimeOut+0xbc>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006476:	d102      	bne.n	800647e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006478:	2300      	movs	r3, #0
 800647a:	61fb      	str	r3, [r7, #28]
 800647c:	e023      	b.n	80064c6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4b15      	ldr	r3, [pc, #84]	; (80064d8 <xTaskCheckForTimeOut+0xc0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d007      	beq.n	800649a <xTaskCheckForTimeOut+0x82>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	429a      	cmp	r2, r3
 8006492:	d302      	bcc.n	800649a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006494:	2301      	movs	r3, #1
 8006496:	61fb      	str	r3, [r7, #28]
 8006498:	e015      	b.n	80064c6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d20b      	bcs.n	80064bc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	1ad2      	subs	r2, r2, r3
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff ff9b 	bl	80063ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e004      	b.n	80064c6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064c6:	f000 fb21 	bl	8006b0c <vPortExitCritical>

	return xReturn;
 80064ca:	69fb      	ldr	r3, [r7, #28]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3720      	adds	r7, #32
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	2000050c 	.word	0x2000050c
 80064d8:	20000520 	.word	0x20000520

080064dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064e0:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <vTaskMissedYield+0x14>)
 80064e2:	2201      	movs	r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
}
 80064e6:	bf00      	nop
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	2000051c 	.word	0x2000051c

080064f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064fc:	f000 f852 	bl	80065a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <prvIdleTask+0x28>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d9f9      	bls.n	80064fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006508:	4b05      	ldr	r3, [pc, #20]	; (8006520 <prvIdleTask+0x2c>)
 800650a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800650e:	601a      	str	r2, [r3, #0]
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006518:	e7f0      	b.n	80064fc <prvIdleTask+0x8>
 800651a:	bf00      	nop
 800651c:	2000040c 	.word	0x2000040c
 8006520:	e000ed04 	.word	0xe000ed04

08006524 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800652a:	2300      	movs	r3, #0
 800652c:	607b      	str	r3, [r7, #4]
 800652e:	e00c      	b.n	800654a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4a12      	ldr	r2, [pc, #72]	; (8006584 <prvInitialiseTaskLists+0x60>)
 800653c:	4413      	add	r3, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fcd2 	bl	8004ee8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3301      	adds	r3, #1
 8006548:	607b      	str	r3, [r7, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b06      	cmp	r3, #6
 800654e:	d9ef      	bls.n	8006530 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006550:	480d      	ldr	r0, [pc, #52]	; (8006588 <prvInitialiseTaskLists+0x64>)
 8006552:	f7fe fcc9 	bl	8004ee8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006556:	480d      	ldr	r0, [pc, #52]	; (800658c <prvInitialiseTaskLists+0x68>)
 8006558:	f7fe fcc6 	bl	8004ee8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800655c:	480c      	ldr	r0, [pc, #48]	; (8006590 <prvInitialiseTaskLists+0x6c>)
 800655e:	f7fe fcc3 	bl	8004ee8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006562:	480c      	ldr	r0, [pc, #48]	; (8006594 <prvInitialiseTaskLists+0x70>)
 8006564:	f7fe fcc0 	bl	8004ee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006568:	480b      	ldr	r0, [pc, #44]	; (8006598 <prvInitialiseTaskLists+0x74>)
 800656a:	f7fe fcbd 	bl	8004ee8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800656e:	4b0b      	ldr	r3, [pc, #44]	; (800659c <prvInitialiseTaskLists+0x78>)
 8006570:	4a05      	ldr	r2, [pc, #20]	; (8006588 <prvInitialiseTaskLists+0x64>)
 8006572:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006574:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <prvInitialiseTaskLists+0x7c>)
 8006576:	4a05      	ldr	r2, [pc, #20]	; (800658c <prvInitialiseTaskLists+0x68>)
 8006578:	601a      	str	r2, [r3, #0]
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	2000040c 	.word	0x2000040c
 8006588:	20000498 	.word	0x20000498
 800658c:	200004ac 	.word	0x200004ac
 8006590:	200004c8 	.word	0x200004c8
 8006594:	200004dc 	.word	0x200004dc
 8006598:	200004f4 	.word	0x200004f4
 800659c:	200004c0 	.word	0x200004c0
 80065a0:	200004c4 	.word	0x200004c4

080065a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065aa:	e019      	b.n	80065e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065ac:	f000 fa7e 	bl	8006aac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065b0:	4b10      	ldr	r3, [pc, #64]	; (80065f4 <prvCheckTasksWaitingTermination+0x50>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe fd19 	bl	8004ff4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065c2:	4b0d      	ldr	r3, [pc, #52]	; (80065f8 <prvCheckTasksWaitingTermination+0x54>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	4a0b      	ldr	r2, [pc, #44]	; (80065f8 <prvCheckTasksWaitingTermination+0x54>)
 80065ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <prvCheckTasksWaitingTermination+0x58>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <prvCheckTasksWaitingTermination+0x58>)
 80065d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065d6:	f000 fa99 	bl	8006b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f810 	bl	8006600 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <prvCheckTasksWaitingTermination+0x58>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e1      	bne.n	80065ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	200004dc 	.word	0x200004dc
 80065f8:	20000508 	.word	0x20000508
 80065fc:	200004f0 	.word	0x200004f0

08006600 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	334c      	adds	r3, #76	; 0x4c
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fd4d 	bl	80070ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006618:	2b00      	cmp	r3, #0
 800661a:	d108      	bne.n	800662e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fc07 	bl	8006e34 <vPortFree>
				vPortFree( pxTCB );
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fc04 	bl	8006e34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800662c:	e018      	b.n	8006660 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006634:	2b01      	cmp	r3, #1
 8006636:	d103      	bne.n	8006640 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 fbfb 	bl	8006e34 <vPortFree>
	}
 800663e:	e00f      	b.n	8006660 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8006646:	2b02      	cmp	r3, #2
 8006648:	d00a      	beq.n	8006660 <prvDeleteTCB+0x60>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	60fb      	str	r3, [r7, #12]
}
 800665c:	bf00      	nop
 800665e:	e7fe      	b.n	800665e <prvDeleteTCB+0x5e>
	}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800666e:	4b0e      	ldr	r3, [pc, #56]	; (80066a8 <prvResetNextTaskUnblockTime+0x40>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <prvResetNextTaskUnblockTime+0x14>
 8006678:	2301      	movs	r3, #1
 800667a:	e000      	b.n	800667e <prvResetNextTaskUnblockTime+0x16>
 800667c:	2300      	movs	r3, #0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d004      	beq.n	800668c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <prvResetNextTaskUnblockTime+0x44>)
 8006684:	f04f 32ff 	mov.w	r2, #4294967295
 8006688:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800668a:	e008      	b.n	800669e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <prvResetNextTaskUnblockTime+0x40>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	4a04      	ldr	r2, [pc, #16]	; (80066ac <prvResetNextTaskUnblockTime+0x44>)
 800669c:	6013      	str	r3, [r2, #0]
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bc80      	pop	{r7}
 80066a6:	4770      	bx	lr
 80066a8:	200004c0 	.word	0x200004c0
 80066ac:	20000528 	.word	0x20000528

080066b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066b6:	4b0b      	ldr	r3, [pc, #44]	; (80066e4 <xTaskGetSchedulerState+0x34>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d102      	bne.n	80066c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066be:	2301      	movs	r3, #1
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	e008      	b.n	80066d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066c4:	4b08      	ldr	r3, [pc, #32]	; (80066e8 <xTaskGetSchedulerState+0x38>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d102      	bne.n	80066d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066cc:	2302      	movs	r3, #2
 80066ce:	607b      	str	r3, [r7, #4]
 80066d0:	e001      	b.n	80066d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066d2:	2300      	movs	r3, #0
 80066d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066d6:	687b      	ldr	r3, [r7, #4]
	}
 80066d8:	4618      	mov	r0, r3
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc80      	pop	{r7}
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	20000514 	.word	0x20000514
 80066e8:	20000530 	.word	0x20000530

080066ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066f8:	2300      	movs	r3, #0
 80066fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d06e      	beq.n	80067e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006702:	4b3a      	ldr	r3, [pc, #232]	; (80067ec <xTaskPriorityDisinherit+0x100>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	429a      	cmp	r2, r3
 800670a:	d00a      	beq.n	8006722 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800670c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	60fb      	str	r3, [r7, #12]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	60bb      	str	r3, [r7, #8]
}
 800673c:	bf00      	nop
 800673e:	e7fe      	b.n	800673e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006744:	1e5a      	subs	r2, r3, #1
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006752:	429a      	cmp	r2, r3
 8006754:	d044      	beq.n	80067e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675a:	2b00      	cmp	r3, #0
 800675c:	d140      	bne.n	80067e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3304      	adds	r3, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe fc46 	bl	8004ff4 <uxListRemove>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d115      	bne.n	800679a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006772:	491f      	ldr	r1, [pc, #124]	; (80067f0 <xTaskPriorityDisinherit+0x104>)
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <xTaskPriorityDisinherit+0xae>
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	2201      	movs	r2, #1
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	43da      	mvns	r2, r3
 8006790:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <xTaskPriorityDisinherit+0x108>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4013      	ands	r3, r2
 8006796:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <xTaskPriorityDisinherit+0x108>)
 8006798:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	f1c3 0207 	rsb	r2, r3, #7
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	2201      	movs	r2, #1
 80067b4:	409a      	lsls	r2, r3
 80067b6:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <xTaskPriorityDisinherit+0x108>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	4a0d      	ldr	r2, [pc, #52]	; (80067f4 <xTaskPriorityDisinherit+0x108>)
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <xTaskPriorityDisinherit+0x104>)
 80067ce:	441a      	add	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f7fe fbb1 	bl	8004f3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067e0:	697b      	ldr	r3, [r7, #20]
	}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000408 	.word	0x20000408
 80067f0:	2000040c 	.word	0x2000040c
 80067f4:	20000510 	.word	0x20000510

080067f8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006802:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006808:	4b28      	ldr	r3, [pc, #160]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3304      	adds	r3, #4
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe fbf0 	bl	8004ff4 <uxListRemove>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	2201      	movs	r2, #1
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43da      	mvns	r2, r3
 8006828:	4b21      	ldr	r3, [pc, #132]	; (80068b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4013      	ands	r3, r2
 800682e:	4a20      	ldr	r2, [pc, #128]	; (80068b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006830:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006838:	d10a      	bne.n	8006850 <prvAddCurrentTaskToDelayedList+0x58>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d007      	beq.n	8006850 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3304      	adds	r3, #4
 8006846:	4619      	mov	r1, r3
 8006848:	481a      	ldr	r0, [pc, #104]	; (80068b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800684a:	f7fe fb78 	bl	8004f3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800684e:	e026      	b.n	800689e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006858:	4b14      	ldr	r3, [pc, #80]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d209      	bcs.n	800687c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006868:	4b13      	ldr	r3, [pc, #76]	; (80068b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f7fe fb85 	bl	8004f84 <vListInsert>
}
 800687a:	e010      	b.n	800689e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800687c:	4b0f      	ldr	r3, [pc, #60]	; (80068bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3304      	adds	r3, #4
 8006886:	4619      	mov	r1, r3
 8006888:	4610      	mov	r0, r2
 800688a:	f7fe fb7b 	bl	8004f84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800688e:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d202      	bcs.n	800689e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006898:	4a09      	ldr	r2, [pc, #36]	; (80068c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	6013      	str	r3, [r2, #0]
}
 800689e:	bf00      	nop
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	2000050c 	.word	0x2000050c
 80068ac:	20000408 	.word	0x20000408
 80068b0:	20000510 	.word	0x20000510
 80068b4:	200004f4 	.word	0x200004f4
 80068b8:	200004c4 	.word	0x200004c4
 80068bc:	200004c0 	.word	0x200004c0
 80068c0:	20000528 	.word	0x20000528

080068c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	3b04      	subs	r3, #4
 80068d4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	3b04      	subs	r3, #4
 80068e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f023 0201 	bic.w	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068f4:	4a08      	ldr	r2, [pc, #32]	; (8006918 <pxPortInitialiseStack+0x54>)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	3b14      	subs	r3, #20
 80068fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3b20      	subs	r3, #32
 800690a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800690c:	68fb      	ldr	r3, [r7, #12]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr
 8006918:	0800691d 	.word	0x0800691d

0800691c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006922:	2300      	movs	r3, #0
 8006924:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006926:	4b12      	ldr	r3, [pc, #72]	; (8006970 <prvTaskExitError+0x54>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692e:	d00a      	beq.n	8006946 <prvTaskExitError+0x2a>
	__asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	60fb      	str	r3, [r7, #12]
}
 8006942:	bf00      	nop
 8006944:	e7fe      	b.n	8006944 <prvTaskExitError+0x28>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	60bb      	str	r3, [r7, #8]
}
 8006958:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800695a:	bf00      	nop
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0fc      	beq.n	800695c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	bc80      	pop	{r7}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	20000014 	.word	0x20000014
	...

08006980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <pxCurrentTCBConst2>)
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	6808      	ldr	r0, [r1, #0]
 8006986:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800698a:	f380 8809 	msr	PSP, r0
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	f380 8811 	msr	BASEPRI, r0
 800699a:	f04e 0e0d 	orr.w	lr, lr, #13
 800699e:	4770      	bx	lr

080069a0 <pxCurrentTCBConst2>:
 80069a0:	20000408 	.word	0x20000408
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80069a8:	4806      	ldr	r0, [pc, #24]	; (80069c4 <prvPortStartFirstTask+0x1c>)
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	6800      	ldr	r0, [r0, #0]
 80069ae:	f380 8808 	msr	MSP, r0
 80069b2:	b662      	cpsie	i
 80069b4:	b661      	cpsie	f
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	df00      	svc	0
 80069c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069c2:	bf00      	nop
 80069c4:	e000ed08 	.word	0xe000ed08

080069c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80069ce:	4b32      	ldr	r3, [pc, #200]	; (8006a98 <xPortStartScheduler+0xd0>)
 80069d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	22ff      	movs	r2, #255	; 0xff
 80069de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	4b2a      	ldr	r3, [pc, #168]	; (8006a9c <xPortStartScheduler+0xd4>)
 80069f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80069f6:	4b2a      	ldr	r3, [pc, #168]	; (8006aa0 <xPortStartScheduler+0xd8>)
 80069f8:	2207      	movs	r2, #7
 80069fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80069fc:	e009      	b.n	8006a12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80069fe:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	4a26      	ldr	r2, [pc, #152]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	005b      	lsls	r3, r3, #1
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a12:	78fb      	ldrb	r3, [r7, #3]
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1a:	2b80      	cmp	r3, #128	; 0x80
 8006a1c:	d0ef      	beq.n	80069fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a1e:	4b20      	ldr	r3, [pc, #128]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f1c3 0307 	rsb	r3, r3, #7
 8006a26:	2b04      	cmp	r3, #4
 8006a28:	d00a      	beq.n	8006a40 <xPortStartScheduler+0x78>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	60bb      	str	r3, [r7, #8]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a40:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	4a16      	ldr	r2, [pc, #88]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a4a:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a52:	4a13      	ldr	r2, [pc, #76]	; (8006aa0 <xPortStartScheduler+0xd8>)
 8006a54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	b2da      	uxtb	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a5e:	4b11      	ldr	r3, [pc, #68]	; (8006aa4 <xPortStartScheduler+0xdc>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a10      	ldr	r2, [pc, #64]	; (8006aa4 <xPortStartScheduler+0xdc>)
 8006a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <xPortStartScheduler+0xdc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <xPortStartScheduler+0xdc>)
 8006a70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006a74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006a76:	f000 f8b9 	bl	8006bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <xPortStartScheduler+0xe0>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a80:	f7ff ff92 	bl	80069a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a84:	f7ff fbca 	bl	800621c <vTaskSwitchContext>
	prvTaskExitError();
 8006a88:	f7ff ff48 	bl	800691c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	e000e400 	.word	0xe000e400
 8006a9c:	20000534 	.word	0x20000534
 8006aa0:	20000538 	.word	0x20000538
 8006aa4:	e000ed20 	.word	0xe000ed20
 8006aa8:	20000014 	.word	0x20000014

08006aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	607b      	str	r3, [r7, #4]
}
 8006ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ac6:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <vPortEnterCritical+0x58>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3301      	adds	r3, #1
 8006acc:	4a0d      	ldr	r2, [pc, #52]	; (8006b04 <vPortEnterCritical+0x58>)
 8006ace:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006ad0:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <vPortEnterCritical+0x58>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d10f      	bne.n	8006af8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ad8:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <vPortEnterCritical+0x5c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00a      	beq.n	8006af8 <vPortEnterCritical+0x4c>
	__asm volatile
 8006ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	603b      	str	r3, [r7, #0]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <vPortEnterCritical+0x4a>
	}
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	20000014 	.word	0x20000014
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b12:	4b11      	ldr	r3, [pc, #68]	; (8006b58 <vPortExitCritical+0x4c>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <vPortExitCritical+0x24>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	607b      	str	r3, [r7, #4]
}
 8006b2c:	bf00      	nop
 8006b2e:	e7fe      	b.n	8006b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b30:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <vPortExitCritical+0x4c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	4a08      	ldr	r2, [pc, #32]	; (8006b58 <vPortExitCritical+0x4c>)
 8006b38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b3a:	4b07      	ldr	r3, [pc, #28]	; (8006b58 <vPortExitCritical+0x4c>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d105      	bne.n	8006b4e <vPortExitCritical+0x42>
 8006b42:	2300      	movs	r3, #0
 8006b44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f383 8811 	msr	BASEPRI, r3
}
 8006b4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006b4e:	bf00      	nop
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr
 8006b58:	20000014 	.word	0x20000014
 8006b5c:	00000000 	.word	0x00000000

08006b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006b60:	f3ef 8009 	mrs	r0, PSP
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	4b0d      	ldr	r3, [pc, #52]	; (8006ba0 <pxCurrentTCBConst>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b70:	6010      	str	r0, [r2, #0]
 8006b72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006b76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006b7a:	f380 8811 	msr	BASEPRI, r0
 8006b7e:	f7ff fb4d 	bl	800621c <vTaskSwitchContext>
 8006b82:	f04f 0000 	mov.w	r0, #0
 8006b86:	f380 8811 	msr	BASEPRI, r0
 8006b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b8e:	6819      	ldr	r1, [r3, #0]
 8006b90:	6808      	ldr	r0, [r1, #0]
 8006b92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b96:	f380 8809 	msr	PSP, r0
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	4770      	bx	lr

08006ba0 <pxCurrentTCBConst>:
 8006ba0:	20000408 	.word	0x20000408
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop

08006ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	607b      	str	r3, [r7, #4]
}
 8006bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006bc2:	f7ff fa6d 	bl	80060a0 <xTaskIncrementTick>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006bcc:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <SysTick_Handler+0x40>)
 8006bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f383 8811 	msr	BASEPRI, r3
}
 8006bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <vPortSetupTimerInterrupt+0x30>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bf6:	4b0a      	ldr	r3, [pc, #40]	; (8006c20 <vPortSetupTimerInterrupt+0x34>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <vPortSetupTimerInterrupt+0x38>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a09      	ldr	r2, [pc, #36]	; (8006c28 <vPortSetupTimerInterrupt+0x3c>)
 8006c02:	fba2 2303 	umull	r2, r3, r2, r3
 8006c06:	099b      	lsrs	r3, r3, #6
 8006c08:	4a08      	ldr	r2, [pc, #32]	; (8006c2c <vPortSetupTimerInterrupt+0x40>)
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c0e:	4b03      	ldr	r3, [pc, #12]	; (8006c1c <vPortSetupTimerInterrupt+0x30>)
 8006c10:	2207      	movs	r2, #7
 8006c12:	601a      	str	r2, [r3, #0]
}
 8006c14:	bf00      	nop
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bc80      	pop	{r7}
 8006c1a:	4770      	bx	lr
 8006c1c:	e000e010 	.word	0xe000e010
 8006c20:	e000e018 	.word	0xe000e018
 8006c24:	20000008 	.word	0x20000008
 8006c28:	10624dd3 	.word	0x10624dd3
 8006c2c:	e000e014 	.word	0xe000e014

08006c30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006c36:	f3ef 8305 	mrs	r3, IPSR
 8006c3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b0f      	cmp	r3, #15
 8006c40:	d914      	bls.n	8006c6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006c42:	4a16      	ldr	r2, [pc, #88]	; (8006c9c <vPortValidateInterruptPriority+0x6c>)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <vPortValidateInterruptPriority+0x70>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	7afa      	ldrb	r2, [r7, #11]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d20a      	bcs.n	8006c6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	607b      	str	r3, [r7, #4]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <vPortValidateInterruptPriority+0x74>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c74:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <vPortValidateInterruptPriority+0x78>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d90a      	bls.n	8006c92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	603b      	str	r3, [r7, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <vPortValidateInterruptPriority+0x60>
	}
 8006c92:	bf00      	nop
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bc80      	pop	{r7}
 8006c9a:	4770      	bx	lr
 8006c9c:	e000e3f0 	.word	0xe000e3f0
 8006ca0:	20000534 	.word	0x20000534
 8006ca4:	e000ed0c 	.word	0xe000ed0c
 8006ca8:	20000538 	.word	0x20000538

08006cac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cb8:	f7ff f948 	bl	8005f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cbc:	4b58      	ldr	r3, [pc, #352]	; (8006e20 <pvPortMalloc+0x174>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d101      	bne.n	8006cc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006cc4:	f000 f910 	bl	8006ee8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006cc8:	4b56      	ldr	r3, [pc, #344]	; (8006e24 <pvPortMalloc+0x178>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f040 808e 	bne.w	8006df2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01d      	beq.n	8006d18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006cdc:	2208      	movs	r2, #8
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d014      	beq.n	8006d18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f023 0307 	bic.w	r3, r3, #7
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00a      	beq.n	8006d18 <pvPortMalloc+0x6c>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	617b      	str	r3, [r7, #20]
}
 8006d14:	bf00      	nop
 8006d16:	e7fe      	b.n	8006d16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d069      	beq.n	8006df2 <pvPortMalloc+0x146>
 8006d1e:	4b42      	ldr	r3, [pc, #264]	; (8006e28 <pvPortMalloc+0x17c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d864      	bhi.n	8006df2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d28:	4b40      	ldr	r3, [pc, #256]	; (8006e2c <pvPortMalloc+0x180>)
 8006d2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d2c:	4b3f      	ldr	r3, [pc, #252]	; (8006e2c <pvPortMalloc+0x180>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d32:	e004      	b.n	8006d3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d903      	bls.n	8006d50 <pvPortMalloc+0xa4>
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1f1      	bne.n	8006d34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d50:	4b33      	ldr	r3, [pc, #204]	; (8006e20 <pvPortMalloc+0x174>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d04b      	beq.n	8006df2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2208      	movs	r2, #8
 8006d60:	4413      	add	r3, r2
 8006d62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	1ad2      	subs	r2, r2, r3
 8006d74:	2308      	movs	r3, #8
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d91f      	bls.n	8006dbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4413      	add	r3, r2
 8006d82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <pvPortMalloc+0xf8>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	613b      	str	r3, [r7, #16]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	1ad2      	subs	r2, r2, r3
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006db6:	69b8      	ldr	r0, [r7, #24]
 8006db8:	f000 f8f8 	bl	8006fac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dbc:	4b1a      	ldr	r3, [pc, #104]	; (8006e28 <pvPortMalloc+0x17c>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	4a18      	ldr	r2, [pc, #96]	; (8006e28 <pvPortMalloc+0x17c>)
 8006dc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006dca:	4b17      	ldr	r3, [pc, #92]	; (8006e28 <pvPortMalloc+0x17c>)
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4b18      	ldr	r3, [pc, #96]	; (8006e30 <pvPortMalloc+0x184>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d203      	bcs.n	8006dde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dd6:	4b14      	ldr	r3, [pc, #80]	; (8006e28 <pvPortMalloc+0x17c>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a15      	ldr	r2, [pc, #84]	; (8006e30 <pvPortMalloc+0x184>)
 8006ddc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4b10      	ldr	r3, [pc, #64]	; (8006e24 <pvPortMalloc+0x178>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	431a      	orrs	r2, r3
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	2200      	movs	r2, #0
 8006df0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006df2:	f7ff f8b9 	bl	8005f68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00a      	beq.n	8006e16 <pvPortMalloc+0x16a>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60fb      	str	r3, [r7, #12]
}
 8006e12:	bf00      	nop
 8006e14:	e7fe      	b.n	8006e14 <pvPortMalloc+0x168>
	return pvReturn;
 8006e16:	69fb      	ldr	r3, [r7, #28]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3728      	adds	r7, #40	; 0x28
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20001144 	.word	0x20001144
 8006e24:	20001150 	.word	0x20001150
 8006e28:	20001148 	.word	0x20001148
 8006e2c:	2000113c 	.word	0x2000113c
 8006e30:	2000114c 	.word	0x2000114c

08006e34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d048      	beq.n	8006ed8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e46:	2308      	movs	r3, #8
 8006e48:	425b      	negs	r3, r3
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	685a      	ldr	r2, [r3, #4]
 8006e58:	4b21      	ldr	r3, [pc, #132]	; (8006ee0 <vPortFree+0xac>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <vPortFree+0x44>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	60fb      	str	r3, [r7, #12]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00a      	beq.n	8006e96 <vPortFree+0x62>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	60bb      	str	r3, [r7, #8]
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	4b11      	ldr	r3, [pc, #68]	; (8006ee0 <vPortFree+0xac>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4013      	ands	r3, r2
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d019      	beq.n	8006ed8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d115      	bne.n	8006ed8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	; (8006ee0 <vPortFree+0xac>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	401a      	ands	r2, r3
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ebc:	f7ff f846 	bl	8005f4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	4b07      	ldr	r3, [pc, #28]	; (8006ee4 <vPortFree+0xb0>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4413      	add	r3, r2
 8006eca:	4a06      	ldr	r2, [pc, #24]	; (8006ee4 <vPortFree+0xb0>)
 8006ecc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ece:	6938      	ldr	r0, [r7, #16]
 8006ed0:	f000 f86c 	bl	8006fac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ed4:	f7ff f848 	bl	8005f68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ed8:	bf00      	nop
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20001150 	.word	0x20001150
 8006ee4:	20001148 	.word	0x20001148

08006ee8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ef2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ef4:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <prvHeapInit+0xac>)
 8006ef6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00c      	beq.n	8006f1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3307      	adds	r3, #7
 8006f06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0307 	bic.w	r3, r3, #7
 8006f0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	1ad3      	subs	r3, r2, r3
 8006f16:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <prvHeapInit+0xac>)
 8006f18:	4413      	add	r3, r2
 8006f1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f20:	4a1d      	ldr	r2, [pc, #116]	; (8006f98 <prvHeapInit+0xb0>)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f26:	4b1c      	ldr	r3, [pc, #112]	; (8006f98 <prvHeapInit+0xb0>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	4413      	add	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f34:	2208      	movs	r2, #8
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	1a9b      	subs	r3, r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f023 0307 	bic.w	r3, r3, #7
 8006f42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4a15      	ldr	r2, [pc, #84]	; (8006f9c <prvHeapInit+0xb4>)
 8006f48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f4a:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <prvHeapInit+0xb4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f52:	4b12      	ldr	r3, [pc, #72]	; (8006f9c <prvHeapInit+0xb4>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	68fa      	ldr	r2, [r7, #12]
 8006f62:	1ad2      	subs	r2, r2, r3
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <prvHeapInit+0xb4>)
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	4a0a      	ldr	r2, [pc, #40]	; (8006fa0 <prvHeapInit+0xb8>)
 8006f76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	4a09      	ldr	r2, [pc, #36]	; (8006fa4 <prvHeapInit+0xbc>)
 8006f7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f80:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <prvHeapInit+0xc0>)
 8006f82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006f86:	601a      	str	r2, [r3, #0]
}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	2000053c 	.word	0x2000053c
 8006f98:	2000113c 	.word	0x2000113c
 8006f9c:	20001144 	.word	0x20001144
 8006fa0:	2000114c 	.word	0x2000114c
 8006fa4:	20001148 	.word	0x20001148
 8006fa8:	20001150 	.word	0x20001150

08006fac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fb4:	4b27      	ldr	r3, [pc, #156]	; (8007054 <prvInsertBlockIntoFreeList+0xa8>)
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	e002      	b.n	8006fc0 <prvInsertBlockIntoFreeList+0x14>
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d8f7      	bhi.n	8006fba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d108      	bne.n	8006fee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	441a      	add	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	441a      	add	r2, r3
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d118      	bne.n	8007034 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	4b14      	ldr	r3, [pc, #80]	; (8007058 <prvInsertBlockIntoFreeList+0xac>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d00d      	beq.n	800702a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	441a      	add	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	e008      	b.n	800703c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800702a:	4b0b      	ldr	r3, [pc, #44]	; (8007058 <prvInsertBlockIntoFreeList+0xac>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	e003      	b.n	800703c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	429a      	cmp	r2, r3
 8007042:	d002      	beq.n	800704a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800704a:	bf00      	nop
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	bc80      	pop	{r7}
 8007052:	4770      	bx	lr
 8007054:	2000113c 	.word	0x2000113c
 8007058:	20001144 	.word	0x20001144

0800705c <siprintf>:
 800705c:	b40e      	push	{r1, r2, r3}
 800705e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007062:	b500      	push	{lr}
 8007064:	b09c      	sub	sp, #112	; 0x70
 8007066:	ab1d      	add	r3, sp, #116	; 0x74
 8007068:	9002      	str	r0, [sp, #8]
 800706a:	9006      	str	r0, [sp, #24]
 800706c:	9107      	str	r1, [sp, #28]
 800706e:	9104      	str	r1, [sp, #16]
 8007070:	4808      	ldr	r0, [pc, #32]	; (8007094 <siprintf+0x38>)
 8007072:	4909      	ldr	r1, [pc, #36]	; (8007098 <siprintf+0x3c>)
 8007074:	f853 2b04 	ldr.w	r2, [r3], #4
 8007078:	9105      	str	r1, [sp, #20]
 800707a:	6800      	ldr	r0, [r0, #0]
 800707c:	a902      	add	r1, sp, #8
 800707e:	9301      	str	r3, [sp, #4]
 8007080:	f000 f9f2 	bl	8007468 <_svfiprintf_r>
 8007084:	2200      	movs	r2, #0
 8007086:	9b02      	ldr	r3, [sp, #8]
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	b01c      	add	sp, #112	; 0x70
 800708c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007090:	b003      	add	sp, #12
 8007092:	4770      	bx	lr
 8007094:	20000064 	.word	0x20000064
 8007098:	ffff0208 	.word	0xffff0208

0800709c <memset>:
 800709c:	4603      	mov	r3, r0
 800709e:	4402      	add	r2, r0
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d100      	bne.n	80070a6 <memset+0xa>
 80070a4:	4770      	bx	lr
 80070a6:	f803 1b01 	strb.w	r1, [r3], #1
 80070aa:	e7f9      	b.n	80070a0 <memset+0x4>

080070ac <_reclaim_reent>:
 80070ac:	4b29      	ldr	r3, [pc, #164]	; (8007154 <_reclaim_reent+0xa8>)
 80070ae:	b570      	push	{r4, r5, r6, lr}
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4604      	mov	r4, r0
 80070b4:	4283      	cmp	r3, r0
 80070b6:	d04b      	beq.n	8007150 <_reclaim_reent+0xa4>
 80070b8:	69c3      	ldr	r3, [r0, #28]
 80070ba:	b143      	cbz	r3, 80070ce <_reclaim_reent+0x22>
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d144      	bne.n	800714c <_reclaim_reent+0xa0>
 80070c2:	69e3      	ldr	r3, [r4, #28]
 80070c4:	6819      	ldr	r1, [r3, #0]
 80070c6:	b111      	cbz	r1, 80070ce <_reclaim_reent+0x22>
 80070c8:	4620      	mov	r0, r4
 80070ca:	f000 f87f 	bl	80071cc <_free_r>
 80070ce:	6961      	ldr	r1, [r4, #20]
 80070d0:	b111      	cbz	r1, 80070d8 <_reclaim_reent+0x2c>
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 f87a 	bl	80071cc <_free_r>
 80070d8:	69e1      	ldr	r1, [r4, #28]
 80070da:	b111      	cbz	r1, 80070e2 <_reclaim_reent+0x36>
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 f875 	bl	80071cc <_free_r>
 80070e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80070e4:	b111      	cbz	r1, 80070ec <_reclaim_reent+0x40>
 80070e6:	4620      	mov	r0, r4
 80070e8:	f000 f870 	bl	80071cc <_free_r>
 80070ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070ee:	b111      	cbz	r1, 80070f6 <_reclaim_reent+0x4a>
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 f86b 	bl	80071cc <_free_r>
 80070f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80070f8:	b111      	cbz	r1, 8007100 <_reclaim_reent+0x54>
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 f866 	bl	80071cc <_free_r>
 8007100:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007102:	b111      	cbz	r1, 800710a <_reclaim_reent+0x5e>
 8007104:	4620      	mov	r0, r4
 8007106:	f000 f861 	bl	80071cc <_free_r>
 800710a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800710c:	b111      	cbz	r1, 8007114 <_reclaim_reent+0x68>
 800710e:	4620      	mov	r0, r4
 8007110:	f000 f85c 	bl	80071cc <_free_r>
 8007114:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007116:	b111      	cbz	r1, 800711e <_reclaim_reent+0x72>
 8007118:	4620      	mov	r0, r4
 800711a:	f000 f857 	bl	80071cc <_free_r>
 800711e:	6a23      	ldr	r3, [r4, #32]
 8007120:	b1b3      	cbz	r3, 8007150 <_reclaim_reent+0xa4>
 8007122:	4620      	mov	r0, r4
 8007124:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007128:	4718      	bx	r3
 800712a:	5949      	ldr	r1, [r1, r5]
 800712c:	b941      	cbnz	r1, 8007140 <_reclaim_reent+0x94>
 800712e:	3504      	adds	r5, #4
 8007130:	69e3      	ldr	r3, [r4, #28]
 8007132:	2d80      	cmp	r5, #128	; 0x80
 8007134:	68d9      	ldr	r1, [r3, #12]
 8007136:	d1f8      	bne.n	800712a <_reclaim_reent+0x7e>
 8007138:	4620      	mov	r0, r4
 800713a:	f000 f847 	bl	80071cc <_free_r>
 800713e:	e7c0      	b.n	80070c2 <_reclaim_reent+0x16>
 8007140:	680e      	ldr	r6, [r1, #0]
 8007142:	4620      	mov	r0, r4
 8007144:	f000 f842 	bl	80071cc <_free_r>
 8007148:	4631      	mov	r1, r6
 800714a:	e7ef      	b.n	800712c <_reclaim_reent+0x80>
 800714c:	2500      	movs	r5, #0
 800714e:	e7ef      	b.n	8007130 <_reclaim_reent+0x84>
 8007150:	bd70      	pop	{r4, r5, r6, pc}
 8007152:	bf00      	nop
 8007154:	20000064 	.word	0x20000064

08007158 <__errno>:
 8007158:	4b01      	ldr	r3, [pc, #4]	; (8007160 <__errno+0x8>)
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	20000064 	.word	0x20000064

08007164 <__libc_init_array>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	2600      	movs	r6, #0
 8007168:	4d0c      	ldr	r5, [pc, #48]	; (800719c <__libc_init_array+0x38>)
 800716a:	4c0d      	ldr	r4, [pc, #52]	; (80071a0 <__libc_init_array+0x3c>)
 800716c:	1b64      	subs	r4, r4, r5
 800716e:	10a4      	asrs	r4, r4, #2
 8007170:	42a6      	cmp	r6, r4
 8007172:	d109      	bne.n	8007188 <__libc_init_array+0x24>
 8007174:	f000 fc7a 	bl	8007a6c <_init>
 8007178:	2600      	movs	r6, #0
 800717a:	4d0a      	ldr	r5, [pc, #40]	; (80071a4 <__libc_init_array+0x40>)
 800717c:	4c0a      	ldr	r4, [pc, #40]	; (80071a8 <__libc_init_array+0x44>)
 800717e:	1b64      	subs	r4, r4, r5
 8007180:	10a4      	asrs	r4, r4, #2
 8007182:	42a6      	cmp	r6, r4
 8007184:	d105      	bne.n	8007192 <__libc_init_array+0x2e>
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	f855 3b04 	ldr.w	r3, [r5], #4
 800718c:	4798      	blx	r3
 800718e:	3601      	adds	r6, #1
 8007190:	e7ee      	b.n	8007170 <__libc_init_array+0xc>
 8007192:	f855 3b04 	ldr.w	r3, [r5], #4
 8007196:	4798      	blx	r3
 8007198:	3601      	adds	r6, #1
 800719a:	e7f2      	b.n	8007182 <__libc_init_array+0x1e>
 800719c:	08007bd4 	.word	0x08007bd4
 80071a0:	08007bd4 	.word	0x08007bd4
 80071a4:	08007bd4 	.word	0x08007bd4
 80071a8:	08007bd8 	.word	0x08007bd8

080071ac <__retarget_lock_acquire_recursive>:
 80071ac:	4770      	bx	lr

080071ae <__retarget_lock_release_recursive>:
 80071ae:	4770      	bx	lr

080071b0 <memcpy>:
 80071b0:	440a      	add	r2, r1
 80071b2:	4291      	cmp	r1, r2
 80071b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80071b8:	d100      	bne.n	80071bc <memcpy+0xc>
 80071ba:	4770      	bx	lr
 80071bc:	b510      	push	{r4, lr}
 80071be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071c2:	4291      	cmp	r1, r2
 80071c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071c8:	d1f9      	bne.n	80071be <memcpy+0xe>
 80071ca:	bd10      	pop	{r4, pc}

080071cc <_free_r>:
 80071cc:	b538      	push	{r3, r4, r5, lr}
 80071ce:	4605      	mov	r5, r0
 80071d0:	2900      	cmp	r1, #0
 80071d2:	d040      	beq.n	8007256 <_free_r+0x8a>
 80071d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071d8:	1f0c      	subs	r4, r1, #4
 80071da:	2b00      	cmp	r3, #0
 80071dc:	bfb8      	it	lt
 80071de:	18e4      	addlt	r4, r4, r3
 80071e0:	f000 f8dc 	bl	800739c <__malloc_lock>
 80071e4:	4a1c      	ldr	r2, [pc, #112]	; (8007258 <_free_r+0x8c>)
 80071e6:	6813      	ldr	r3, [r2, #0]
 80071e8:	b933      	cbnz	r3, 80071f8 <_free_r+0x2c>
 80071ea:	6063      	str	r3, [r4, #4]
 80071ec:	6014      	str	r4, [r2, #0]
 80071ee:	4628      	mov	r0, r5
 80071f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f4:	f000 b8d8 	b.w	80073a8 <__malloc_unlock>
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d908      	bls.n	800720e <_free_r+0x42>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	1821      	adds	r1, r4, r0
 8007200:	428b      	cmp	r3, r1
 8007202:	bf01      	itttt	eq
 8007204:	6819      	ldreq	r1, [r3, #0]
 8007206:	685b      	ldreq	r3, [r3, #4]
 8007208:	1809      	addeq	r1, r1, r0
 800720a:	6021      	streq	r1, [r4, #0]
 800720c:	e7ed      	b.n	80071ea <_free_r+0x1e>
 800720e:	461a      	mov	r2, r3
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	b10b      	cbz	r3, 8007218 <_free_r+0x4c>
 8007214:	42a3      	cmp	r3, r4
 8007216:	d9fa      	bls.n	800720e <_free_r+0x42>
 8007218:	6811      	ldr	r1, [r2, #0]
 800721a:	1850      	adds	r0, r2, r1
 800721c:	42a0      	cmp	r0, r4
 800721e:	d10b      	bne.n	8007238 <_free_r+0x6c>
 8007220:	6820      	ldr	r0, [r4, #0]
 8007222:	4401      	add	r1, r0
 8007224:	1850      	adds	r0, r2, r1
 8007226:	4283      	cmp	r3, r0
 8007228:	6011      	str	r1, [r2, #0]
 800722a:	d1e0      	bne.n	80071ee <_free_r+0x22>
 800722c:	6818      	ldr	r0, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	4408      	add	r0, r1
 8007232:	6010      	str	r0, [r2, #0]
 8007234:	6053      	str	r3, [r2, #4]
 8007236:	e7da      	b.n	80071ee <_free_r+0x22>
 8007238:	d902      	bls.n	8007240 <_free_r+0x74>
 800723a:	230c      	movs	r3, #12
 800723c:	602b      	str	r3, [r5, #0]
 800723e:	e7d6      	b.n	80071ee <_free_r+0x22>
 8007240:	6820      	ldr	r0, [r4, #0]
 8007242:	1821      	adds	r1, r4, r0
 8007244:	428b      	cmp	r3, r1
 8007246:	bf01      	itttt	eq
 8007248:	6819      	ldreq	r1, [r3, #0]
 800724a:	685b      	ldreq	r3, [r3, #4]
 800724c:	1809      	addeq	r1, r1, r0
 800724e:	6021      	streq	r1, [r4, #0]
 8007250:	6063      	str	r3, [r4, #4]
 8007252:	6054      	str	r4, [r2, #4]
 8007254:	e7cb      	b.n	80071ee <_free_r+0x22>
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	20001294 	.word	0x20001294

0800725c <sbrk_aligned>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	4e0e      	ldr	r6, [pc, #56]	; (8007298 <sbrk_aligned+0x3c>)
 8007260:	460c      	mov	r4, r1
 8007262:	6831      	ldr	r1, [r6, #0]
 8007264:	4605      	mov	r5, r0
 8007266:	b911      	cbnz	r1, 800726e <sbrk_aligned+0x12>
 8007268:	f000 fbaa 	bl	80079c0 <_sbrk_r>
 800726c:	6030      	str	r0, [r6, #0]
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 fba5 	bl	80079c0 <_sbrk_r>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d00a      	beq.n	8007290 <sbrk_aligned+0x34>
 800727a:	1cc4      	adds	r4, r0, #3
 800727c:	f024 0403 	bic.w	r4, r4, #3
 8007280:	42a0      	cmp	r0, r4
 8007282:	d007      	beq.n	8007294 <sbrk_aligned+0x38>
 8007284:	1a21      	subs	r1, r4, r0
 8007286:	4628      	mov	r0, r5
 8007288:	f000 fb9a 	bl	80079c0 <_sbrk_r>
 800728c:	3001      	adds	r0, #1
 800728e:	d101      	bne.n	8007294 <sbrk_aligned+0x38>
 8007290:	f04f 34ff 	mov.w	r4, #4294967295
 8007294:	4620      	mov	r0, r4
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	20001298 	.word	0x20001298

0800729c <_malloc_r>:
 800729c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a0:	1ccd      	adds	r5, r1, #3
 80072a2:	f025 0503 	bic.w	r5, r5, #3
 80072a6:	3508      	adds	r5, #8
 80072a8:	2d0c      	cmp	r5, #12
 80072aa:	bf38      	it	cc
 80072ac:	250c      	movcc	r5, #12
 80072ae:	2d00      	cmp	r5, #0
 80072b0:	4607      	mov	r7, r0
 80072b2:	db01      	blt.n	80072b8 <_malloc_r+0x1c>
 80072b4:	42a9      	cmp	r1, r5
 80072b6:	d905      	bls.n	80072c4 <_malloc_r+0x28>
 80072b8:	230c      	movs	r3, #12
 80072ba:	2600      	movs	r6, #0
 80072bc:	603b      	str	r3, [r7, #0]
 80072be:	4630      	mov	r0, r6
 80072c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007398 <_malloc_r+0xfc>
 80072c8:	f000 f868 	bl	800739c <__malloc_lock>
 80072cc:	f8d8 3000 	ldr.w	r3, [r8]
 80072d0:	461c      	mov	r4, r3
 80072d2:	bb5c      	cbnz	r4, 800732c <_malloc_r+0x90>
 80072d4:	4629      	mov	r1, r5
 80072d6:	4638      	mov	r0, r7
 80072d8:	f7ff ffc0 	bl	800725c <sbrk_aligned>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	4604      	mov	r4, r0
 80072e0:	d155      	bne.n	800738e <_malloc_r+0xf2>
 80072e2:	f8d8 4000 	ldr.w	r4, [r8]
 80072e6:	4626      	mov	r6, r4
 80072e8:	2e00      	cmp	r6, #0
 80072ea:	d145      	bne.n	8007378 <_malloc_r+0xdc>
 80072ec:	2c00      	cmp	r4, #0
 80072ee:	d048      	beq.n	8007382 <_malloc_r+0xe6>
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	4631      	mov	r1, r6
 80072f4:	4638      	mov	r0, r7
 80072f6:	eb04 0903 	add.w	r9, r4, r3
 80072fa:	f000 fb61 	bl	80079c0 <_sbrk_r>
 80072fe:	4581      	cmp	r9, r0
 8007300:	d13f      	bne.n	8007382 <_malloc_r+0xe6>
 8007302:	6821      	ldr	r1, [r4, #0]
 8007304:	4638      	mov	r0, r7
 8007306:	1a6d      	subs	r5, r5, r1
 8007308:	4629      	mov	r1, r5
 800730a:	f7ff ffa7 	bl	800725c <sbrk_aligned>
 800730e:	3001      	adds	r0, #1
 8007310:	d037      	beq.n	8007382 <_malloc_r+0xe6>
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	442b      	add	r3, r5
 8007316:	6023      	str	r3, [r4, #0]
 8007318:	f8d8 3000 	ldr.w	r3, [r8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d038      	beq.n	8007392 <_malloc_r+0xf6>
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	42a2      	cmp	r2, r4
 8007324:	d12b      	bne.n	800737e <_malloc_r+0xe2>
 8007326:	2200      	movs	r2, #0
 8007328:	605a      	str	r2, [r3, #4]
 800732a:	e00f      	b.n	800734c <_malloc_r+0xb0>
 800732c:	6822      	ldr	r2, [r4, #0]
 800732e:	1b52      	subs	r2, r2, r5
 8007330:	d41f      	bmi.n	8007372 <_malloc_r+0xd6>
 8007332:	2a0b      	cmp	r2, #11
 8007334:	d917      	bls.n	8007366 <_malloc_r+0xca>
 8007336:	1961      	adds	r1, r4, r5
 8007338:	42a3      	cmp	r3, r4
 800733a:	6025      	str	r5, [r4, #0]
 800733c:	bf18      	it	ne
 800733e:	6059      	strne	r1, [r3, #4]
 8007340:	6863      	ldr	r3, [r4, #4]
 8007342:	bf08      	it	eq
 8007344:	f8c8 1000 	streq.w	r1, [r8]
 8007348:	5162      	str	r2, [r4, r5]
 800734a:	604b      	str	r3, [r1, #4]
 800734c:	4638      	mov	r0, r7
 800734e:	f104 060b 	add.w	r6, r4, #11
 8007352:	f000 f829 	bl	80073a8 <__malloc_unlock>
 8007356:	f026 0607 	bic.w	r6, r6, #7
 800735a:	1d23      	adds	r3, r4, #4
 800735c:	1af2      	subs	r2, r6, r3
 800735e:	d0ae      	beq.n	80072be <_malloc_r+0x22>
 8007360:	1b9b      	subs	r3, r3, r6
 8007362:	50a3      	str	r3, [r4, r2]
 8007364:	e7ab      	b.n	80072be <_malloc_r+0x22>
 8007366:	42a3      	cmp	r3, r4
 8007368:	6862      	ldr	r2, [r4, #4]
 800736a:	d1dd      	bne.n	8007328 <_malloc_r+0x8c>
 800736c:	f8c8 2000 	str.w	r2, [r8]
 8007370:	e7ec      	b.n	800734c <_malloc_r+0xb0>
 8007372:	4623      	mov	r3, r4
 8007374:	6864      	ldr	r4, [r4, #4]
 8007376:	e7ac      	b.n	80072d2 <_malloc_r+0x36>
 8007378:	4634      	mov	r4, r6
 800737a:	6876      	ldr	r6, [r6, #4]
 800737c:	e7b4      	b.n	80072e8 <_malloc_r+0x4c>
 800737e:	4613      	mov	r3, r2
 8007380:	e7cc      	b.n	800731c <_malloc_r+0x80>
 8007382:	230c      	movs	r3, #12
 8007384:	4638      	mov	r0, r7
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	f000 f80e 	bl	80073a8 <__malloc_unlock>
 800738c:	e797      	b.n	80072be <_malloc_r+0x22>
 800738e:	6025      	str	r5, [r4, #0]
 8007390:	e7dc      	b.n	800734c <_malloc_r+0xb0>
 8007392:	605b      	str	r3, [r3, #4]
 8007394:	deff      	udf	#255	; 0xff
 8007396:	bf00      	nop
 8007398:	20001294 	.word	0x20001294

0800739c <__malloc_lock>:
 800739c:	4801      	ldr	r0, [pc, #4]	; (80073a4 <__malloc_lock+0x8>)
 800739e:	f7ff bf05 	b.w	80071ac <__retarget_lock_acquire_recursive>
 80073a2:	bf00      	nop
 80073a4:	20001290 	.word	0x20001290

080073a8 <__malloc_unlock>:
 80073a8:	4801      	ldr	r0, [pc, #4]	; (80073b0 <__malloc_unlock+0x8>)
 80073aa:	f7ff bf00 	b.w	80071ae <__retarget_lock_release_recursive>
 80073ae:	bf00      	nop
 80073b0:	20001290 	.word	0x20001290

080073b4 <__ssputs_r>:
 80073b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	461f      	mov	r7, r3
 80073ba:	688e      	ldr	r6, [r1, #8]
 80073bc:	4682      	mov	sl, r0
 80073be:	42be      	cmp	r6, r7
 80073c0:	460c      	mov	r4, r1
 80073c2:	4690      	mov	r8, r2
 80073c4:	680b      	ldr	r3, [r1, #0]
 80073c6:	d82c      	bhi.n	8007422 <__ssputs_r+0x6e>
 80073c8:	898a      	ldrh	r2, [r1, #12]
 80073ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073ce:	d026      	beq.n	800741e <__ssputs_r+0x6a>
 80073d0:	6965      	ldr	r5, [r4, #20]
 80073d2:	6909      	ldr	r1, [r1, #16]
 80073d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073d8:	eba3 0901 	sub.w	r9, r3, r1
 80073dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073e0:	1c7b      	adds	r3, r7, #1
 80073e2:	444b      	add	r3, r9
 80073e4:	106d      	asrs	r5, r5, #1
 80073e6:	429d      	cmp	r5, r3
 80073e8:	bf38      	it	cc
 80073ea:	461d      	movcc	r5, r3
 80073ec:	0553      	lsls	r3, r2, #21
 80073ee:	d527      	bpl.n	8007440 <__ssputs_r+0x8c>
 80073f0:	4629      	mov	r1, r5
 80073f2:	f7ff ff53 	bl	800729c <_malloc_r>
 80073f6:	4606      	mov	r6, r0
 80073f8:	b360      	cbz	r0, 8007454 <__ssputs_r+0xa0>
 80073fa:	464a      	mov	r2, r9
 80073fc:	6921      	ldr	r1, [r4, #16]
 80073fe:	f7ff fed7 	bl	80071b0 <memcpy>
 8007402:	89a3      	ldrh	r3, [r4, #12]
 8007404:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800740c:	81a3      	strh	r3, [r4, #12]
 800740e:	6126      	str	r6, [r4, #16]
 8007410:	444e      	add	r6, r9
 8007412:	6026      	str	r6, [r4, #0]
 8007414:	463e      	mov	r6, r7
 8007416:	6165      	str	r5, [r4, #20]
 8007418:	eba5 0509 	sub.w	r5, r5, r9
 800741c:	60a5      	str	r5, [r4, #8]
 800741e:	42be      	cmp	r6, r7
 8007420:	d900      	bls.n	8007424 <__ssputs_r+0x70>
 8007422:	463e      	mov	r6, r7
 8007424:	4632      	mov	r2, r6
 8007426:	4641      	mov	r1, r8
 8007428:	6820      	ldr	r0, [r4, #0]
 800742a:	f000 faaf 	bl	800798c <memmove>
 800742e:	2000      	movs	r0, #0
 8007430:	68a3      	ldr	r3, [r4, #8]
 8007432:	1b9b      	subs	r3, r3, r6
 8007434:	60a3      	str	r3, [r4, #8]
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	4433      	add	r3, r6
 800743a:	6023      	str	r3, [r4, #0]
 800743c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007440:	462a      	mov	r2, r5
 8007442:	f000 fadb 	bl	80079fc <_realloc_r>
 8007446:	4606      	mov	r6, r0
 8007448:	2800      	cmp	r0, #0
 800744a:	d1e0      	bne.n	800740e <__ssputs_r+0x5a>
 800744c:	4650      	mov	r0, sl
 800744e:	6921      	ldr	r1, [r4, #16]
 8007450:	f7ff febc 	bl	80071cc <_free_r>
 8007454:	230c      	movs	r3, #12
 8007456:	f8ca 3000 	str.w	r3, [sl]
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007464:	81a3      	strh	r3, [r4, #12]
 8007466:	e7e9      	b.n	800743c <__ssputs_r+0x88>

08007468 <_svfiprintf_r>:
 8007468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	4698      	mov	r8, r3
 800746e:	898b      	ldrh	r3, [r1, #12]
 8007470:	4607      	mov	r7, r0
 8007472:	061b      	lsls	r3, r3, #24
 8007474:	460d      	mov	r5, r1
 8007476:	4614      	mov	r4, r2
 8007478:	b09d      	sub	sp, #116	; 0x74
 800747a:	d50e      	bpl.n	800749a <_svfiprintf_r+0x32>
 800747c:	690b      	ldr	r3, [r1, #16]
 800747e:	b963      	cbnz	r3, 800749a <_svfiprintf_r+0x32>
 8007480:	2140      	movs	r1, #64	; 0x40
 8007482:	f7ff ff0b 	bl	800729c <_malloc_r>
 8007486:	6028      	str	r0, [r5, #0]
 8007488:	6128      	str	r0, [r5, #16]
 800748a:	b920      	cbnz	r0, 8007496 <_svfiprintf_r+0x2e>
 800748c:	230c      	movs	r3, #12
 800748e:	603b      	str	r3, [r7, #0]
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	e0d0      	b.n	8007638 <_svfiprintf_r+0x1d0>
 8007496:	2340      	movs	r3, #64	; 0x40
 8007498:	616b      	str	r3, [r5, #20]
 800749a:	2300      	movs	r3, #0
 800749c:	9309      	str	r3, [sp, #36]	; 0x24
 800749e:	2320      	movs	r3, #32
 80074a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074a4:	2330      	movs	r3, #48	; 0x30
 80074a6:	f04f 0901 	mov.w	r9, #1
 80074aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80074ae:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007650 <_svfiprintf_r+0x1e8>
 80074b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074b6:	4623      	mov	r3, r4
 80074b8:	469a      	mov	sl, r3
 80074ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074be:	b10a      	cbz	r2, 80074c4 <_svfiprintf_r+0x5c>
 80074c0:	2a25      	cmp	r2, #37	; 0x25
 80074c2:	d1f9      	bne.n	80074b8 <_svfiprintf_r+0x50>
 80074c4:	ebba 0b04 	subs.w	fp, sl, r4
 80074c8:	d00b      	beq.n	80074e2 <_svfiprintf_r+0x7a>
 80074ca:	465b      	mov	r3, fp
 80074cc:	4622      	mov	r2, r4
 80074ce:	4629      	mov	r1, r5
 80074d0:	4638      	mov	r0, r7
 80074d2:	f7ff ff6f 	bl	80073b4 <__ssputs_r>
 80074d6:	3001      	adds	r0, #1
 80074d8:	f000 80a9 	beq.w	800762e <_svfiprintf_r+0x1c6>
 80074dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074de:	445a      	add	r2, fp
 80074e0:	9209      	str	r2, [sp, #36]	; 0x24
 80074e2:	f89a 3000 	ldrb.w	r3, [sl]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f000 80a1 	beq.w	800762e <_svfiprintf_r+0x1c6>
 80074ec:	2300      	movs	r3, #0
 80074ee:	f04f 32ff 	mov.w	r2, #4294967295
 80074f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074f6:	f10a 0a01 	add.w	sl, sl, #1
 80074fa:	9304      	str	r3, [sp, #16]
 80074fc:	9307      	str	r3, [sp, #28]
 80074fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007502:	931a      	str	r3, [sp, #104]	; 0x68
 8007504:	4654      	mov	r4, sl
 8007506:	2205      	movs	r2, #5
 8007508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800750c:	4850      	ldr	r0, [pc, #320]	; (8007650 <_svfiprintf_r+0x1e8>)
 800750e:	f000 fa67 	bl	80079e0 <memchr>
 8007512:	9a04      	ldr	r2, [sp, #16]
 8007514:	b9d8      	cbnz	r0, 800754e <_svfiprintf_r+0xe6>
 8007516:	06d0      	lsls	r0, r2, #27
 8007518:	bf44      	itt	mi
 800751a:	2320      	movmi	r3, #32
 800751c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007520:	0711      	lsls	r1, r2, #28
 8007522:	bf44      	itt	mi
 8007524:	232b      	movmi	r3, #43	; 0x2b
 8007526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800752a:	f89a 3000 	ldrb.w	r3, [sl]
 800752e:	2b2a      	cmp	r3, #42	; 0x2a
 8007530:	d015      	beq.n	800755e <_svfiprintf_r+0xf6>
 8007532:	4654      	mov	r4, sl
 8007534:	2000      	movs	r0, #0
 8007536:	f04f 0c0a 	mov.w	ip, #10
 800753a:	9a07      	ldr	r2, [sp, #28]
 800753c:	4621      	mov	r1, r4
 800753e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007542:	3b30      	subs	r3, #48	; 0x30
 8007544:	2b09      	cmp	r3, #9
 8007546:	d94d      	bls.n	80075e4 <_svfiprintf_r+0x17c>
 8007548:	b1b0      	cbz	r0, 8007578 <_svfiprintf_r+0x110>
 800754a:	9207      	str	r2, [sp, #28]
 800754c:	e014      	b.n	8007578 <_svfiprintf_r+0x110>
 800754e:	eba0 0308 	sub.w	r3, r0, r8
 8007552:	fa09 f303 	lsl.w	r3, r9, r3
 8007556:	4313      	orrs	r3, r2
 8007558:	46a2      	mov	sl, r4
 800755a:	9304      	str	r3, [sp, #16]
 800755c:	e7d2      	b.n	8007504 <_svfiprintf_r+0x9c>
 800755e:	9b03      	ldr	r3, [sp, #12]
 8007560:	1d19      	adds	r1, r3, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	9103      	str	r1, [sp, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	bfbb      	ittet	lt
 800756a:	425b      	neglt	r3, r3
 800756c:	f042 0202 	orrlt.w	r2, r2, #2
 8007570:	9307      	strge	r3, [sp, #28]
 8007572:	9307      	strlt	r3, [sp, #28]
 8007574:	bfb8      	it	lt
 8007576:	9204      	strlt	r2, [sp, #16]
 8007578:	7823      	ldrb	r3, [r4, #0]
 800757a:	2b2e      	cmp	r3, #46	; 0x2e
 800757c:	d10c      	bne.n	8007598 <_svfiprintf_r+0x130>
 800757e:	7863      	ldrb	r3, [r4, #1]
 8007580:	2b2a      	cmp	r3, #42	; 0x2a
 8007582:	d134      	bne.n	80075ee <_svfiprintf_r+0x186>
 8007584:	9b03      	ldr	r3, [sp, #12]
 8007586:	3402      	adds	r4, #2
 8007588:	1d1a      	adds	r2, r3, #4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	9203      	str	r2, [sp, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	bfb8      	it	lt
 8007592:	f04f 33ff 	movlt.w	r3, #4294967295
 8007596:	9305      	str	r3, [sp, #20]
 8007598:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007654 <_svfiprintf_r+0x1ec>
 800759c:	2203      	movs	r2, #3
 800759e:	4650      	mov	r0, sl
 80075a0:	7821      	ldrb	r1, [r4, #0]
 80075a2:	f000 fa1d 	bl	80079e0 <memchr>
 80075a6:	b138      	cbz	r0, 80075b8 <_svfiprintf_r+0x150>
 80075a8:	2240      	movs	r2, #64	; 0x40
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	eba0 000a 	sub.w	r0, r0, sl
 80075b0:	4082      	lsls	r2, r0
 80075b2:	4313      	orrs	r3, r2
 80075b4:	3401      	adds	r4, #1
 80075b6:	9304      	str	r3, [sp, #16]
 80075b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075bc:	2206      	movs	r2, #6
 80075be:	4826      	ldr	r0, [pc, #152]	; (8007658 <_svfiprintf_r+0x1f0>)
 80075c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075c4:	f000 fa0c 	bl	80079e0 <memchr>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d038      	beq.n	800763e <_svfiprintf_r+0x1d6>
 80075cc:	4b23      	ldr	r3, [pc, #140]	; (800765c <_svfiprintf_r+0x1f4>)
 80075ce:	bb1b      	cbnz	r3, 8007618 <_svfiprintf_r+0x1b0>
 80075d0:	9b03      	ldr	r3, [sp, #12]
 80075d2:	3307      	adds	r3, #7
 80075d4:	f023 0307 	bic.w	r3, r3, #7
 80075d8:	3308      	adds	r3, #8
 80075da:	9303      	str	r3, [sp, #12]
 80075dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075de:	4433      	add	r3, r6
 80075e0:	9309      	str	r3, [sp, #36]	; 0x24
 80075e2:	e768      	b.n	80074b6 <_svfiprintf_r+0x4e>
 80075e4:	460c      	mov	r4, r1
 80075e6:	2001      	movs	r0, #1
 80075e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075ec:	e7a6      	b.n	800753c <_svfiprintf_r+0xd4>
 80075ee:	2300      	movs	r3, #0
 80075f0:	f04f 0c0a 	mov.w	ip, #10
 80075f4:	4619      	mov	r1, r3
 80075f6:	3401      	adds	r4, #1
 80075f8:	9305      	str	r3, [sp, #20]
 80075fa:	4620      	mov	r0, r4
 80075fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007600:	3a30      	subs	r2, #48	; 0x30
 8007602:	2a09      	cmp	r2, #9
 8007604:	d903      	bls.n	800760e <_svfiprintf_r+0x1a6>
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0c6      	beq.n	8007598 <_svfiprintf_r+0x130>
 800760a:	9105      	str	r1, [sp, #20]
 800760c:	e7c4      	b.n	8007598 <_svfiprintf_r+0x130>
 800760e:	4604      	mov	r4, r0
 8007610:	2301      	movs	r3, #1
 8007612:	fb0c 2101 	mla	r1, ip, r1, r2
 8007616:	e7f0      	b.n	80075fa <_svfiprintf_r+0x192>
 8007618:	ab03      	add	r3, sp, #12
 800761a:	9300      	str	r3, [sp, #0]
 800761c:	462a      	mov	r2, r5
 800761e:	4638      	mov	r0, r7
 8007620:	4b0f      	ldr	r3, [pc, #60]	; (8007660 <_svfiprintf_r+0x1f8>)
 8007622:	a904      	add	r1, sp, #16
 8007624:	f3af 8000 	nop.w
 8007628:	1c42      	adds	r2, r0, #1
 800762a:	4606      	mov	r6, r0
 800762c:	d1d6      	bne.n	80075dc <_svfiprintf_r+0x174>
 800762e:	89ab      	ldrh	r3, [r5, #12]
 8007630:	065b      	lsls	r3, r3, #25
 8007632:	f53f af2d 	bmi.w	8007490 <_svfiprintf_r+0x28>
 8007636:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007638:	b01d      	add	sp, #116	; 0x74
 800763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763e:	ab03      	add	r3, sp, #12
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	462a      	mov	r2, r5
 8007644:	4638      	mov	r0, r7
 8007646:	4b06      	ldr	r3, [pc, #24]	; (8007660 <_svfiprintf_r+0x1f8>)
 8007648:	a904      	add	r1, sp, #16
 800764a:	f000 f87d 	bl	8007748 <_printf_i>
 800764e:	e7eb      	b.n	8007628 <_svfiprintf_r+0x1c0>
 8007650:	08007b9e 	.word	0x08007b9e
 8007654:	08007ba4 	.word	0x08007ba4
 8007658:	08007ba8 	.word	0x08007ba8
 800765c:	00000000 	.word	0x00000000
 8007660:	080073b5 	.word	0x080073b5

08007664 <_printf_common>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	4616      	mov	r6, r2
 800766a:	4699      	mov	r9, r3
 800766c:	688a      	ldr	r2, [r1, #8]
 800766e:	690b      	ldr	r3, [r1, #16]
 8007670:	4607      	mov	r7, r0
 8007672:	4293      	cmp	r3, r2
 8007674:	bfb8      	it	lt
 8007676:	4613      	movlt	r3, r2
 8007678:	6033      	str	r3, [r6, #0]
 800767a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800767e:	460c      	mov	r4, r1
 8007680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007684:	b10a      	cbz	r2, 800768a <_printf_common+0x26>
 8007686:	3301      	adds	r3, #1
 8007688:	6033      	str	r3, [r6, #0]
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	0699      	lsls	r1, r3, #26
 800768e:	bf42      	ittt	mi
 8007690:	6833      	ldrmi	r3, [r6, #0]
 8007692:	3302      	addmi	r3, #2
 8007694:	6033      	strmi	r3, [r6, #0]
 8007696:	6825      	ldr	r5, [r4, #0]
 8007698:	f015 0506 	ands.w	r5, r5, #6
 800769c:	d106      	bne.n	80076ac <_printf_common+0x48>
 800769e:	f104 0a19 	add.w	sl, r4, #25
 80076a2:	68e3      	ldr	r3, [r4, #12]
 80076a4:	6832      	ldr	r2, [r6, #0]
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	42ab      	cmp	r3, r5
 80076aa:	dc2b      	bgt.n	8007704 <_printf_common+0xa0>
 80076ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076b0:	1e13      	subs	r3, r2, #0
 80076b2:	6822      	ldr	r2, [r4, #0]
 80076b4:	bf18      	it	ne
 80076b6:	2301      	movne	r3, #1
 80076b8:	0692      	lsls	r2, r2, #26
 80076ba:	d430      	bmi.n	800771e <_printf_common+0xba>
 80076bc:	4649      	mov	r1, r9
 80076be:	4638      	mov	r0, r7
 80076c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076c4:	47c0      	blx	r8
 80076c6:	3001      	adds	r0, #1
 80076c8:	d023      	beq.n	8007712 <_printf_common+0xae>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	6922      	ldr	r2, [r4, #16]
 80076ce:	f003 0306 	and.w	r3, r3, #6
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	bf14      	ite	ne
 80076d6:	2500      	movne	r5, #0
 80076d8:	6833      	ldreq	r3, [r6, #0]
 80076da:	f04f 0600 	mov.w	r6, #0
 80076de:	bf08      	it	eq
 80076e0:	68e5      	ldreq	r5, [r4, #12]
 80076e2:	f104 041a 	add.w	r4, r4, #26
 80076e6:	bf08      	it	eq
 80076e8:	1aed      	subeq	r5, r5, r3
 80076ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076ee:	bf08      	it	eq
 80076f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076f4:	4293      	cmp	r3, r2
 80076f6:	bfc4      	itt	gt
 80076f8:	1a9b      	subgt	r3, r3, r2
 80076fa:	18ed      	addgt	r5, r5, r3
 80076fc:	42b5      	cmp	r5, r6
 80076fe:	d11a      	bne.n	8007736 <_printf_common+0xd2>
 8007700:	2000      	movs	r0, #0
 8007702:	e008      	b.n	8007716 <_printf_common+0xb2>
 8007704:	2301      	movs	r3, #1
 8007706:	4652      	mov	r2, sl
 8007708:	4649      	mov	r1, r9
 800770a:	4638      	mov	r0, r7
 800770c:	47c0      	blx	r8
 800770e:	3001      	adds	r0, #1
 8007710:	d103      	bne.n	800771a <_printf_common+0xb6>
 8007712:	f04f 30ff 	mov.w	r0, #4294967295
 8007716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800771a:	3501      	adds	r5, #1
 800771c:	e7c1      	b.n	80076a2 <_printf_common+0x3e>
 800771e:	2030      	movs	r0, #48	; 0x30
 8007720:	18e1      	adds	r1, r4, r3
 8007722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800772c:	4422      	add	r2, r4
 800772e:	3302      	adds	r3, #2
 8007730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007734:	e7c2      	b.n	80076bc <_printf_common+0x58>
 8007736:	2301      	movs	r3, #1
 8007738:	4622      	mov	r2, r4
 800773a:	4649      	mov	r1, r9
 800773c:	4638      	mov	r0, r7
 800773e:	47c0      	blx	r8
 8007740:	3001      	adds	r0, #1
 8007742:	d0e6      	beq.n	8007712 <_printf_common+0xae>
 8007744:	3601      	adds	r6, #1
 8007746:	e7d9      	b.n	80076fc <_printf_common+0x98>

08007748 <_printf_i>:
 8007748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800774c:	7e0f      	ldrb	r7, [r1, #24]
 800774e:	4691      	mov	r9, r2
 8007750:	2f78      	cmp	r7, #120	; 0x78
 8007752:	4680      	mov	r8, r0
 8007754:	460c      	mov	r4, r1
 8007756:	469a      	mov	sl, r3
 8007758:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800775a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800775e:	d807      	bhi.n	8007770 <_printf_i+0x28>
 8007760:	2f62      	cmp	r7, #98	; 0x62
 8007762:	d80a      	bhi.n	800777a <_printf_i+0x32>
 8007764:	2f00      	cmp	r7, #0
 8007766:	f000 80d5 	beq.w	8007914 <_printf_i+0x1cc>
 800776a:	2f58      	cmp	r7, #88	; 0x58
 800776c:	f000 80c1 	beq.w	80078f2 <_printf_i+0x1aa>
 8007770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007778:	e03a      	b.n	80077f0 <_printf_i+0xa8>
 800777a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800777e:	2b15      	cmp	r3, #21
 8007780:	d8f6      	bhi.n	8007770 <_printf_i+0x28>
 8007782:	a101      	add	r1, pc, #4	; (adr r1, 8007788 <_printf_i+0x40>)
 8007784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007788:	080077e1 	.word	0x080077e1
 800778c:	080077f5 	.word	0x080077f5
 8007790:	08007771 	.word	0x08007771
 8007794:	08007771 	.word	0x08007771
 8007798:	08007771 	.word	0x08007771
 800779c:	08007771 	.word	0x08007771
 80077a0:	080077f5 	.word	0x080077f5
 80077a4:	08007771 	.word	0x08007771
 80077a8:	08007771 	.word	0x08007771
 80077ac:	08007771 	.word	0x08007771
 80077b0:	08007771 	.word	0x08007771
 80077b4:	080078fb 	.word	0x080078fb
 80077b8:	08007821 	.word	0x08007821
 80077bc:	080078b5 	.word	0x080078b5
 80077c0:	08007771 	.word	0x08007771
 80077c4:	08007771 	.word	0x08007771
 80077c8:	0800791d 	.word	0x0800791d
 80077cc:	08007771 	.word	0x08007771
 80077d0:	08007821 	.word	0x08007821
 80077d4:	08007771 	.word	0x08007771
 80077d8:	08007771 	.word	0x08007771
 80077dc:	080078bd 	.word	0x080078bd
 80077e0:	682b      	ldr	r3, [r5, #0]
 80077e2:	1d1a      	adds	r2, r3, #4
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	602a      	str	r2, [r5, #0]
 80077e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077f0:	2301      	movs	r3, #1
 80077f2:	e0a0      	b.n	8007936 <_printf_i+0x1ee>
 80077f4:	6820      	ldr	r0, [r4, #0]
 80077f6:	682b      	ldr	r3, [r5, #0]
 80077f8:	0607      	lsls	r7, r0, #24
 80077fa:	f103 0104 	add.w	r1, r3, #4
 80077fe:	6029      	str	r1, [r5, #0]
 8007800:	d501      	bpl.n	8007806 <_printf_i+0xbe>
 8007802:	681e      	ldr	r6, [r3, #0]
 8007804:	e003      	b.n	800780e <_printf_i+0xc6>
 8007806:	0646      	lsls	r6, r0, #25
 8007808:	d5fb      	bpl.n	8007802 <_printf_i+0xba>
 800780a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800780e:	2e00      	cmp	r6, #0
 8007810:	da03      	bge.n	800781a <_printf_i+0xd2>
 8007812:	232d      	movs	r3, #45	; 0x2d
 8007814:	4276      	negs	r6, r6
 8007816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800781a:	230a      	movs	r3, #10
 800781c:	4859      	ldr	r0, [pc, #356]	; (8007984 <_printf_i+0x23c>)
 800781e:	e012      	b.n	8007846 <_printf_i+0xfe>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	6820      	ldr	r0, [r4, #0]
 8007824:	1d19      	adds	r1, r3, #4
 8007826:	6029      	str	r1, [r5, #0]
 8007828:	0605      	lsls	r5, r0, #24
 800782a:	d501      	bpl.n	8007830 <_printf_i+0xe8>
 800782c:	681e      	ldr	r6, [r3, #0]
 800782e:	e002      	b.n	8007836 <_printf_i+0xee>
 8007830:	0641      	lsls	r1, r0, #25
 8007832:	d5fb      	bpl.n	800782c <_printf_i+0xe4>
 8007834:	881e      	ldrh	r6, [r3, #0]
 8007836:	2f6f      	cmp	r7, #111	; 0x6f
 8007838:	bf0c      	ite	eq
 800783a:	2308      	moveq	r3, #8
 800783c:	230a      	movne	r3, #10
 800783e:	4851      	ldr	r0, [pc, #324]	; (8007984 <_printf_i+0x23c>)
 8007840:	2100      	movs	r1, #0
 8007842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007846:	6865      	ldr	r5, [r4, #4]
 8007848:	2d00      	cmp	r5, #0
 800784a:	bfa8      	it	ge
 800784c:	6821      	ldrge	r1, [r4, #0]
 800784e:	60a5      	str	r5, [r4, #8]
 8007850:	bfa4      	itt	ge
 8007852:	f021 0104 	bicge.w	r1, r1, #4
 8007856:	6021      	strge	r1, [r4, #0]
 8007858:	b90e      	cbnz	r6, 800785e <_printf_i+0x116>
 800785a:	2d00      	cmp	r5, #0
 800785c:	d04b      	beq.n	80078f6 <_printf_i+0x1ae>
 800785e:	4615      	mov	r5, r2
 8007860:	fbb6 f1f3 	udiv	r1, r6, r3
 8007864:	fb03 6711 	mls	r7, r3, r1, r6
 8007868:	5dc7      	ldrb	r7, [r0, r7]
 800786a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800786e:	4637      	mov	r7, r6
 8007870:	42bb      	cmp	r3, r7
 8007872:	460e      	mov	r6, r1
 8007874:	d9f4      	bls.n	8007860 <_printf_i+0x118>
 8007876:	2b08      	cmp	r3, #8
 8007878:	d10b      	bne.n	8007892 <_printf_i+0x14a>
 800787a:	6823      	ldr	r3, [r4, #0]
 800787c:	07de      	lsls	r6, r3, #31
 800787e:	d508      	bpl.n	8007892 <_printf_i+0x14a>
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	6861      	ldr	r1, [r4, #4]
 8007884:	4299      	cmp	r1, r3
 8007886:	bfde      	ittt	le
 8007888:	2330      	movle	r3, #48	; 0x30
 800788a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800788e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007892:	1b52      	subs	r2, r2, r5
 8007894:	6122      	str	r2, [r4, #16]
 8007896:	464b      	mov	r3, r9
 8007898:	4621      	mov	r1, r4
 800789a:	4640      	mov	r0, r8
 800789c:	f8cd a000 	str.w	sl, [sp]
 80078a0:	aa03      	add	r2, sp, #12
 80078a2:	f7ff fedf 	bl	8007664 <_printf_common>
 80078a6:	3001      	adds	r0, #1
 80078a8:	d14a      	bne.n	8007940 <_printf_i+0x1f8>
 80078aa:	f04f 30ff 	mov.w	r0, #4294967295
 80078ae:	b004      	add	sp, #16
 80078b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	f043 0320 	orr.w	r3, r3, #32
 80078ba:	6023      	str	r3, [r4, #0]
 80078bc:	2778      	movs	r7, #120	; 0x78
 80078be:	4832      	ldr	r0, [pc, #200]	; (8007988 <_printf_i+0x240>)
 80078c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	6829      	ldr	r1, [r5, #0]
 80078c8:	061f      	lsls	r7, r3, #24
 80078ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80078ce:	d402      	bmi.n	80078d6 <_printf_i+0x18e>
 80078d0:	065f      	lsls	r7, r3, #25
 80078d2:	bf48      	it	mi
 80078d4:	b2b6      	uxthmi	r6, r6
 80078d6:	07df      	lsls	r7, r3, #31
 80078d8:	bf48      	it	mi
 80078da:	f043 0320 	orrmi.w	r3, r3, #32
 80078de:	6029      	str	r1, [r5, #0]
 80078e0:	bf48      	it	mi
 80078e2:	6023      	strmi	r3, [r4, #0]
 80078e4:	b91e      	cbnz	r6, 80078ee <_printf_i+0x1a6>
 80078e6:	6823      	ldr	r3, [r4, #0]
 80078e8:	f023 0320 	bic.w	r3, r3, #32
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	2310      	movs	r3, #16
 80078f0:	e7a6      	b.n	8007840 <_printf_i+0xf8>
 80078f2:	4824      	ldr	r0, [pc, #144]	; (8007984 <_printf_i+0x23c>)
 80078f4:	e7e4      	b.n	80078c0 <_printf_i+0x178>
 80078f6:	4615      	mov	r5, r2
 80078f8:	e7bd      	b.n	8007876 <_printf_i+0x12e>
 80078fa:	682b      	ldr	r3, [r5, #0]
 80078fc:	6826      	ldr	r6, [r4, #0]
 80078fe:	1d18      	adds	r0, r3, #4
 8007900:	6961      	ldr	r1, [r4, #20]
 8007902:	6028      	str	r0, [r5, #0]
 8007904:	0635      	lsls	r5, r6, #24
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	d501      	bpl.n	800790e <_printf_i+0x1c6>
 800790a:	6019      	str	r1, [r3, #0]
 800790c:	e002      	b.n	8007914 <_printf_i+0x1cc>
 800790e:	0670      	lsls	r0, r6, #25
 8007910:	d5fb      	bpl.n	800790a <_printf_i+0x1c2>
 8007912:	8019      	strh	r1, [r3, #0]
 8007914:	2300      	movs	r3, #0
 8007916:	4615      	mov	r5, r2
 8007918:	6123      	str	r3, [r4, #16]
 800791a:	e7bc      	b.n	8007896 <_printf_i+0x14e>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	2100      	movs	r1, #0
 8007920:	1d1a      	adds	r2, r3, #4
 8007922:	602a      	str	r2, [r5, #0]
 8007924:	681d      	ldr	r5, [r3, #0]
 8007926:	6862      	ldr	r2, [r4, #4]
 8007928:	4628      	mov	r0, r5
 800792a:	f000 f859 	bl	80079e0 <memchr>
 800792e:	b108      	cbz	r0, 8007934 <_printf_i+0x1ec>
 8007930:	1b40      	subs	r0, r0, r5
 8007932:	6060      	str	r0, [r4, #4]
 8007934:	6863      	ldr	r3, [r4, #4]
 8007936:	6123      	str	r3, [r4, #16]
 8007938:	2300      	movs	r3, #0
 800793a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800793e:	e7aa      	b.n	8007896 <_printf_i+0x14e>
 8007940:	462a      	mov	r2, r5
 8007942:	4649      	mov	r1, r9
 8007944:	4640      	mov	r0, r8
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	47d0      	blx	sl
 800794a:	3001      	adds	r0, #1
 800794c:	d0ad      	beq.n	80078aa <_printf_i+0x162>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	079b      	lsls	r3, r3, #30
 8007952:	d413      	bmi.n	800797c <_printf_i+0x234>
 8007954:	68e0      	ldr	r0, [r4, #12]
 8007956:	9b03      	ldr	r3, [sp, #12]
 8007958:	4298      	cmp	r0, r3
 800795a:	bfb8      	it	lt
 800795c:	4618      	movlt	r0, r3
 800795e:	e7a6      	b.n	80078ae <_printf_i+0x166>
 8007960:	2301      	movs	r3, #1
 8007962:	4632      	mov	r2, r6
 8007964:	4649      	mov	r1, r9
 8007966:	4640      	mov	r0, r8
 8007968:	47d0      	blx	sl
 800796a:	3001      	adds	r0, #1
 800796c:	d09d      	beq.n	80078aa <_printf_i+0x162>
 800796e:	3501      	adds	r5, #1
 8007970:	68e3      	ldr	r3, [r4, #12]
 8007972:	9903      	ldr	r1, [sp, #12]
 8007974:	1a5b      	subs	r3, r3, r1
 8007976:	42ab      	cmp	r3, r5
 8007978:	dcf2      	bgt.n	8007960 <_printf_i+0x218>
 800797a:	e7eb      	b.n	8007954 <_printf_i+0x20c>
 800797c:	2500      	movs	r5, #0
 800797e:	f104 0619 	add.w	r6, r4, #25
 8007982:	e7f5      	b.n	8007970 <_printf_i+0x228>
 8007984:	08007baf 	.word	0x08007baf
 8007988:	08007bc0 	.word	0x08007bc0

0800798c <memmove>:
 800798c:	4288      	cmp	r0, r1
 800798e:	b510      	push	{r4, lr}
 8007990:	eb01 0402 	add.w	r4, r1, r2
 8007994:	d902      	bls.n	800799c <memmove+0x10>
 8007996:	4284      	cmp	r4, r0
 8007998:	4623      	mov	r3, r4
 800799a:	d807      	bhi.n	80079ac <memmove+0x20>
 800799c:	1e43      	subs	r3, r0, #1
 800799e:	42a1      	cmp	r1, r4
 80079a0:	d008      	beq.n	80079b4 <memmove+0x28>
 80079a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079aa:	e7f8      	b.n	800799e <memmove+0x12>
 80079ac:	4601      	mov	r1, r0
 80079ae:	4402      	add	r2, r0
 80079b0:	428a      	cmp	r2, r1
 80079b2:	d100      	bne.n	80079b6 <memmove+0x2a>
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079be:	e7f7      	b.n	80079b0 <memmove+0x24>

080079c0 <_sbrk_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	2300      	movs	r3, #0
 80079c4:	4d05      	ldr	r5, [pc, #20]	; (80079dc <_sbrk_r+0x1c>)
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	602b      	str	r3, [r5, #0]
 80079cc:	f7f9 fde6 	bl	800159c <_sbrk>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_sbrk_r+0x1a>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_sbrk_r+0x1a>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	2000128c 	.word	0x2000128c

080079e0 <memchr>:
 80079e0:	4603      	mov	r3, r0
 80079e2:	b510      	push	{r4, lr}
 80079e4:	b2c9      	uxtb	r1, r1
 80079e6:	4402      	add	r2, r0
 80079e8:	4293      	cmp	r3, r2
 80079ea:	4618      	mov	r0, r3
 80079ec:	d101      	bne.n	80079f2 <memchr+0x12>
 80079ee:	2000      	movs	r0, #0
 80079f0:	e003      	b.n	80079fa <memchr+0x1a>
 80079f2:	7804      	ldrb	r4, [r0, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	428c      	cmp	r4, r1
 80079f8:	d1f6      	bne.n	80079e8 <memchr+0x8>
 80079fa:	bd10      	pop	{r4, pc}

080079fc <_realloc_r>:
 80079fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a00:	4680      	mov	r8, r0
 8007a02:	4614      	mov	r4, r2
 8007a04:	460e      	mov	r6, r1
 8007a06:	b921      	cbnz	r1, 8007a12 <_realloc_r+0x16>
 8007a08:	4611      	mov	r1, r2
 8007a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0e:	f7ff bc45 	b.w	800729c <_malloc_r>
 8007a12:	b92a      	cbnz	r2, 8007a20 <_realloc_r+0x24>
 8007a14:	f7ff fbda 	bl	80071cc <_free_r>
 8007a18:	4625      	mov	r5, r4
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a20:	f000 f81b 	bl	8007a5a <_malloc_usable_size_r>
 8007a24:	4284      	cmp	r4, r0
 8007a26:	4607      	mov	r7, r0
 8007a28:	d802      	bhi.n	8007a30 <_realloc_r+0x34>
 8007a2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a2e:	d812      	bhi.n	8007a56 <_realloc_r+0x5a>
 8007a30:	4621      	mov	r1, r4
 8007a32:	4640      	mov	r0, r8
 8007a34:	f7ff fc32 	bl	800729c <_malloc_r>
 8007a38:	4605      	mov	r5, r0
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	d0ed      	beq.n	8007a1a <_realloc_r+0x1e>
 8007a3e:	42bc      	cmp	r4, r7
 8007a40:	4622      	mov	r2, r4
 8007a42:	4631      	mov	r1, r6
 8007a44:	bf28      	it	cs
 8007a46:	463a      	movcs	r2, r7
 8007a48:	f7ff fbb2 	bl	80071b0 <memcpy>
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4640      	mov	r0, r8
 8007a50:	f7ff fbbc 	bl	80071cc <_free_r>
 8007a54:	e7e1      	b.n	8007a1a <_realloc_r+0x1e>
 8007a56:	4635      	mov	r5, r6
 8007a58:	e7df      	b.n	8007a1a <_realloc_r+0x1e>

08007a5a <_malloc_usable_size_r>:
 8007a5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a5e:	1f18      	subs	r0, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	bfbc      	itt	lt
 8007a64:	580b      	ldrlt	r3, [r1, r0]
 8007a66:	18c0      	addlt	r0, r0, r3
 8007a68:	4770      	bx	lr
	...

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
